
MisProyectos/RTOSrecuperatorio/out/RTOSrecuperatorio.elf:     file format elf32-littlearm
MisProyectos/RTOSrecuperatorio/out/RTOSrecuperatorio.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0039c1

Program Header:
0x70000001 off    0x000143f0 vaddr 0x1a0043f0 paddr 0x1a0043f0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010088 vaddr 0x10000088 paddr 0x10000088 align 2**16
         filesz 0x00000000 memsz 0x00002b74 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000043f8 memsz 0x000043f8 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0043f8 align 2**16
         filesz 0x00000088 memsz 0x00000088 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043f0  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  10000000  1a0043f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020088  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020088  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020088  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020088  2**2
                  CONTENTS
  6 .bss          00002b74  10000088  10000088  00010088  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020088  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020088  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020088  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020088  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a0043f0  1a0043f0  000143f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020088  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020088  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020088  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020088  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020088  2**2
                  CONTENTS
 17 .noinit       00000000  10002bfc  10002bfc  00020088  2**2
                  CONTENTS
 18 .debug_info   0001d344  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00004895  00000000  00000000  0003d3cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000c3ca  00000000  00000000  00041c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000f90  00000000  00000000  0004e030  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000f98  00000000  00000000  0004efc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000d86e  00000000  00000000  0004ff58  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00011576  00000000  00000000  0005d7c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    00027238  00000000  00000000  0006ed3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000070  00000000  00000000  00095f74  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000039  00000000  00000000  00095fe4  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00002644  00000000  00000000  00096020  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000088 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0043f0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002bfc l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0028d4 l     F .text	000000ac uartProcessIRQ
10002b74 l     O .bss	00000004 rxIsrCallbackUART0
10002b78 l     O .bss	00000004 txIsrCallbackUART0
10002b7c l     O .bss	00000004 txIsrCallbackUART2
10002b80 l     O .bss	00000004 txIsrCallbackUART3
1a004200 l     O .text	00000048 lpcUarts
10002b84 l     O .bss	00000004 rxIsrCallbackUART2
10002b88 l     O .bss	00000004 rxIsrCallbackUART3
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 freeRTOS_blinky.c
1a0005e0 l     F .text	000000a8 checkButtonsDebounce
10000088 l     O .bss	00000001 debugPrint
1000008c l     O .bss	00000005 pwmManagementStruct.11514
10000091 l     O .bss	00000001 ledState.11508
10000092 l     O .bss	00000001 i.11527
10000093 l     O .bss	00000001 counter.11499
10000094 l     O .bss	00000014 buttonDataTemp.11525
100000a8 l     O .bss	00000050 buttonsData.11526
100000f8 l     O .bss	00000001 lastButtonInt.11528
100000fc l     O .bss	00000005 pwmManagementStructTemp.11498
10000101 l     O .bss	00000001 counter.11507
10000104 l     O .bss	00000005 pwmManagementStructTemp.11506
10000109 l     O .bss	00000001 ledState.11500
00000000 l    df *ABS*	00000000 isrPinLevel.c
00000000 l    df *ABS*	00000000 heap_1.c
1000010c l     O .bss	00000004 xNextFreeByte
10000110 l     O .bss	00002000 ucHeap
10002110 l     O .bss	00000004 pucAlignedHeap.9926
00000000 l    df *ABS*	00000000 queue.c
1a000ae4 l     F .text	0000001e prvIsQueueFull
1a000b04 l     F .text	0000001a prvIsQueueEmpty
1a000b20 l     F .text	00000076 prvCopyDataToQueue
1a000b98 l     F .text	00000024 prvCopyDataFromQueue
1a000bbc l     F .text	0000006a prvUnlockQueue
1a000ca8 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002114 l     O .bss	00000168 uxIdleTaskStack.9314
1000227c l     O .bss	00000060 xIdleTaskTCB.9313
100022dc l     O .bss	00000060 xTimerTaskTCB.9320
1000233c l     O .bss	000005a0 uxTimerTaskStack.9321
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a0012d4 l     F .text	00000034 prvResetNextTaskUnblockTime
1a001308 l     F .text	00000092 prvInitialiseNewTask
1a00139c l     F .text	00000068 prvInitialiseTaskLists
1a001404 l     F .text	000000a8 prvAddNewTaskToReadyList
1a0014ac l     F .text	0000003a prvDeleteTCB
1a0014e8 l     F .text	00000044 prvCheckTasksWaitingTermination
1a00152c l     F .text	00000028 prvIdleTask
1a001554 l     F .text	00000094 prvAddCurrentTaskToDelayedList
100028dc l     O .bss	00000004 xNumOfOverflows
100028e0 l     O .bss	00000004 pxDelayedTaskList
100028e4 l     O .bss	00000004 xSchedulerRunning
100028e8 l     O .bss	00000014 xTasksWaitingTermination
100028fc l     O .bss	00000004 pxOverflowDelayedTaskList
10002900 l     O .bss	00000004 uxPendedTicks
10002904 l     O .bss	0000008c pxReadyTasksLists
10002990 l     O .bss	00000004 uxSchedulerSuspended
10002994 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002998 l     O .bss	00000004 uxCurrentNumberOfTasks
100029a0 l     O .bss	00000014 xPendingReadyList
100029b4 l     O .bss	00000004 xIdleTaskHandle
100029b8 l     O .bss	00000004 xTickCount
100029bc l     O .bss	00000004 xNextTaskUnblockTime
100029c0 l     O .bss	00000004 uxTaskNumber
100029c4 l     O .bss	00000014 xDelayedTaskList1
100029d8 l     O .bss	00000014 xDelayedTaskList2
100029ec l     O .bss	00000014 xSuspendedTaskList
10002a00 l     O .bss	00000004 uxTopReadyPriority
10002a04 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001de0 l     F .text	00000020 prvGetNextExpireTime
1a001e00 l     F .text	00000048 prvInsertTimerInActiveList
1a001e48 l     F .text	0000006c prvCheckForValidListAndQueue
1a001eb4 l     F .text	00000040 prvInitialiseNewTimer
1a002268 l     F .text	00000016 prvTimerTask
1a002020 l     F .text	0000007c prvSwitchTimerLists
1a00209c l     F .text	0000002c prvSampleTimeNow
1a0020c8 l     F .text	0000005c prvProcessExpiredTimer
1a002124 l     F .text	00000074 prvProcessTimerOrBlockTask
1a002198 l     F .text	000000d0 prvProcessReceivedCommands
10002a08 l     O .bss	00000004 pxCurrentTimerList
10002a0c l     O .bss	00000014 xActiveTimerList1
10002a20 l     O .bss	00000014 xActiveTimerList2
10002a34 l     O .bss	000000a0 ucStaticTimerQueueStorage.10316
10002ad4 l     O .bss	00000004 xLastTime.10265
10002ad8 l     O .bss	00000050 xStaticTimerQueue.10315
10002b28 l     O .bss	00000004 xTimerQueue
10002b2c l     O .bss	00000004 pxOverflowTimerList
10002b30 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002280 l     F .text	00000040 prvTaskExitError
1a0022c0 l     F .text	00000022 prvPortStartFirstTask
1a0022e8 l     F .text	0000000e vPortEnableVFP
1a002350 l       .text	00000000 pxCurrentTCBConst2
1a002430 l       .text	00000000 pxCurrentTCBConst
10002b34 l     O .bss	00000001 ucMaxSysCallPriority
10002b38 l     O .bss	00000004 ulMaxPRIGROUPValue
10000004 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000000c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002638 l     F .text	0000002c gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
10002b3c l     O .bss	00000030 tickerObject.10474
00000000 l    df *ABS*	00000000 sapi_timer.c
1a002a74 l     F .text	00000002 errorOcurred
1a002a78 l     F .text	00000002 doNothing
10000010 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a002c94 l     F .text	00000040 Board_LED_Init
1a002cd4 l     F .text	0000003c Board_TEC_Init
1a002d10 l     F .text	0000003c Board_GPIO_Init
1a002d4c l     F .text	00000038 Board_SPI_Init
1a002d84 l     F .text	00000024 Board_I2C_Init
1a002da8 l     F .text	00000030 Board_ADC_Init
1a00424c l     O .text	00000012 GpioPorts
1a004268 l     O .text	00000008 GpioButtons
1a004270 l     O .text	0000000c GpioLeds
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00427c l     O .text	0000000c InitClkStates
1a004288 l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000050 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002f74 l     F .text	0000002c Chip_UART_GetIndex
1a004320 l     O .text	00000008 UART_BClock
1a004328 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a003118 l     F .text	00000014 Chip_ADC_GetClockIndex
1a00312c l     F .text	00000030 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0031f0 l     F .text	000000a8 pll_calc_divs
1a003298 l     F .text	00000104 pll_get_frac
1a00339c l     F .text	00000048 Chip_Clock_FindBaseClock
1a003608 l     F .text	00000022 Chip_Clock_GetDivRate
10002b8c l     O .bss	00000008 audio_usb_pll_freq
1a00433c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0043a8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003908 l     F .text	00000014 Chip_SSP_GetClockIndex
1a00391c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 enableGPIOIrq
00000000 l       *UND*	00000000 _printf_float
1a0043f0 l       .bss_RAM5	00000000 __init_array_end
1a0043f0 l       .bss_RAM5	00000000 __preinit_array_end
00000000 l       *UND*	00000000 disableGPIOIrq
1a0043f0 l       .bss_RAM5	00000000 __init_array_start
1a0043f0 l       .bss_RAM5	00000000 __preinit_array_start
1a003430 g     F .text	0000001c Chip_Clock_GetDividerSource
1a003aa8 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a002af8 g     F .text	00000040 TIMER2_IRQHandler
1a00019c  w    F .text	00000002 DebugMon_Handler
1a0001a8  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001a8  w    F .text	00000002 ADCHS_IRQHandler
1a003adc g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a0001a8  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002398 g     F .text	0000002c vPortExitCritical
1a0001a8  w    F .text	00000002 I2C0_IRQHandler
10002b70 g     O .bss	00000004 callBackFuncParams
1a000188  w    F .text	00000002 HardFault_Handler
1a0011bc g     F .text	0000004c vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a0031d0 g     F .text	0000000c Chip_ADC_SetResolution
1a002434 g     F .text	0000002c SysTick_Handler
1a002ff4 g     F .text	00000040 Chip_UART_SetBaud
1a002b88 g     F .text	00000008 printString
1a0001a8  w    F .text	00000002 SDIO_IRQHandler
1a0001a8  w    F .text	00000002 ATIMER_IRQHandler
1a0023d0 g     F .text	00000064 PendSV_Handler
1a000f58 g     F .text	000000e4 xQueueGenericSendFromISR
1a000184  w    F .text	00000002 NMI_Handler
1a0043f8 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001a8  w    F .text	00000002 I2C1_IRQHandler
1a0001a8  w    F .text	00000002 UART1_IRQHandler
1a0001a8  w    F .text	00000002 GPIO5_IRQHandler
1a0001a8  w    F .text	00000002 CAN1_IRQHandler
1000299c g     O .bss	00000004 pxCurrentTCB
10002b94 g     O .bss	00000004 queueMedicionTiempo
53ff3e7e g       *ABS*	00000000 __valid_user_code_checksum
1a0043f8 g       .ARM.exidx	00000000 _etext
1a0001a8  w    F .text	00000002 USB1_IRQHandler
1a0001a8  w    F .text	00000002 I2S0_IRQHandler
1a001c68 g     F .text	00000018 vTaskInternalSetTimeOutState
1a002b38 g     F .text	00000040 TIMER3_IRQHandler
1a003694 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001c8 g     F .text	00000012 bss_init
1a002498 g     F .text	00000128 xPortStartScheduler
1a004030 g     F .text	00000016 memcpy
1a001b74 g     F .text	00000030 vTaskPlaceOnEventList
1a0001a8  w    F .text	00000002 SGPIO_IRQHandler
10002b98 g     O .bss	00000004 manejoDePWMLED1
1a002460  w    F .text	00000038 vPortSetupTimerInterrupt
1a003a48 g     F .text	00000000 .hidden __aeabi_uldivmod
10002bfc g       .noinit	00000000 _noinit
1a000acc g     F .text	00000016 vPortFree
1a002a44 g     F .text	00000018 uartWriteString
10002bf8 g     O .bss	00000004 SystemCoreClock
1a002fa0 g     F .text	00000054 Chip_UART_Init
1a0001a8  w    F .text	00000002 ADC0_IRQHandler
1a002858 g     F .text	00000030 tickerCallback
1a0025c0 g     F .text	0000005c vPortValidateInterruptPriority
1a000194  w    F .text	00000002 UsageFault_Handler
1a000688 g     F .text	00000088 debounce
1a003710 g     F .text	0000004c Chip_Clock_GetRate
1a001228 g     F .text	00000018 vListInsertEnd
1a0001a8  w    F .text	00000002 GPIO6_IRQHandler
1a002b78 g     F .text	0000000e printInitUart
10002be8 g     O .bss	00000008 tickCounter
1a002e88 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a004264 g     O .text	00000004 ExtRateIn
1a0001a8  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001220 g     F .text	00000006 vListInitialiseItem
1a000918 g     F .text	00000070 GPIO1_IRQHandler
1a00103c g     F .text	00000158 xQueueReceive
10002ba4 g     O .bss	00000040 xQueueRegistry
1a0012b4 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001a8  w    F .text	00000002 SSP0_IRQHandler
1a0043f0 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
10002b9c g     O .bss	00000004 buttonsInfo
1a003fe4 g     F .text	0000004c __libc_init_array
1a003d78 g     F .text	0000026a .hidden __udivdi3
1a000490 g     F .text	00000150 timeMeasure
1a0001a8  w    F .text	00000002 ADC1_IRQHandler
1a000a68 g     F .text	00000064 pvPortMalloc
1a002dfc g     F .text	0000003c Board_Init
1a003a44 g     F .text	00000002 _init
1a001208 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a00177c g     F .text	0000000c xTaskGetTickCount
1a000dc8 g     F .text	00000190 xQueueGenericSend
1a0001a8  w    F .text	00000002 RTC_IRQHandler
10002bfc g       .bss	00000000 _ebss
1a002a7c g     F .text	0000003c TIMER0_IRQHandler
1a002888 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001a8  w    F .text	00000002 SPI_IRQHandler
1a002f44 g     F .text	00000030 Chip_I2C_SetClockRate
1a001d2c g     F .text	000000b4 xTaskPriorityDisinherit
1a0001a8  w    F .text	00000002 LCD_IRQHandler
1a0033e4 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001bdc g     F .text	0000008c xTaskRemoveFromEventList
1a0012d0 g     F .text	00000002 vApplicationMallocFailedHook
1a0001ac g     F .text	0000001a data_init
1a002ab8 g     F .text	00000040 TIMER1_IRQHandler
1a002f20 g     F .text	00000024 Chip_I2C_Init
1a002a5c g     F .text	0000000a UART2_IRQHandler
1a002b90 g     F .text	00000010 printEnter
1a0035a0 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a0040bc g     O .text	00000136 gpioPinsInit
1a002a28 g     F .text	0000001a uartWriteByte
1a003934 g     F .text	00000012 Chip_SSP_SetClockRate
1a000988 g     F .text	00000070 GPIO2_IRQHandler
1a0007f8 g     F .text	000000b0 isrPinLevelConfig
1a001c80 g     F .text	00000080 xTaskCheckForTimeOut
1a003670 g     F .text	00000024 Chip_Clock_GetBaseClock
10000088 g       .bss	00000000 _bss
1a00319c g     F .text	00000032 Chip_ADC_SetSampleRate
1a00176c g     F .text	00000010 vTaskSuspendAll
1a001788 g     F .text	00000010 xTaskGetTickCountFromISR
1a0001a8  w    F .text	00000002 I2S1_IRQHandler
1a003948 g     F .text	0000003e Chip_SSP_SetBitRate
1a001274 g     F .text	00000026 uxListRemove
1a0037b4 g     F .text	00000002 Chip_GPIO_Init
1a004260 g     O .text	00000004 OscRateIn
10002ba0 g     O .bss	00000004 manejoDePWMLED2
1a0029ac g     F .text	0000007c uartInit
1a0015e8 g     F .text	0000007c xTaskCreateStatic
10002bfc g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a001ab0 g     F .text	000000c4 vTaskSwitchContext
1a0001a8  w    F .text	00000002 SSP1_IRQHandler
1a000ccc g     F .text	000000aa xQueueGenericCreateStatic
1a001ba4 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a002664 g     F .text	0000019c gpioInit
1a00129c g     F .text	00000018 vApplicationGetIdleTaskMemory
1a001fb4 g     F .text	0000006c xTimerGenericCommand
1a0012cc g     F .text	00000002 vApplicationStackOverflowHook
1a003ad8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0001a8  w    F .text	00000002 USB0_IRQHandler
1a0009f8 g     F .text	00000070 GPIO3_IRQHandler
1a0001a8  w    F .text	00000002 SCT_IRQHandler
1a00344c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a004046 g     F .text	00000010 memset
1a00018c  w    F .text	00000002 MemManage_Handler
1a000710 g     F .text	000000e8 main
1a0001a8  w    F .text	00000002 WDT_IRQHandler
1a001240 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002330 g     F .text	00000024 SVC_Handler
10000008 g     O .data	00000004 DWT_CTRL
1a001ef4 g     F .text	00000070 xTimerCreateTimerTask
1a002980 g     F .text	00000018 uartTxReady
1a0019b4 g     F .text	000000ac vTaskDelayUntil
1a0001a8  w    F .text	00000002 GPIO7_IRQHandler
1a0036a0 g     F .text	0000003c Chip_Clock_EnableOpts
1a000d78 g     F .text	00000050 xQueueGenericCreate
1a003468 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a00375c g     F .text	00000058 fpuInit
1a003520 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a002e38 g     F .text	0000001c SystemInit
1a0001a8  w    F .text	00000002 SPIFI_IRQHandler
1a0001a8  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002800 g     F .text	00000058 gpioWrite
1a0018bc g     F .text	000000f8 xTaskResumeAll
1a0016cc g     F .text	000000a0 vTaskStartScheduler
1a00315c g     F .text	00000040 Chip_ADC_Init
1a002e54 g     F .text	00000034 Board_SetupMuxing
1a003034 g     F .text	000000e4 Chip_UART_SetBaudFDR
10002bf0 g     O .bss	00000008 tickRateMS
1a0001a8  w    F .text	00000002 ETH_IRQHandler
10002b6c g     O .bss	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a002998 g     F .text	00000014 uartTxWrite
1a0001a8  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001d00 g     F .text	0000000c vTaskMissedYield
10002bfc g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003988 g     F .text	00000038 Chip_SSP_Init
1a001194 g     F .text	00000028 vQueueAddToRegistry
1a0001a8  w    F .text	00000002 GINT0_IRQHandler
1a001798 g     F .text	00000124 xTaskIncrementTick
1a0001a8  w    F .text	00000002 DAC_IRQHandler
1a002dd8 g     F .text	00000024 Board_Debug_Init
10000000 g     O .data	00000001 LED
1a000c28 g     F .text	00000080 xQueueGenericReset
10000088 g       .data	00000000 _edata
1a002f00 g     F .text	00000020 Chip_I2C_EventHandler
1a0001a8  w    F .text	00000002 M0SUB_IRQHandler
1a000300 g     F .text	000000c4 taskPwmLed2
1a001664 g     F .text	00000066 xTaskCreate
1a0037b8 g     F .text	00000150 Chip_SetupCoreClock
1a0008a8 g     F .text	00000070 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a0039c0 g     F .text	00000084 ResetISR
1a0031dc g     F .text	00000014 SystemCoreClockUpdate
1a0001a8  w    F .text	00000002 DMA_IRQHandler
1a001a60 g     F .text	00000050 vTaskDelay
1a0001a8  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001d0c g     F .text	00000020 xTaskGetSchedulerState
1a003ad8  w    F .text	00000002 .hidden __aeabi_idiv0
1a000190  w    F .text	00000002 BusFault_Handler
1a0022fc g     F .text	0000002c pxPortInitialiseStack
1a0036dc g     F .text	00000034 Chip_Clock_Enable
1a002a68 g     F .text	0000000a UART3_IRQHandler
1a0001a8  w    F .text	00000002 MCPWM_IRQHandler
1a001f64 g     F .text	0000004e xTimerCreateStatic
1a003a78 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a0001a8  w    F .text	00000002 M0APP_IRQHandler
1a002ba0 g     F .text	000000f4 boardInit
1a002354 g     F .text	00000044 vPortEnterCritical
1a0001a8  w    F .text	00000002 GINT1_IRQHandler
1a0003c4 g     F .text	000000cc taskPwmLed1
1a00362c g     F .text	00000044 Chip_Clock_SetBaseClock
1a00261c g     F .text	0000001c cyclesCounterInit
1a0001a8  w    F .text	00000002 GPIO4_IRQHandler
1a002ef4 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 c1 39 00 1a 85 01 00 1a 89 01 00 1a     .....9..........
1a000010:	8d 01 00 1a 91 01 00 1a 95 01 00 1a 7e 3e ff 53     ............~>.S
	...
1a00002c:	31 23 00 1a 9d 01 00 1a 00 00 00 00 d1 23 00 1a     1#...........#..
1a00003c:	35 24 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     5$..............
1a00004c:	00 00 00 00 a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00005c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00006c:	a9 01 00 1a 7d 2a 00 1a b9 2a 00 1a f9 2a 00 1a     ....}*...*...*..
1a00007c:	39 2b 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     9+..............
1a00008c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00009c:	a9 01 00 1a 79 01 00 1a a9 01 00 1a 5d 2a 00 1a     ....y.......]*..
1a0000ac:	69 2a 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     i*..............
1a0000bc:	a9 01 00 1a a9 08 00 1a 19 09 00 1a 89 09 00 1a     ................
1a0000cc:	f9 09 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000dc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000ec:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a0000fc:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a00010c:	a9 01 00 1a a9 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a0043f8 	.word	0x1a0043f8
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000088 	.word	0x00000088
1a000120:	1a0043f8 	.word	0x1a0043f8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0043f8 	.word	0x1a0043f8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0043f8 	.word	0x1a0043f8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0043f8 	.word	0x1a0043f8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000088 	.word	0x10000088
1a000154:	00002b74 	.word	0x00002b74
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f002 fbaa 	bl	1a0028d4 <uartProcessIRQ>
1a000180:	bd08      	pop	{r3, pc}
1a000182:	bf00      	nop

1a000184 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <NMI_Handler>
1a000186:	bf00      	nop

1a000188 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <HardFault_Handler>
1a00018a:	bf00      	nop

1a00018c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <MemManage_Handler>
1a00018e:	bf00      	nop

1a000190 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <BusFault_Handler>
1a000192:	bf00      	nop

1a000194 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <UsageFault_Handler>
1a000196:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <UsageFault_Handler+0x4>
1a00019a:	bf00      	nop

1a00019c <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <DebugMon_Handler>
1a00019e:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a0001a0:	e7fe      	b.n	1a0001a0 <DebugMon_Handler+0x4>
1a0001a2:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a0001a4:	e7fe      	b.n	1a0001a4 <DebugMon_Handler+0x8>
1a0001a6:	bf00      	nop

1a0001a8 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001a8:	e7fe      	b.n	1a0001a8 <ADC0_IRQHandler>
1a0001aa:	bf00      	nop

1a0001ac <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001ac:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ae:	2300      	movs	r3, #0
1a0001b0:	e004      	b.n	1a0001bc <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001b2:	6804      	ldr	r4, [r0, #0]
1a0001b4:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001b8:	3004      	adds	r0, #4
1a0001ba:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	4293      	cmp	r3, r2
1a0001be:	d3f8      	bcc.n	1a0001b2 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001c4:	4770      	bx	lr
1a0001c6:	bf00      	nop

1a0001c8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	2300      	movs	r3, #0
1a0001ca:	e003      	b.n	1a0001d4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001cc:	2200      	movs	r2, #0
1a0001ce:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001d2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d4:	428b      	cmp	r3, r1
1a0001d6:	d3f9      	bcc.n	1a0001cc <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001d8:	4770      	bx	lr
1a0001da:	bf00      	nop
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <taskPwmLed2>:
/*==================[definiciones de funciones internas]=====================*/

/*==================[definiciones de funciones externas]=====================*/


void taskPwmLed2( void* taskParmPtr ){
1a000300:	b500      	push	{lr}
1a000302:	b083      	sub	sp, #12

	TickType_t tiempo_inicio_ciclo;
	static pwmManagement_t pwmManagementStructTemp;
	static uint8_t counter, ledState;

	gpioWrite(LED1,ON);
1a000304:	202b      	movs	r0, #43	; 0x2b
1a000306:	2101      	movs	r1, #1
1a000308:	f002 fa7a 	bl	1a002800 <gpioWrite>
	gpioWrite(LED2,ON);
1a00030c:	202c      	movs	r0, #44	; 0x2c
1a00030e:	2101      	movs	r1, #1
1a000310:	f002 fa76 	bl	1a002800 <gpioWrite>

	counter = 50;
1a000314:	2232      	movs	r2, #50	; 0x32
1a000316:	4b27      	ldr	r3, [pc, #156]	; (1a0003b4 <taskPwmLed2+0xb4>)
1a000318:	701a      	strb	r2, [r3, #0]

	ledState = LED1ON;
1a00031a:	2201      	movs	r2, #1
1a00031c:	4b26      	ldr	r3, [pc, #152]	; (1a0003b8 <taskPwmLed2+0xb8>)
1a00031e:	701a      	strb	r2, [r3, #0]

	while(TRUE){

		if(xQueueReceive( manejoDePWMLED2, &pwmManagementStructTemp, 0 ) == pdTRUE){
1a000320:	4b26      	ldr	r3, [pc, #152]	; (1a0003bc <taskPwmLed2+0xbc>)
1a000322:	6818      	ldr	r0, [r3, #0]
1a000324:	4926      	ldr	r1, [pc, #152]	; (1a0003c0 <taskPwmLed2+0xc0>)
1a000326:	2200      	movs	r2, #0
1a000328:	f000 fe88 	bl	1a00103c <xQueueReceive>
1a00032c:	2801      	cmp	r0, #1
1a00032e:	d128      	bne.n	1a000382 <taskPwmLed2+0x82>

			if(pwmManagementStructTemp.pwmDutyFlagSuma == TRUEs){
1a000330:	4b23      	ldr	r3, [pc, #140]	; (1a0003c0 <taskPwmLed2+0xc0>)
1a000332:	789b      	ldrb	r3, [r3, #2]
1a000334:	2b01      	cmp	r3, #1
1a000336:	d107      	bne.n	1a000348 <taskPwmLed2+0x48>
				// saturo el contador en 78 porque el led esta totalmente prendido
				if(counter<100){
1a000338:	4b1e      	ldr	r3, [pc, #120]	; (1a0003b4 <taskPwmLed2+0xb4>)
1a00033a:	781b      	ldrb	r3, [r3, #0]
1a00033c:	2b63      	cmp	r3, #99	; 0x63
1a00033e:	d80d      	bhi.n	1a00035c <taskPwmLed2+0x5c>
					counter++;
1a000340:	3301      	adds	r3, #1
1a000342:	4a1c      	ldr	r2, [pc, #112]	; (1a0003b4 <taskPwmLed2+0xb4>)
1a000344:	7013      	strb	r3, [r2, #0]
1a000346:	e009      	b.n	1a00035c <taskPwmLed2+0x5c>
				}
			}
			else if(pwmManagementStructTemp.pwmDutyFlagResta == TRUEs){
1a000348:	4b1d      	ldr	r3, [pc, #116]	; (1a0003c0 <taskPwmLed2+0xc0>)
1a00034a:	78db      	ldrb	r3, [r3, #3]
1a00034c:	2b01      	cmp	r3, #1
1a00034e:	d105      	bne.n	1a00035c <taskPwmLed2+0x5c>
				if(counter!=0){
1a000350:	4b18      	ldr	r3, [pc, #96]	; (1a0003b4 <taskPwmLed2+0xb4>)
1a000352:	781b      	ldrb	r3, [r3, #0]
1a000354:	b113      	cbz	r3, 1a00035c <taskPwmLed2+0x5c>
				// si es cero dejo de restar para que no se desborde
					counter--;
1a000356:	3b01      	subs	r3, #1
1a000358:	4a16      	ldr	r2, [pc, #88]	; (1a0003b4 <taskPwmLed2+0xb4>)
1a00035a:	7013      	strb	r3, [r2, #0]
				}
			}

			if(pwmManagementStructTemp.led1Toggle == TRUEs){
1a00035c:	4b18      	ldr	r3, [pc, #96]	; (1a0003c0 <taskPwmLed2+0xc0>)
1a00035e:	791b      	ldrb	r3, [r3, #4]
1a000360:	2b01      	cmp	r3, #1
1a000362:	d10e      	bne.n	1a000382 <taskPwmLed2+0x82>
				if (ledState == LED1ON){
1a000364:	4b14      	ldr	r3, [pc, #80]	; (1a0003b8 <taskPwmLed2+0xb8>)
1a000366:	781b      	ldrb	r3, [r3, #0]
1a000368:	2b01      	cmp	r3, #1
1a00036a:	d107      	bne.n	1a00037c <taskPwmLed2+0x7c>
					ledState = LED1OFF;
1a00036c:	2202      	movs	r2, #2
1a00036e:	4b12      	ldr	r3, [pc, #72]	; (1a0003b8 <taskPwmLed2+0xb8>)
1a000370:	701a      	strb	r2, [r3, #0]
					gpioWrite(LED2,OFF);
1a000372:	202c      	movs	r0, #44	; 0x2c
1a000374:	2100      	movs	r1, #0
1a000376:	f002 fa43 	bl	1a002800 <gpioWrite>
1a00037a:	e002      	b.n	1a000382 <taskPwmLed2+0x82>
				}
				else{
					ledState = LED1ON;
1a00037c:	2201      	movs	r2, #1
1a00037e:	4b0e      	ldr	r3, [pc, #56]	; (1a0003b8 <taskPwmLed2+0xb8>)
1a000380:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		tiempo_inicio_ciclo = xTaskGetTickCount();
1a000382:	f001 f9fb 	bl	1a00177c <xTaskGetTickCount>
1a000386:	9001      	str	r0, [sp, #4]
		if (ledState == LED1ON){
1a000388:	4b0b      	ldr	r3, [pc, #44]	; (1a0003b8 <taskPwmLed2+0xb8>)
1a00038a:	781b      	ldrb	r3, [r3, #0]
1a00038c:	2b01      	cmp	r3, #1
1a00038e:	d103      	bne.n	1a000398 <taskPwmLed2+0x98>
			gpioWrite(LED2,ON);
1a000390:	202c      	movs	r0, #44	; 0x2c
1a000392:	2101      	movs	r1, #1
1a000394:	f002 fa34 	bl	1a002800 <gpioWrite>
		}
		vTaskDelay( counter );
1a000398:	4b06      	ldr	r3, [pc, #24]	; (1a0003b4 <taskPwmLed2+0xb4>)
1a00039a:	7818      	ldrb	r0, [r3, #0]
1a00039c:	f001 fb60 	bl	1a001a60 <vTaskDelay>
		gpioWrite(LED2,OFF);
1a0003a0:	202c      	movs	r0, #44	; 0x2c
1a0003a2:	2100      	movs	r1, #0
1a0003a4:	f002 fa2c 	bl	1a002800 <gpioWrite>
		vTaskDelayUntil( &tiempo_inicio_ciclo, 100 );
1a0003a8:	a801      	add	r0, sp, #4
1a0003aa:	2164      	movs	r1, #100	; 0x64
1a0003ac:	f001 fb02 	bl	1a0019b4 <vTaskDelayUntil>
	}
1a0003b0:	e7b6      	b.n	1a000320 <taskPwmLed2+0x20>
1a0003b2:	bf00      	nop
1a0003b4:	10000093 	.word	0x10000093
1a0003b8:	10000109 	.word	0x10000109
1a0003bc:	10002ba0 	.word	0x10002ba0
1a0003c0:	100000fc 	.word	0x100000fc

1a0003c4 <taskPwmLed1>:
}

void taskPwmLed1( void* taskParmPtr ){
1a0003c4:	b500      	push	{lr}
1a0003c6:	b083      	sub	sp, #12

	TickType_t tiempo_inicio_ciclo;
	static pwmManagement_t pwmManagementStructTemp;
	static uint8_t  counter, ledState;

	gpioWrite(LED1,ON);
1a0003c8:	202b      	movs	r0, #43	; 0x2b
1a0003ca:	2101      	movs	r1, #1
1a0003cc:	f002 fa18 	bl	1a002800 <gpioWrite>
	gpioWrite(LED2,ON);
1a0003d0:	202c      	movs	r0, #44	; 0x2c
1a0003d2:	2101      	movs	r1, #1
1a0003d4:	f002 fa14 	bl	1a002800 <gpioWrite>

	counter = 50;
1a0003d8:	2232      	movs	r2, #50	; 0x32
1a0003da:	4b28      	ldr	r3, [pc, #160]	; (1a00047c <taskPwmLed1+0xb8>)
1a0003dc:	701a      	strb	r2, [r3, #0]
	LED = LED1;
1a0003de:	222b      	movs	r2, #43	; 0x2b
1a0003e0:	4b27      	ldr	r3, [pc, #156]	; (1a000480 <taskPwmLed1+0xbc>)
1a0003e2:	701a      	strb	r2, [r3, #0]
	ledState = LED1ON;
1a0003e4:	2201      	movs	r2, #1
1a0003e6:	4b27      	ldr	r3, [pc, #156]	; (1a000484 <taskPwmLed1+0xc0>)
1a0003e8:	701a      	strb	r2, [r3, #0]

	while(TRUE){

		if(xQueueReceive( manejoDePWMLED1, &pwmManagementStructTemp, 0 ) == pdTRUE){
1a0003ea:	4b27      	ldr	r3, [pc, #156]	; (1a000488 <taskPwmLed1+0xc4>)
1a0003ec:	6818      	ldr	r0, [r3, #0]
1a0003ee:	4927      	ldr	r1, [pc, #156]	; (1a00048c <taskPwmLed1+0xc8>)
1a0003f0:	2200      	movs	r2, #0
1a0003f2:	f000 fe23 	bl	1a00103c <xQueueReceive>
1a0003f6:	2801      	cmp	r0, #1
1a0003f8:	d128      	bne.n	1a00044c <taskPwmLed1+0x88>

			if(pwmManagementStructTemp.pwmDutyFlagSuma == TRUEs){
1a0003fa:	4b24      	ldr	r3, [pc, #144]	; (1a00048c <taskPwmLed1+0xc8>)
1a0003fc:	789b      	ldrb	r3, [r3, #2]
1a0003fe:	2b01      	cmp	r3, #1
1a000400:	d107      	bne.n	1a000412 <taskPwmLed1+0x4e>
				// saturo el contador en 100 porque el led esta totalmente prendido
				if(counter<100){
1a000402:	4b1e      	ldr	r3, [pc, #120]	; (1a00047c <taskPwmLed1+0xb8>)
1a000404:	781b      	ldrb	r3, [r3, #0]
1a000406:	2b63      	cmp	r3, #99	; 0x63
1a000408:	d80d      	bhi.n	1a000426 <taskPwmLed1+0x62>
					counter++;
1a00040a:	3301      	adds	r3, #1
1a00040c:	4a1b      	ldr	r2, [pc, #108]	; (1a00047c <taskPwmLed1+0xb8>)
1a00040e:	7013      	strb	r3, [r2, #0]
1a000410:	e009      	b.n	1a000426 <taskPwmLed1+0x62>
				}
			}
			else if(pwmManagementStructTemp.pwmDutyFlagResta == TRUEs){
1a000412:	4b1e      	ldr	r3, [pc, #120]	; (1a00048c <taskPwmLed1+0xc8>)
1a000414:	78db      	ldrb	r3, [r3, #3]
1a000416:	2b01      	cmp	r3, #1
1a000418:	d105      	bne.n	1a000426 <taskPwmLed1+0x62>
				// si es cero dejo de restar para que no se desborde
				if(counter!=0){
1a00041a:	4b18      	ldr	r3, [pc, #96]	; (1a00047c <taskPwmLed1+0xb8>)
1a00041c:	781b      	ldrb	r3, [r3, #0]
1a00041e:	b113      	cbz	r3, 1a000426 <taskPwmLed1+0x62>
					counter--;
1a000420:	3b01      	subs	r3, #1
1a000422:	4a16      	ldr	r2, [pc, #88]	; (1a00047c <taskPwmLed1+0xb8>)
1a000424:	7013      	strb	r3, [r2, #0]
				}
			}

			if(pwmManagementStructTemp.led1Toggle == TRUEs){
1a000426:	4b19      	ldr	r3, [pc, #100]	; (1a00048c <taskPwmLed1+0xc8>)
1a000428:	791b      	ldrb	r3, [r3, #4]
1a00042a:	2b01      	cmp	r3, #1
1a00042c:	d10e      	bne.n	1a00044c <taskPwmLed1+0x88>
				if (ledState == LED1ON){
1a00042e:	4b15      	ldr	r3, [pc, #84]	; (1a000484 <taskPwmLed1+0xc0>)
1a000430:	781b      	ldrb	r3, [r3, #0]
1a000432:	2b01      	cmp	r3, #1
1a000434:	d107      	bne.n	1a000446 <taskPwmLed1+0x82>
					ledState = LED1OFF;
1a000436:	2202      	movs	r2, #2
1a000438:	4b12      	ldr	r3, [pc, #72]	; (1a000484 <taskPwmLed1+0xc0>)
1a00043a:	701a      	strb	r2, [r3, #0]
					gpioWrite(LED1,OFF);
1a00043c:	202b      	movs	r0, #43	; 0x2b
1a00043e:	2100      	movs	r1, #0
1a000440:	f002 f9de 	bl	1a002800 <gpioWrite>
1a000444:	e002      	b.n	1a00044c <taskPwmLed1+0x88>
				}
				else{
					ledState = LED1ON;
1a000446:	2201      	movs	r2, #1
1a000448:	4b0e      	ldr	r3, [pc, #56]	; (1a000484 <taskPwmLed1+0xc0>)
1a00044a:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		tiempo_inicio_ciclo = xTaskGetTickCount();
1a00044c:	f001 f996 	bl	1a00177c <xTaskGetTickCount>
1a000450:	9001      	str	r0, [sp, #4]
		if (ledState == LED1ON){
1a000452:	4b0c      	ldr	r3, [pc, #48]	; (1a000484 <taskPwmLed1+0xc0>)
1a000454:	781b      	ldrb	r3, [r3, #0]
1a000456:	2b01      	cmp	r3, #1
1a000458:	d103      	bne.n	1a000462 <taskPwmLed1+0x9e>
			gpioWrite(LED1,ON);
1a00045a:	202b      	movs	r0, #43	; 0x2b
1a00045c:	2101      	movs	r1, #1
1a00045e:	f002 f9cf 	bl	1a002800 <gpioWrite>
		}
		vTaskDelay( counter );
1a000462:	4b06      	ldr	r3, [pc, #24]	; (1a00047c <taskPwmLed1+0xb8>)
1a000464:	7818      	ldrb	r0, [r3, #0]
1a000466:	f001 fafb 	bl	1a001a60 <vTaskDelay>
		gpioWrite(LED1,OFF);
1a00046a:	202b      	movs	r0, #43	; 0x2b
1a00046c:	2100      	movs	r1, #0
1a00046e:	f002 f9c7 	bl	1a002800 <gpioWrite>
		vTaskDelayUntil( &tiempo_inicio_ciclo, 100 );
1a000472:	a801      	add	r0, sp, #4
1a000474:	2164      	movs	r1, #100	; 0x64
1a000476:	f001 fa9d 	bl	1a0019b4 <vTaskDelayUntil>

	}
1a00047a:	e7b6      	b.n	1a0003ea <taskPwmLed1+0x26>
1a00047c:	10000101 	.word	0x10000101
1a000480:	10000000 	.word	0x10000000
1a000484:	10000091 	.word	0x10000091
1a000488:	10002b98 	.word	0x10002b98
1a00048c:	10000104 	.word	0x10000104

1a000490 <timeMeasure>:
}

void timeMeasure( void* taskParmPtr ){
1a000490:	b570      	push	{r4, r5, r6, lr}
1a000492:	b086      	sub	sp, #24
	TickType_t tiempoMedicionInicial;
	TickType_t tiempoMedicionFinal;
	TickType_t tiempoEntreEventos;

	//pwmManagementStruct.pwmDutyCounter = EMPTYs;
	pwmManagementStruct.pwmDutyFlagSuma = EMPTYs;
1a000494:	4b4e      	ldr	r3, [pc, #312]	; (1a0005d0 <timeMeasure+0x140>)
1a000496:	2400      	movs	r4, #0
1a000498:	709c      	strb	r4, [r3, #2]
	pwmManagementStruct.pwmDutyFlagResta = EMPTYs;
1a00049a:	70dc      	strb	r4, [r3, #3]
	pwmManagementStruct.ledSelect = LED1A;
1a00049c:	2201      	movs	r2, #1
1a00049e:	701a      	strb	r2, [r3, #0]
	pwmManagementStruct.led1Toggle = LED1ON;
1a0004a0:	711a      	strb	r2, [r3, #4]

	 gpioWrite( LED3, OFF );
1a0004a2:	202d      	movs	r0, #45	; 0x2d
1a0004a4:	4621      	mov	r1, r4
1a0004a6:	f002 f9ab 	bl	1a002800 <gpioWrite>
	buttonData_t buttonDataTemp;

	static pwmManagement_t pwmManagementStruct;

	uint8_t dutyCycleCounter = 50;
	uint8_t ledAnt = LED2;
1a0004aa:	252c      	movs	r5, #44	; 0x2c
1a0004ac:	e008      	b.n	1a0004c0 <timeMeasure+0x30>
					}
			buttonDataTemp.buttonIndex = _NONE;
		}
		// Si se presiono alguna tecla envio datos a las tareas de pwm
		if(ocurrioEvento == 1){
			ocurrioEvento = 0;
1a0004ae:	2400      	movs	r4, #0
			// switcheo de tarea a la que se envia el contador
			if((pwmManagementStruct.ledSelect == TRUEs)){
				if (ledAnt == LED2){
					//xQueueSend(manejoDePWMLED1, &pwmManagementStruct, portMAX_DELAY);
					ledAnt = LED1;
1a0004b0:	252b      	movs	r5, #43	; 0x2b
1a0004b2:	e005      	b.n	1a0004c0 <timeMeasure+0x30>
					}
			buttonDataTemp.buttonIndex = _NONE;
		}
		// Si se presiono alguna tecla envio datos a las tareas de pwm
		if(ocurrioEvento == 1){
			ocurrioEvento = 0;
1a0004b4:	2400      	movs	r4, #0
					//xQueueSend(manejoDePWMLED1, &pwmManagementStruct, portMAX_DELAY);
					ledAnt = LED1;
				}
				else if(ledAnt == LED1){
					//xQueueSend(manejoDePWMLED2, &pwmManagementStruct, portMAX_DELAY);
					ledAnt = LED2;
1a0004b6:	252c      	movs	r5, #44	; 0x2c
1a0004b8:	e002      	b.n	1a0004c0 <timeMeasure+0x30>
					}
			buttonDataTemp.buttonIndex = _NONE;
		}
		// Si se presiono alguna tecla envio datos a las tareas de pwm
		if(ocurrioEvento == 1){
			ocurrioEvento = 0;
1a0004ba:	2400      	movs	r4, #0
1a0004bc:	e000      	b.n	1a0004c0 <timeMeasure+0x30>
1a0004be:	2400      	movs	r4, #0

	 gpioWrite( LED3, OFF );

	while(TRUE){
		// Recibo datos por la cola de medicion de tiempo
		xQueueReceive( queueMedicionTiempo, &buttonDataTemp, portMAX_DELAY );
1a0004c0:	4b44      	ldr	r3, [pc, #272]	; (1a0005d4 <timeMeasure+0x144>)
1a0004c2:	6818      	ldr	r0, [r3, #0]
1a0004c4:	a901      	add	r1, sp, #4
1a0004c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0004ca:	f000 fdb7 	bl	1a00103c <xQueueReceive>

			if((buttonDataTemp.buttonIndex == TECLA1)&&(buttonDataTemp.buttonLastState == FALLING)){
1a0004ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a0004d2:	b963      	cbnz	r3, 1a0004ee <timeMeasure+0x5e>
1a0004d4:	f89d 2014 	ldrb.w	r2, [sp, #20]
1a0004d8:	2a01      	cmp	r2, #1
1a0004da:	d108      	bne.n	1a0004ee <timeMeasure+0x5e>

				pwmManagementStruct.pwmDutyFlagSuma = TRUEs;
1a0004dc:	4b3c      	ldr	r3, [pc, #240]	; (1a0005d0 <timeMeasure+0x140>)
1a0004de:	2401      	movs	r4, #1
1a0004e0:	709c      	strb	r4, [r3, #2]
				pwmManagementStruct.pwmDutyFlagResta = FALSEs;
1a0004e2:	2202      	movs	r2, #2
1a0004e4:	70da      	strb	r2, [r3, #3]
				pwmManagementStruct.ledSelect = EMPTYs;
1a0004e6:	2200      	movs	r2, #0
1a0004e8:	701a      	strb	r2, [r3, #0]
				pwmManagementStruct.led1Toggle = EMPTYs;
1a0004ea:	711a      	strb	r2, [r3, #4]
				ocurrioEvento = 1;
1a0004ec:	e036      	b.n	1a00055c <timeMeasure+0xcc>

			}
			else if((buttonDataTemp.buttonIndex == TECLA2)&&(buttonDataTemp.buttonLastState == FALLING)){
1a0004ee:	2b01      	cmp	r3, #1
1a0004f0:	d10c      	bne.n	1a00050c <timeMeasure+0x7c>
1a0004f2:	f89d 2014 	ldrb.w	r2, [sp, #20]
1a0004f6:	2a01      	cmp	r2, #1
1a0004f8:	d108      	bne.n	1a00050c <timeMeasure+0x7c>

				pwmManagementStruct.pwmDutyFlagSuma = FALSEs;
1a0004fa:	4b35      	ldr	r3, [pc, #212]	; (1a0005d0 <timeMeasure+0x140>)
1a0004fc:	2202      	movs	r2, #2
1a0004fe:	709a      	strb	r2, [r3, #2]
				pwmManagementStruct.pwmDutyFlagResta = TRUEs;
1a000500:	2401      	movs	r4, #1
1a000502:	70dc      	strb	r4, [r3, #3]
				pwmManagementStruct.ledSelect = EMPTYs;
1a000504:	2200      	movs	r2, #0
1a000506:	701a      	strb	r2, [r3, #0]
				pwmManagementStruct.led1Toggle = EMPTYs;
1a000508:	711a      	strb	r2, [r3, #4]
				ocurrioEvento = 1;
1a00050a:	e027      	b.n	1a00055c <timeMeasure+0xcc>

			}else if(buttonDataTemp.buttonIndex == TECLA3){
1a00050c:	2b02      	cmp	r3, #2
1a00050e:	d125      	bne.n	1a00055c <timeMeasure+0xcc>

					if(buttonDataTemp.buttonState == FALLING){
1a000510:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000514:	2b01      	cmp	r3, #1
1a000516:	d101      	bne.n	1a00051c <timeMeasure+0x8c>
						tiempoMedicionInicial = buttonDataTemp.buttonTime;
1a000518:	9e02      	ldr	r6, [sp, #8]
1a00051a:	e01c      	b.n	1a000556 <timeMeasure+0xc6>
					}else if(buttonDataTemp.buttonState == RAISING){
1a00051c:	2b02      	cmp	r3, #2
1a00051e:	d11a      	bne.n	1a000556 <timeMeasure+0xc6>

						tiempoMedicionFinal = buttonDataTemp.buttonTime;
1a000520:	9b02      	ldr	r3, [sp, #8]
						tiempoEntreEventos = tiempoMedicionFinal - tiempoMedicionInicial;
1a000522:	1b9b      	subs	r3, r3, r6

						if(tiempoEntreEventos < 500*portTICK_RATE_MS){
1a000524:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
1a000528:	d208      	bcs.n	1a00053c <timeMeasure+0xac>

							pwmManagementStruct.ledSelect = TRUEs;
1a00052a:	4b29      	ldr	r3, [pc, #164]	; (1a0005d0 <timeMeasure+0x140>)
1a00052c:	2401      	movs	r4, #1
1a00052e:	701c      	strb	r4, [r3, #0]
							pwmManagementStruct.led1Toggle = FALSEs;
1a000530:	2202      	movs	r2, #2
1a000532:	711a      	strb	r2, [r3, #4]
							pwmManagementStruct.pwmDutyFlagSuma = EMPTYs;
1a000534:	2200      	movs	r2, #0
1a000536:	709a      	strb	r2, [r3, #2]
							pwmManagementStruct.pwmDutyFlagResta = EMPTYs;
1a000538:	70da      	strb	r2, [r3, #3]
1a00053a:	e00c      	b.n	1a000556 <timeMeasure+0xc6>

						}else if(tiempoEntreEventos > 500*portTICK_RATE_MS){
1a00053c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
1a000540:	d908      	bls.n	1a000554 <timeMeasure+0xc4>
							pwmManagementStruct.ledSelect = FALSEs;
1a000542:	4b23      	ldr	r3, [pc, #140]	; (1a0005d0 <timeMeasure+0x140>)
1a000544:	2202      	movs	r2, #2
1a000546:	701a      	strb	r2, [r3, #0]
							pwmManagementStruct.led1Toggle = TRUEs;
1a000548:	2401      	movs	r4, #1
1a00054a:	711c      	strb	r4, [r3, #4]
							pwmManagementStruct.pwmDutyFlagSuma = EMPTYs;
1a00054c:	2200      	movs	r2, #0
1a00054e:	709a      	strb	r2, [r3, #2]
							pwmManagementStruct.pwmDutyFlagResta = EMPTYs;
1a000550:	70da      	strb	r2, [r3, #3]
1a000552:	e000      	b.n	1a000556 <timeMeasure+0xc6>

						}
						ocurrioEvento = 1;
1a000554:	2401      	movs	r4, #1
					}
			buttonDataTemp.buttonIndex = _NONE;
1a000556:	2304      	movs	r3, #4
1a000558:	f88d 3004 	strb.w	r3, [sp, #4]
		}
		// Si se presiono alguna tecla envio datos a las tareas de pwm
		if(ocurrioEvento == 1){
1a00055c:	2c00      	cmp	r4, #0
1a00055e:	d0af      	beq.n	1a0004c0 <timeMeasure+0x30>
			ocurrioEvento = 0;
			// switcheo de tarea a la que se envia el contador
			if((pwmManagementStruct.ledSelect == TRUEs)){
1a000560:	4b1b      	ldr	r3, [pc, #108]	; (1a0005d0 <timeMeasure+0x140>)
1a000562:	781b      	ldrb	r3, [r3, #0]
1a000564:	2b01      	cmp	r3, #1
1a000566:	d105      	bne.n	1a000574 <timeMeasure+0xe4>
				if (ledAnt == LED2){
1a000568:	2d2c      	cmp	r5, #44	; 0x2c
1a00056a:	d0a0      	beq.n	1a0004ae <timeMeasure+0x1e>
					//xQueueSend(manejoDePWMLED1, &pwmManagementStruct, portMAX_DELAY);
					ledAnt = LED1;
				}
				else if(ledAnt == LED1){
1a00056c:	2d2b      	cmp	r5, #43	; 0x2b
1a00056e:	d0a1      	beq.n	1a0004b4 <timeMeasure+0x24>
					}
			buttonDataTemp.buttonIndex = _NONE;
		}
		// Si se presiono alguna tecla envio datos a las tareas de pwm
		if(ocurrioEvento == 1){
			ocurrioEvento = 0;
1a000570:	2400      	movs	r4, #0
1a000572:	e7a5      	b.n	1a0004c0 <timeMeasure+0x30>
					//xQueueSend(manejoDePWMLED2, &pwmManagementStruct, portMAX_DELAY);
					ledAnt = LED2;
				}
			}
			// sino ocurrio un evento de switcheo envio a la que estaba y no modifico la tarea a la que se envia
			else if((pwmManagementStruct.ledSelect == EMPTYs)){
1a000574:	b9bb      	cbnz	r3, 1a0005a6 <timeMeasure+0x116>
				// Se envia si hay que sumar o restar 1 al ciclo de trabajo del pwm
				if (ledAnt == LED2){
1a000576:	2d2c      	cmp	r5, #44	; 0x2c
1a000578:	d109      	bne.n	1a00058e <timeMeasure+0xfe>
					xQueueSend(manejoDePWMLED1, &pwmManagementStruct, portMAX_DELAY);
1a00057a:	4b17      	ldr	r3, [pc, #92]	; (1a0005d8 <timeMeasure+0x148>)
1a00057c:	6818      	ldr	r0, [r3, #0]
1a00057e:	4914      	ldr	r1, [pc, #80]	; (1a0005d0 <timeMeasure+0x140>)
1a000580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000584:	2300      	movs	r3, #0
1a000586:	f000 fc1f 	bl	1a000dc8 <xQueueGenericSend>
					}
			buttonDataTemp.buttonIndex = _NONE;
		}
		// Si se presiono alguna tecla envio datos a las tareas de pwm
		if(ocurrioEvento == 1){
			ocurrioEvento = 0;
1a00058a:	2400      	movs	r4, #0
1a00058c:	e798      	b.n	1a0004c0 <timeMeasure+0x30>
			else if((pwmManagementStruct.ledSelect == EMPTYs)){
				// Se envia si hay que sumar o restar 1 al ciclo de trabajo del pwm
				if (ledAnt == LED2){
					xQueueSend(manejoDePWMLED1, &pwmManagementStruct, portMAX_DELAY);
				}
				else if(ledAnt == LED1){
1a00058e:	2d2b      	cmp	r5, #43	; 0x2b
1a000590:	d193      	bne.n	1a0004ba <timeMeasure+0x2a>
					xQueueSend(manejoDePWMLED2, &pwmManagementStruct, portMAX_DELAY);
1a000592:	4b12      	ldr	r3, [pc, #72]	; (1a0005dc <timeMeasure+0x14c>)
1a000594:	6818      	ldr	r0, [r3, #0]
1a000596:	490e      	ldr	r1, [pc, #56]	; (1a0005d0 <timeMeasure+0x140>)
1a000598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00059c:	2300      	movs	r3, #0
1a00059e:	f000 fc13 	bl	1a000dc8 <xQueueGenericSend>
					}
			buttonDataTemp.buttonIndex = _NONE;
		}
		// Si se presiono alguna tecla envio datos a las tareas de pwm
		if(ocurrioEvento == 1){
			ocurrioEvento = 0;
1a0005a2:	2400      	movs	r4, #0
1a0005a4:	e78c      	b.n	1a0004c0 <timeMeasure+0x30>
				}
				else if(ledAnt == LED1){
					xQueueSend(manejoDePWMLED2, &pwmManagementStruct, portMAX_DELAY);
				}
			}
			else if((pwmManagementStruct.ledSelect == FALSEs)){
1a0005a6:	2b02      	cmp	r3, #2
1a0005a8:	d189      	bne.n	1a0004be <timeMeasure+0x2e>
				//como se deben apagar o prender ambos led se envia a las dos tareas de manejo de pwm
				xQueueSend(manejoDePWMLED1, &pwmManagementStruct, portMAX_DELAY);
1a0005aa:	4c09      	ldr	r4, [pc, #36]	; (1a0005d0 <timeMeasure+0x140>)
1a0005ac:	4b0a      	ldr	r3, [pc, #40]	; (1a0005d8 <timeMeasure+0x148>)
1a0005ae:	6818      	ldr	r0, [r3, #0]
1a0005b0:	4621      	mov	r1, r4
1a0005b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0005b6:	2300      	movs	r3, #0
1a0005b8:	f000 fc06 	bl	1a000dc8 <xQueueGenericSend>
				xQueueSend(manejoDePWMLED2, &pwmManagementStruct, portMAX_DELAY);
1a0005bc:	4b07      	ldr	r3, [pc, #28]	; (1a0005dc <timeMeasure+0x14c>)
1a0005be:	6818      	ldr	r0, [r3, #0]
1a0005c0:	4621      	mov	r1, r4
1a0005c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0005c6:	2300      	movs	r3, #0
1a0005c8:	f000 fbfe 	bl	1a000dc8 <xQueueGenericSend>
					}
			buttonDataTemp.buttonIndex = _NONE;
		}
		// Si se presiono alguna tecla envio datos a las tareas de pwm
		if(ocurrioEvento == 1){
			ocurrioEvento = 0;
1a0005cc:	2400      	movs	r4, #0
1a0005ce:	e777      	b.n	1a0004c0 <timeMeasure+0x30>
1a0005d0:	1000008c 	.word	0x1000008c
1a0005d4:	10002b94 	.word	0x10002b94
1a0005d8:	10002b98 	.word	0x10002b98
1a0005dc:	10002ba0 	.word	0x10002ba0

1a0005e0 <checkButtonsDebounce>:
	   // Chequeo el rebote con el antirrebote, si no hay rebote envio los datos por la cola
	   checkButtonsDebounce(&buttonsData[lastButtonInt]);
   }
}

static void checkButtonsDebounce(buttonData_t * buttonData) {
1a0005e0:	b570      	push	{r4, r5, r6, lr}
1a0005e2:	b086      	sub	sp, #24
1a0005e4:	4606      	mov	r6, r0
	 * falso contacto, y por l otanto es considerado un rebote.
	 * El razonamiento analogo es para el caso de liberarse la tecla, siendo el
	 * 1er evento de RAISING... el ultimo evento dentro de la ventana de 20ms
	 * tambien debe ser de RAISING, sino existio un rebote.
	 */
	buttonData_t buttonDataTemp = buttonData[0];
1a0005e6:	ac01      	add	r4, sp, #4
1a0005e8:	4605      	mov	r5, r0
1a0005ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0005ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0005ee:	682b      	ldr	r3, [r5, #0]
1a0005f0:	6023      	str	r3, [r4, #0]

	switch(buttonData->buttonState) {
1a0005f2:	7a33      	ldrb	r3, [r6, #8]
1a0005f4:	2b01      	cmp	r3, #1
1a0005f6:	d002      	beq.n	1a0005fe <checkButtonsDebounce+0x1e>
1a0005f8:	2b02      	cmp	r3, #2
1a0005fa:	d021      	beq.n	1a000640 <checkButtonsDebounce+0x60>
1a0005fc:	e040      	b.n	1a000680 <checkButtonsDebounce+0xa0>

	case FALLING:
		// Verifico si es el primer evento de falling de la secuencia antirrebote
		if(buttonData->buttonFirstEvent == IDLE) {
1a0005fe:	7a73      	ldrb	r3, [r6, #9]
1a000600:	b91b      	cbnz	r3, 1a00060a <checkButtonsDebounce+0x2a>
			// Actualizo el Flag FirstEvent.
			buttonData->buttonFirstEvent = FIRST_FALLING;
1a000602:	2301      	movs	r3, #1
1a000604:	7273      	strb	r3, [r6, #9]
			// Guardo valor de cuenta actual. Este valor es actualizado en la interrupcion del flanco
			buttonData->buttonTimeFirstEvent = buttonData->buttonTime;
1a000606:	6873      	ldr	r3, [r6, #4]
1a000608:	60f3      	str	r3, [r6, #12]
		}

		// Si hubo un evento de FIRST_FALLING me fijo si se mantiene presionado
		if(buttonData->buttonFirstEvent == FIRST_FALLING) {
1a00060a:	7a73      	ldrb	r3, [r6, #9]
1a00060c:	2b01      	cmp	r3, #1
1a00060e:	d137      	bne.n	1a000680 <checkButtonsDebounce+0xa0>
			// Me fijo si el tiempo entre eventos de FALLING es menor a 20ms
			if((xTaskGetTickCount() - buttonData->buttonTimeFirstEvent) < (DEBOUNCE_TIME * portTICK_RATE_MS)) {
1a000610:	f001 f8b4 	bl	1a00177c <xTaskGetTickCount>
1a000614:	68f3      	ldr	r3, [r6, #12]
1a000616:	1ac0      	subs	r0, r0, r3
1a000618:	2813      	cmp	r0, #19
1a00061a:	d802      	bhi.n	1a000622 <checkButtonsDebounce+0x42>
				// Guardo ultimo estado de tecla
				buttonData->buttonLastState = buttonData->buttonState;
1a00061c:	7a33      	ldrb	r3, [r6, #8]
1a00061e:	7433      	strb	r3, [r6, #16]
1a000620:	e02e      	b.n	1a000680 <checkButtonsDebounce+0xa0>

			} else {
				// Si no lo es entonces es mayor a 20 ms
				if(buttonData->buttonLastState == FALLING) {
1a000622:	7c33      	ldrb	r3, [r6, #16]
1a000624:	2b01      	cmp	r3, #1
1a000626:	d107      	bne.n	1a000638 <checkButtonsDebounce+0x58>
					// Si el ultimo estado habia sido de falling entonces la tecla fue presionada y fue detectado un rebote
					// Envio data por cola
					xQueueSend(queueMedicionTiempo, &buttonDataTemp, portMAX_DELAY); // se envia el tiempo medido al presionar
1a000628:	4b16      	ldr	r3, [pc, #88]	; (1a000684 <checkButtonsDebounce+0xa4>)
1a00062a:	6818      	ldr	r0, [r3, #0]
1a00062c:	a901      	add	r1, sp, #4
1a00062e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000632:	2300      	movs	r3, #0
1a000634:	f000 fbc8 	bl	1a000dc8 <xQueueGenericSend>
//					xQueueSend(queueLaunchLeds, &buttonDataTemp, portMAX_DELAY);	// envio la cola a la tarea que maneja el encendido de leds
				} else {
					// si el estado anterior era de RAISING entonces fue detectado un rebote
				}
				// limpio los flags de estado
				buttonData->buttonState = NONE;
1a000638:	2300      	movs	r3, #0
1a00063a:	7233      	strb	r3, [r6, #8]
				buttonData->buttonFirstEvent = IDLE;
1a00063c:	7273      	strb	r3, [r6, #9]
1a00063e:	e01f      	b.n	1a000680 <checkButtonsDebounce+0xa0>
		}
		break;

	case RAISING:
		// Verifico si es el primer evento de raising de la secuencia antirrebote
		if(buttonData->buttonFirstEvent == IDLE) {
1a000640:	7a73      	ldrb	r3, [r6, #9]
1a000642:	b91b      	cbnz	r3, 1a00064c <checkButtonsDebounce+0x6c>
			// Actualizo el Flag FirstEvent.
			buttonData->buttonFirstEvent = FIRST_RAISING;
1a000644:	2302      	movs	r3, #2
1a000646:	7273      	strb	r3, [r6, #9]
			// Guardo valor de cuenta actual. Este valor es actualizado en la interrupcion del flanco
			buttonData->buttonTimeFirstEvent = buttonData->buttonTime;
1a000648:	6873      	ldr	r3, [r6, #4]
1a00064a:	60f3      	str	r3, [r6, #12]
		}

		// Si hubo un evento de FIRST_RAISING me fijo si se mantiene presionado
		if(buttonData->buttonFirstEvent == FIRST_RAISING) {
1a00064c:	7a73      	ldrb	r3, [r6, #9]
1a00064e:	2b02      	cmp	r3, #2
1a000650:	d116      	bne.n	1a000680 <checkButtonsDebounce+0xa0>
			// Me fijo si el tiempo entre eventos de RAISING es menor a 20ms
			if((xTaskGetTickCount() - buttonData->buttonTimeFirstEvent) < (DEBOUNCE_TIME * portTICK_RATE_MS)) {
1a000652:	f001 f893 	bl	1a00177c <xTaskGetTickCount>
1a000656:	68f3      	ldr	r3, [r6, #12]
1a000658:	1ac0      	subs	r0, r0, r3
1a00065a:	2813      	cmp	r0, #19
1a00065c:	d802      	bhi.n	1a000664 <checkButtonsDebounce+0x84>
				// Guardo ultimo estado de tecla
				buttonData->buttonLastState = buttonData->buttonState;
1a00065e:	7a33      	ldrb	r3, [r6, #8]
1a000660:	7433      	strb	r3, [r6, #16]
1a000662:	e00d      	b.n	1a000680 <checkButtonsDebounce+0xa0>

			} else {
				// Si no lo es entonces es mayor a 20 ms
				if(buttonData->buttonLastState == RAISING) {
1a000664:	7c33      	ldrb	r3, [r6, #16]
1a000666:	2b02      	cmp	r3, #2
1a000668:	d107      	bne.n	1a00067a <checkButtonsDebounce+0x9a>
					// Si el ultimo estado habia sido de falling entonces la tecla fue liberada y fue detectado un rebote
					// Envio data por cola
				xQueueSend(queueMedicionTiempo, &buttonDataTemp, portMAX_DELAY); // se envia el tiempo medido al presionar
1a00066a:	4b06      	ldr	r3, [pc, #24]	; (1a000684 <checkButtonsDebounce+0xa4>)
1a00066c:	6818      	ldr	r0, [r3, #0]
1a00066e:	a901      	add	r1, sp, #4
1a000670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000674:	2300      	movs	r3, #0
1a000676:	f000 fba7 	bl	1a000dc8 <xQueueGenericSend>
//				xQueueSend(queueLaunchLeds, &buttonDataTemp, portMAX_DELAY);	// envio la cola a la tarea que maneja el encendido de leds
				} else {
					// si el estado anterior era de RAISING entonces fue detectado un rebote
				}
				// limpio los flags de estado
				buttonData->buttonState = NONE;
1a00067a:	2300      	movs	r3, #0
1a00067c:	7233      	strb	r3, [r6, #8]
				buttonData->buttonFirstEvent = IDLE;
1a00067e:	7273      	strb	r3, [r6, #9]
	case NONE:
	default:
		//Caso de error, no hace nada
		break;
	}
}
1a000680:	b006      	add	sp, #24
1a000682:	bd70      	pop	{r4, r5, r6, pc}
1a000684:	10002b94 	.word	0x10002b94

1a000688 <debounce>:
		}
	}
}

void debounce( void* taskParmPtr )
{
1a000688:	b508      	push	{r3, lr}
	static buttonData_t buttonsData[4];   // Data de cada tecla
	static uint8_t i;
	static buttonNum_t lastButtonInt;

// Inicializo las estructuras que manejan los pulsadores
	for (i=0;i<4;i++){
1a00068a:	2200      	movs	r2, #0
1a00068c:	4b1b      	ldr	r3, [pc, #108]	; (1a0006fc <debounce+0x74>)
1a00068e:	701a      	strb	r2, [r3, #0]
1a000690:	e00e      	b.n	1a0006b0 <debounce+0x28>
		buttonsData[i].buttonLastState = NONE;
1a000692:	4c1b      	ldr	r4, [pc, #108]	; (1a000700 <debounce+0x78>)
1a000694:	0099      	lsls	r1, r3, #2
1a000696:	18ca      	adds	r2, r1, r3
1a000698:	0092      	lsls	r2, r2, #2
1a00069a:	4422      	add	r2, r4
1a00069c:	2000      	movs	r0, #0
1a00069e:	7410      	strb	r0, [r2, #16]
		buttonsData[i].buttonState = IDLE;
1a0006a0:	7210      	strb	r0, [r2, #8]
		buttonsData[i].buttonFirstEvent = NONE;
1a0006a2:	7250      	strb	r0, [r2, #9]
		buttonsData[i].buttonIndex = i;
1a0006a4:	18ca      	adds	r2, r1, r3
1a0006a6:	0092      	lsls	r2, r2, #2
1a0006a8:	54a3      	strb	r3, [r4, r2]
	static buttonData_t buttonsData[4];   // Data de cada tecla
	static uint8_t i;
	static buttonNum_t lastButtonInt;

// Inicializo las estructuras que manejan los pulsadores
	for (i=0;i<4;i++){
1a0006aa:	3301      	adds	r3, #1
1a0006ac:	4a13      	ldr	r2, [pc, #76]	; (1a0006fc <debounce+0x74>)
1a0006ae:	7013      	strb	r3, [r2, #0]
1a0006b0:	4b12      	ldr	r3, [pc, #72]	; (1a0006fc <debounce+0x74>)
1a0006b2:	781b      	ldrb	r3, [r3, #0]
1a0006b4:	2b03      	cmp	r3, #3
1a0006b6:	d9ec      	bls.n	1a000692 <debounce+0xa>
		buttonsData[i].buttonState = IDLE;
		buttonsData[i].buttonFirstEvent = NONE;
		buttonsData[i].buttonIndex = i;
	}
   while(TRUE){
	   if(xQueueReceive( buttonsInfo, &buttonDataTemp, DEBOUNCE_TIME ) == pdTRUE){
1a0006b8:	4b12      	ldr	r3, [pc, #72]	; (1a000704 <debounce+0x7c>)
1a0006ba:	6818      	ldr	r0, [r3, #0]
1a0006bc:	4912      	ldr	r1, [pc, #72]	; (1a000708 <debounce+0x80>)
1a0006be:	2214      	movs	r2, #20
1a0006c0:	f000 fcbc 	bl	1a00103c <xQueueReceive>
1a0006c4:	2801      	cmp	r0, #1
1a0006c6:	d10f      	bne.n	1a0006e8 <debounce+0x60>
		   buttonsData[buttonDataTemp.buttonIndex].buttonState = buttonDataTemp.buttonState; // Actualizo el flanco ocurrido
1a0006c8:	480f      	ldr	r0, [pc, #60]	; (1a000708 <debounce+0x80>)
1a0006ca:	7801      	ldrb	r1, [r0, #0]
1a0006cc:	7a05      	ldrb	r5, [r0, #8]
1a0006ce:	4c0c      	ldr	r4, [pc, #48]	; (1a000700 <debounce+0x78>)
1a0006d0:	008b      	lsls	r3, r1, #2
1a0006d2:	185a      	adds	r2, r3, r1
1a0006d4:	0092      	lsls	r2, r2, #2
1a0006d6:	4422      	add	r2, r4
1a0006d8:	7215      	strb	r5, [r2, #8]
		   buttonsData[buttonDataTemp.buttonIndex].buttonTime = buttonDataTemp.buttonTime; // Actualizo el tiempo de ocurrencia del flanco
1a0006da:	6842      	ldr	r2, [r0, #4]
1a0006dc:	440b      	add	r3, r1
1a0006de:	009b      	lsls	r3, r3, #2
1a0006e0:	4423      	add	r3, r4
1a0006e2:	605a      	str	r2, [r3, #4]
		   lastButtonInt = buttonDataTemp.buttonIndex; // Actualizo la tecla sobre la que ocurrio el evento
1a0006e4:	4b09      	ldr	r3, [pc, #36]	; (1a00070c <debounce+0x84>)
1a0006e6:	7019      	strb	r1, [r3, #0]
	   }
	   // Chequeo el rebote con el antirrebote, si no hay rebote envio los datos por la cola
	   checkButtonsDebounce(&buttonsData[lastButtonInt]);
1a0006e8:	4b08      	ldr	r3, [pc, #32]	; (1a00070c <debounce+0x84>)
1a0006ea:	7818      	ldrb	r0, [r3, #0]
1a0006ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0006f0:	0080      	lsls	r0, r0, #2
1a0006f2:	4b03      	ldr	r3, [pc, #12]	; (1a000700 <debounce+0x78>)
1a0006f4:	4418      	add	r0, r3
1a0006f6:	f7ff ff73 	bl	1a0005e0 <checkButtonsDebounce>
   }
1a0006fa:	e7dd      	b.n	1a0006b8 <debounce+0x30>
1a0006fc:	10000092 	.word	0x10000092
1a000700:	100000a8 	.word	0x100000a8
1a000704:	10002b9c 	.word	0x10002b9c
1a000708:	10000094 	.word	0x10000094
1a00070c:	100000f8 	.word	0x100000f8

1a000710 <main>:

/*==================[funcion principal]======================================*/

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main(void)
{
1a000710:	b500      	push	{lr}
1a000712:	b083      	sub	sp, #12
   // ---------- CONFIGURACIONES ------------------------------
   // Inicializar y configurar la plataforma
   boardConfig();
1a000714:	f002 fa44 	bl	1a002ba0 <boardInit>

   // UART for debug messages
   debugPrintConfigUart( UART_USB, 115200 );
1a000718:	4c29      	ldr	r4, [pc, #164]	; (1a0007c0 <main+0xb0>)
1a00071a:	4620      	mov	r0, r4
1a00071c:	2103      	movs	r1, #3
1a00071e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a000722:	f002 fa29 	bl	1a002b78 <printInitUart>
   debugPrintlnString( "Blinky con freeRTOS y sAPI." );
1a000726:	7820      	ldrb	r0, [r4, #0]
1a000728:	4926      	ldr	r1, [pc, #152]	; (1a0007c4 <main+0xb4>)
1a00072a:	f002 fa2d 	bl	1a002b88 <printString>
1a00072e:	7820      	ldrb	r0, [r4, #0]
1a000730:	f002 fa2e 	bl	1a002b90 <printEnter>

   // Creacion de colas
   buttonsInfo = xQueueCreate( LARGO_COLA_BUTTONS_INFO, sizeof(buttonData_t));
1a000734:	200a      	movs	r0, #10
1a000736:	2114      	movs	r1, #20
1a000738:	2200      	movs	r2, #0
1a00073a:	f000 fb1d 	bl	1a000d78 <xQueueGenericCreate>
1a00073e:	4b22      	ldr	r3, [pc, #136]	; (1a0007c8 <main+0xb8>)
1a000740:	6018      	str	r0, [r3, #0]
   queueMedicionTiempo = xQueueCreate( LARGO_COLA_MEDICION_TIEMPO, sizeof(buttonData_t));
1a000742:	200a      	movs	r0, #10
1a000744:	2114      	movs	r1, #20
1a000746:	2200      	movs	r2, #0
1a000748:	f000 fb16 	bl	1a000d78 <xQueueGenericCreate>
1a00074c:	4b1f      	ldr	r3, [pc, #124]	; (1a0007cc <main+0xbc>)
1a00074e:	6018      	str	r0, [r3, #0]
   manejoDePWMLED1 = xQueueCreate( LARGO_COLA_CICLO_DE_TRABAJO, sizeof(pwmManagement_t));
1a000750:	200a      	movs	r0, #10
1a000752:	2105      	movs	r1, #5
1a000754:	2200      	movs	r2, #0
1a000756:	f000 fb0f 	bl	1a000d78 <xQueueGenericCreate>
1a00075a:	4b1d      	ldr	r3, [pc, #116]	; (1a0007d0 <main+0xc0>)
1a00075c:	6018      	str	r0, [r3, #0]
   manejoDePWMLED2 = xQueueCreate( LARGO_COLA_CICLO_DE_TRABAJO, sizeof(pwmManagement_t));
1a00075e:	200a      	movs	r0, #10
1a000760:	2105      	movs	r1, #5
1a000762:	2200      	movs	r2, #0
1a000764:	f000 fb08 	bl	1a000d78 <xQueueGenericCreate>
1a000768:	4b1a      	ldr	r3, [pc, #104]	; (1a0007d4 <main+0xc4>)
1a00076a:	6018      	str	r0, [r3, #0]

   // Creacion tarea debounce
   xTaskCreate(
1a00076c:	2301      	movs	r3, #1
1a00076e:	9300      	str	r3, [sp, #0]
1a000770:	2400      	movs	r4, #0
1a000772:	9401      	str	r4, [sp, #4]
1a000774:	4818      	ldr	r0, [pc, #96]	; (1a0007d8 <main+0xc8>)
1a000776:	4919      	ldr	r1, [pc, #100]	; (1a0007dc <main+0xcc>)
1a000778:	22b4      	movs	r2, #180	; 0xb4
1a00077a:	4623      	mov	r3, r4
1a00077c:	f000 ff72 	bl	1a001664 <xTaskCreate>
      tskIDLE_PRIORITY+1,           // Prioridad de la tarea
      0                             // Puntero a la tarea creada en el sistema
   );

   // Creacion tarea timeMeasure
   xTaskCreate(
1a000780:	2302      	movs	r3, #2
1a000782:	9300      	str	r3, [sp, #0]
1a000784:	9401      	str	r4, [sp, #4]
1a000786:	4816      	ldr	r0, [pc, #88]	; (1a0007e0 <main+0xd0>)
1a000788:	4916      	ldr	r1, [pc, #88]	; (1a0007e4 <main+0xd4>)
1a00078a:	22b4      	movs	r2, #180	; 0xb4
1a00078c:	4623      	mov	r3, r4
1a00078e:	f000 ff69 	bl	1a001664 <xTaskCreate>
      tskIDLE_PRIORITY+2,           // Prioridad de la tarea
      0                             // Puntero a la tarea creada en el sistema
   );

   // Creacion tarea taskPwmLed1
   xTaskCreate(
1a000792:	2503      	movs	r5, #3
1a000794:	9500      	str	r5, [sp, #0]
1a000796:	9401      	str	r4, [sp, #4]
1a000798:	4813      	ldr	r0, [pc, #76]	; (1a0007e8 <main+0xd8>)
1a00079a:	4914      	ldr	r1, [pc, #80]	; (1a0007ec <main+0xdc>)
1a00079c:	22b4      	movs	r2, #180	; 0xb4
1a00079e:	4623      	mov	r3, r4
1a0007a0:	f000 ff60 	bl	1a001664 <xTaskCreate>
      tskIDLE_PRIORITY+3,           // Prioridad de la tarea
      0                             // Puntero a la tarea creada en el sistema
    );

   // Creacion tarea taskPwmLed2
      xTaskCreate(
1a0007a4:	9500      	str	r5, [sp, #0]
1a0007a6:	9401      	str	r4, [sp, #4]
1a0007a8:	4811      	ldr	r0, [pc, #68]	; (1a0007f0 <main+0xe0>)
1a0007aa:	4912      	ldr	r1, [pc, #72]	; (1a0007f4 <main+0xe4>)
1a0007ac:	22b4      	movs	r2, #180	; 0xb4
1a0007ae:	4623      	mov	r3, r4
1a0007b0:	f000 ff58 	bl	1a001664 <xTaskCreate>
         tskIDLE_PRIORITY+3,           // Prioridad de la tarea
         0                             // Puntero a la tarea creada en el sistema
       );

   // Configuracion interrupcion gpio
   isrPinLevelConfig();
1a0007b4:	f000 f820 	bl	1a0007f8 <isrPinLevelConfig>
   // Iniciar scheduler
   vTaskStartScheduler();
1a0007b8:	f000 ff88 	bl	1a0016cc <vTaskStartScheduler>

   // ---------- REPETIR POR SIEMPRE --------------------------
   while( TRUE ) {
      // Si cae en este while 1 significa que no pudo iniciar el scheduler
   }
1a0007bc:	e7fe      	b.n	1a0007bc <main+0xac>
1a0007be:	bf00      	nop
1a0007c0:	10000088 	.word	0x10000088
1a0007c4:	1a004058 	.word	0x1a004058
1a0007c8:	10002b9c 	.word	0x10002b9c
1a0007cc:	10002b94 	.word	0x10002b94
1a0007d0:	10002b98 	.word	0x10002b98
1a0007d4:	10002ba0 	.word	0x10002ba0
1a0007d8:	1a000689 	.word	0x1a000689
1a0007dc:	1a004074 	.word	0x1a004074
1a0007e0:	1a000491 	.word	0x1a000491
1a0007e4:	1a004080 	.word	0x1a004080
1a0007e8:	1a0003c5 	.word	0x1a0003c5
1a0007ec:	1a00408c 	.word	0x1a00408c
1a0007f0:	1a000301 	.word	0x1a000301
1a0007f4:	1a004098 	.word	0x1a004098

1a0007f8 <isrPinLevelConfig>:

/*==================[definiciones de datos externos]=========================*/
extern QueueHandle_t buttonsInfo;
/*==================[declaraciones de funciones internas]====================*/
/*==================[declaraciones de funciones externas]====================*/
void isrPinLevelConfig(void){
1a0007f8:	b430      	push	{r4, r5}
 */
STATIC INLINE void Chip_SCU_GPIOIntPinSel(uint8_t PortSel, uint8_t PortNum, uint8_t PinNum)
{
	int32_t of = (PortSel & 3) << 3;
	uint32_t val = (((PortNum & 0x7) << 5) | (PinNum & 0x1F)) << of;
	LPC_SCU->PINTSEL[PortSel >> 2] = (LPC_SCU->PINTSEL[PortSel >> 2] & ~(0xFF << of)) | val;
1a0007fa:	4a28      	ldr	r2, [pc, #160]	; (1a00089c <isrPinLevelConfig+0xa4>)
1a0007fc:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
1a000800:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000804:	f043 0304 	orr.w	r3, r3, #4
1a000808:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00080c:	4b24      	ldr	r3, [pc, #144]	; (1a0008a0 <isrPinLevelConfig+0xa8>)
1a00080e:	2401      	movs	r4, #1
1a000810:	625c      	str	r4, [r3, #36]	; 0x24
 * @param	pins	: Pins (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_SetPinModeEdge(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->ISEL &= ~pins;
1a000812:	6819      	ldr	r1, [r3, #0]
1a000814:	f021 0101 	bic.w	r1, r1, #1
1a000818:	6019      	str	r1, [r3, #0]
 * @param	pins	: Pins to enable (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_EnableIntLow(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->SIENF = pins;
1a00081a:	615c      	str	r4, [r3, #20]
 * @param	pins	: Pins to enable (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_EnableIntHigh(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->SIENR = pins;
1a00081c:	609c      	str	r4, [r3, #8]
1a00081e:	f8d2 1e00 	ldr.w	r1, [r2, #3584]	; 0xe00
1a000822:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
1a000826:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
1a00082a:	f8c2 1e00 	str.w	r1, [r2, #3584]	; 0xe00
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00082e:	2002      	movs	r0, #2
1a000830:	6258      	str	r0, [r3, #36]	; 0x24
 * @param	pins	: Pins (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_SetPinModeEdge(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->ISEL &= ~pins;
1a000832:	6819      	ldr	r1, [r3, #0]
1a000834:	f021 0102 	bic.w	r1, r1, #2
1a000838:	6019      	str	r1, [r3, #0]
 * @param	pins	: Pins to enable (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_EnableIntLow(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->SIENF = pins;
1a00083a:	6158      	str	r0, [r3, #20]
 * @param	pins	: Pins to enable (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_EnableIntHigh(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->SIENR = pins;
1a00083c:	6098      	str	r0, [r3, #8]
1a00083e:	f8d2 1e00 	ldr.w	r1, [r2, #3584]	; 0xe00
1a000842:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
1a000846:	f441 2110 	orr.w	r1, r1, #589824	; 0x90000
1a00084a:	f8c2 1e00 	str.w	r1, [r2, #3584]	; 0xe00
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00084e:	2104      	movs	r1, #4
1a000850:	6259      	str	r1, [r3, #36]	; 0x24
 * @param	pins	: Pins (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_SetPinModeEdge(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->ISEL &= ~pins;
1a000852:	681d      	ldr	r5, [r3, #0]
1a000854:	f025 0504 	bic.w	r5, r5, #4
1a000858:	601d      	str	r5, [r3, #0]
 * @param	pins	: Pins to enable (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_EnableIntLow(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->SIENF = pins;
1a00085a:	6159      	str	r1, [r3, #20]
 * @param	pins	: Pins to enable (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_EnableIntHigh(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->SIENR = pins;
1a00085c:	6099      	str	r1, [r3, #8]
1a00085e:	f8d2 5e00 	ldr.w	r5, [r2, #3584]	; 0xe00
1a000862:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
1a000866:	f045 5524 	orr.w	r5, r5, #687865856	; 0x29000000
1a00086a:	f8c2 5e00 	str.w	r5, [r2, #3584]	; 0xe00
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00086e:	2208      	movs	r2, #8
1a000870:	625a      	str	r2, [r3, #36]	; 0x24
 * @param	pins	: Pins (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_SetPinModeEdge(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->ISEL &= ~pins;
1a000872:	681d      	ldr	r5, [r3, #0]
1a000874:	f025 0508 	bic.w	r5, r5, #8
1a000878:	601d      	str	r5, [r3, #0]
 * @param	pins	: Pins to enable (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_EnableIntLow(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->SIENF = pins;
1a00087a:	615a      	str	r2, [r3, #20]
 * @param	pins	: Pins to enable (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_EnableIntHigh(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->SIENR = pins;
1a00087c:	609a      	str	r2, [r3, #8]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1a00087e:	4b09      	ldr	r3, [pc, #36]	; (1a0008a4 <isrPinLevelConfig+0xac>)
1a000880:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a000884:	605c      	str	r4, [r3, #4]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1a000886:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a00088a:	6058      	str	r0, [r3, #4]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1a00088c:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a000890:	6059      	str	r1, [r3, #4]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1a000892:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a000896:	605a      	str	r2, [r3, #4]

	    //Borra el clear pending de la IRQ y lo activa
	    NVIC_ClearPendingIRQ( PIN_INT3_IRQn );
	    NVIC_EnableIRQ( PIN_INT3_IRQn );

}
1a000898:	bc30      	pop	{r4, r5}
1a00089a:	4770      	bx	lr
1a00089c:	40086000 	.word	0x40086000
1a0008a0:	40087000 	.word	0x40087000
1a0008a4:	e000e100 	.word	0xe000e100

1a0008a8 <GPIO0_IRQHandler>:

void GPIO0_IRQHandler(void){
1a0008a8:	b500      	push	{lr}
1a0008aa:	b087      	sub	sp, #28

	BaseType_t pxHigherPriorityTaskWoken;

	buttonData_t buttonData;

	buttonData.buttonIndex = TECLA1;
1a0008ac:	2300      	movs	r3, #0
1a0008ae:	f88d 3000 	strb.w	r3, [sp]
	buttonData.buttonTime = xTaskGetTickCountFromISR();
1a0008b2:	f000 ff69 	bl	1a001788 <xTaskGetTickCountFromISR>
1a0008b6:	9001      	str	r0, [sp, #4]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a0008b8:	4b14      	ldr	r3, [pc, #80]	; (1a00090c <GPIO0_IRQHandler+0x64>)
1a0008ba:	69db      	ldr	r3, [r3, #28]

	if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(0) ) {
1a0008bc:	f013 0f01 	tst.w	r3, #1
1a0008c0:	d006      	beq.n	1a0008d0 <GPIO0_IRQHandler+0x28>
		 buttonData.buttonState = RAISING;
1a0008c2:	2302      	movs	r3, #2
1a0008c4:	f88d 3008 	strb.w	r3, [sp, #8]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a0008c8:	2201      	movs	r2, #1
1a0008ca:	4b10      	ldr	r3, [pc, #64]	; (1a00090c <GPIO0_IRQHandler+0x64>)
1a0008cc:	61da      	str	r2, [r3, #28]
1a0008ce:	e004      	b.n	1a0008da <GPIO0_IRQHandler+0x32>
		   Chip_PININT_ClearRiseStates(LPC_GPIO_PIN_INT,PININTCH(0));
	 }
	 else{
		 buttonData.buttonState = FALLING;
1a0008d0:	2301      	movs	r3, #1
1a0008d2:	f88d 3008 	strb.w	r3, [sp, #8]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a0008d6:	4a0d      	ldr	r2, [pc, #52]	; (1a00090c <GPIO0_IRQHandler+0x64>)
1a0008d8:	6213      	str	r3, [r2, #32]
		 Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(0));
	 }

	pxHigherPriorityTaskWoken = pdFALSE;
1a0008da:	2300      	movs	r3, #0
1a0008dc:	9305      	str	r3, [sp, #20]

	xQueueSendFromISR(buttonsInfo, &buttonData, &pxHigherPriorityTaskWoken );
1a0008de:	4a0c      	ldr	r2, [pc, #48]	; (1a000910 <GPIO0_IRQHandler+0x68>)
1a0008e0:	6810      	ldr	r0, [r2, #0]
1a0008e2:	4669      	mov	r1, sp
1a0008e4:	aa05      	add	r2, sp, #20
1a0008e6:	f000 fb37 	bl	1a000f58 <xQueueGenericSendFromISR>
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a0008ea:	2201      	movs	r2, #1
1a0008ec:	4b07      	ldr	r3, [pc, #28]	; (1a00090c <GPIO0_IRQHandler+0x64>)
1a0008ee:	625a      	str	r2, [r3, #36]	; 0x24

	Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH( 0 ));

	portYIELD_FROM_ISR( pxHigherPriorityTaskWoken );
1a0008f0:	9b05      	ldr	r3, [sp, #20]
1a0008f2:	b13b      	cbz	r3, 1a000904 <GPIO0_IRQHandler+0x5c>
1a0008f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0008f8:	4b06      	ldr	r3, [pc, #24]	; (1a000914 <GPIO0_IRQHandler+0x6c>)
1a0008fa:	601a      	str	r2, [r3, #0]
1a0008fc:	f3bf 8f4f 	dsb	sy
1a000900:	f3bf 8f6f 	isb	sy
}
1a000904:	b007      	add	sp, #28
1a000906:	f85d fb04 	ldr.w	pc, [sp], #4
1a00090a:	bf00      	nop
1a00090c:	40087000 	.word	0x40087000
1a000910:	10002b9c 	.word	0x10002b9c
1a000914:	e000ed04 	.word	0xe000ed04

1a000918 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void){
1a000918:	b500      	push	{lr}
1a00091a:	b087      	sub	sp, #28

	BaseType_t pxHigherPriorityTaskWoken;

	buttonData_t buttonData;

	buttonData.buttonIndex = TECLA2;
1a00091c:	2301      	movs	r3, #1
1a00091e:	f88d 3000 	strb.w	r3, [sp]
	buttonData.buttonTime = xTaskGetTickCountFromISR();
1a000922:	f000 ff31 	bl	1a001788 <xTaskGetTickCountFromISR>
1a000926:	9001      	str	r0, [sp, #4]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a000928:	4b14      	ldr	r3, [pc, #80]	; (1a00097c <GPIO1_IRQHandler+0x64>)
1a00092a:	69db      	ldr	r3, [r3, #28]

	 if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(1) ) {
1a00092c:	f013 0f02 	tst.w	r3, #2
1a000930:	d005      	beq.n	1a00093e <GPIO1_IRQHandler+0x26>
		 buttonData.buttonState = RAISING;
1a000932:	2302      	movs	r3, #2
1a000934:	f88d 3008 	strb.w	r3, [sp, #8]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a000938:	4a10      	ldr	r2, [pc, #64]	; (1a00097c <GPIO1_IRQHandler+0x64>)
1a00093a:	61d3      	str	r3, [r2, #28]
1a00093c:	e005      	b.n	1a00094a <GPIO1_IRQHandler+0x32>
		   Chip_PININT_ClearRiseStates(LPC_GPIO_PIN_INT,PININTCH(1));
	 }
	 else{
		 buttonData.buttonState = FALLING;
1a00093e:	2301      	movs	r3, #1
1a000940:	f88d 3008 	strb.w	r3, [sp, #8]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a000944:	2202      	movs	r2, #2
1a000946:	4b0d      	ldr	r3, [pc, #52]	; (1a00097c <GPIO1_IRQHandler+0x64>)
1a000948:	621a      	str	r2, [r3, #32]
		 Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(1));
	 }

	pxHigherPriorityTaskWoken = pdFALSE;
1a00094a:	2300      	movs	r3, #0
1a00094c:	9305      	str	r3, [sp, #20]

	xQueueSendFromISR(buttonsInfo, &buttonData, &pxHigherPriorityTaskWoken );
1a00094e:	4a0c      	ldr	r2, [pc, #48]	; (1a000980 <GPIO1_IRQHandler+0x68>)
1a000950:	6810      	ldr	r0, [r2, #0]
1a000952:	4669      	mov	r1, sp
1a000954:	aa05      	add	r2, sp, #20
1a000956:	f000 faff 	bl	1a000f58 <xQueueGenericSendFromISR>
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00095a:	2202      	movs	r2, #2
1a00095c:	4b07      	ldr	r3, [pc, #28]	; (1a00097c <GPIO1_IRQHandler+0x64>)
1a00095e:	625a      	str	r2, [r3, #36]	; 0x24

	Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH( 1 ));

	portYIELD_FROM_ISR( pxHigherPriorityTaskWoken );
1a000960:	9b05      	ldr	r3, [sp, #20]
1a000962:	b13b      	cbz	r3, 1a000974 <GPIO1_IRQHandler+0x5c>
1a000964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000968:	4b06      	ldr	r3, [pc, #24]	; (1a000984 <GPIO1_IRQHandler+0x6c>)
1a00096a:	601a      	str	r2, [r3, #0]
1a00096c:	f3bf 8f4f 	dsb	sy
1a000970:	f3bf 8f6f 	isb	sy
}
1a000974:	b007      	add	sp, #28
1a000976:	f85d fb04 	ldr.w	pc, [sp], #4
1a00097a:	bf00      	nop
1a00097c:	40087000 	.word	0x40087000
1a000980:	10002b9c 	.word	0x10002b9c
1a000984:	e000ed04 	.word	0xe000ed04

1a000988 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void){
1a000988:	b500      	push	{lr}
1a00098a:	b087      	sub	sp, #28

	BaseType_t pxHigherPriorityTaskWoken;

	buttonData_t buttonData;

	buttonData.buttonIndex = TECLA3;
1a00098c:	2302      	movs	r3, #2
1a00098e:	f88d 3000 	strb.w	r3, [sp]
	buttonData.buttonTime = xTaskGetTickCountFromISR();
1a000992:	f000 fef9 	bl	1a001788 <xTaskGetTickCountFromISR>
1a000996:	9001      	str	r0, [sp, #4]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a000998:	4b14      	ldr	r3, [pc, #80]	; (1a0009ec <GPIO2_IRQHandler+0x64>)
1a00099a:	69db      	ldr	r3, [r3, #28]

	 if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(2) ) {
1a00099c:	f013 0f04 	tst.w	r3, #4
1a0009a0:	d006      	beq.n	1a0009b0 <GPIO2_IRQHandler+0x28>
		 buttonData.buttonState = RAISING;
1a0009a2:	2302      	movs	r3, #2
1a0009a4:	f88d 3008 	strb.w	r3, [sp, #8]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a0009a8:	2204      	movs	r2, #4
1a0009aa:	4b10      	ldr	r3, [pc, #64]	; (1a0009ec <GPIO2_IRQHandler+0x64>)
1a0009ac:	61da      	str	r2, [r3, #28]
1a0009ae:	e005      	b.n	1a0009bc <GPIO2_IRQHandler+0x34>
		   Chip_PININT_ClearRiseStates(LPC_GPIO_PIN_INT,PININTCH(2));
	 }
	 else{
		 buttonData.buttonState = FALLING;
1a0009b0:	2301      	movs	r3, #1
1a0009b2:	f88d 3008 	strb.w	r3, [sp, #8]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a0009b6:	2202      	movs	r2, #2
1a0009b8:	4b0c      	ldr	r3, [pc, #48]	; (1a0009ec <GPIO2_IRQHandler+0x64>)
1a0009ba:	621a      	str	r2, [r3, #32]
		 Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(1));
	 }

	pxHigherPriorityTaskWoken = pdFALSE;
1a0009bc:	2300      	movs	r3, #0
1a0009be:	9305      	str	r3, [sp, #20]

	xQueueSendFromISR(buttonsInfo, &buttonData, &pxHigherPriorityTaskWoken );
1a0009c0:	4a0b      	ldr	r2, [pc, #44]	; (1a0009f0 <GPIO2_IRQHandler+0x68>)
1a0009c2:	6810      	ldr	r0, [r2, #0]
1a0009c4:	4669      	mov	r1, sp
1a0009c6:	aa05      	add	r2, sp, #20
1a0009c8:	f000 fac6 	bl	1a000f58 <xQueueGenericSendFromISR>
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a0009cc:	2204      	movs	r2, #4
1a0009ce:	4b07      	ldr	r3, [pc, #28]	; (1a0009ec <GPIO2_IRQHandler+0x64>)
1a0009d0:	625a      	str	r2, [r3, #36]	; 0x24

	Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH( 2 ));

	portYIELD_FROM_ISR( pxHigherPriorityTaskWoken );
1a0009d2:	9b05      	ldr	r3, [sp, #20]
1a0009d4:	b13b      	cbz	r3, 1a0009e6 <GPIO2_IRQHandler+0x5e>
1a0009d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0009da:	4b06      	ldr	r3, [pc, #24]	; (1a0009f4 <GPIO2_IRQHandler+0x6c>)
1a0009dc:	601a      	str	r2, [r3, #0]
1a0009de:	f3bf 8f4f 	dsb	sy
1a0009e2:	f3bf 8f6f 	isb	sy
}
1a0009e6:	b007      	add	sp, #28
1a0009e8:	f85d fb04 	ldr.w	pc, [sp], #4
1a0009ec:	40087000 	.word	0x40087000
1a0009f0:	10002b9c 	.word	0x10002b9c
1a0009f4:	e000ed04 	.word	0xe000ed04

1a0009f8 <GPIO3_IRQHandler>:

void GPIO3_IRQHandler(void){
1a0009f8:	b500      	push	{lr}
1a0009fa:	b087      	sub	sp, #28

	BaseType_t pxHigherPriorityTaskWoken;

	buttonData_t buttonData;

	buttonData.buttonIndex = TECLA4;
1a0009fc:	2303      	movs	r3, #3
1a0009fe:	f88d 3000 	strb.w	r3, [sp]
	buttonData.buttonTime = xTaskGetTickCountFromISR();
1a000a02:	f000 fec1 	bl	1a001788 <xTaskGetTickCountFromISR>
1a000a06:	9001      	str	r0, [sp, #4]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a000a08:	4b14      	ldr	r3, [pc, #80]	; (1a000a5c <GPIO3_IRQHandler+0x64>)
1a000a0a:	69db      	ldr	r3, [r3, #28]

	 if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(3) ) {
1a000a0c:	f013 0f08 	tst.w	r3, #8
1a000a10:	d006      	beq.n	1a000a20 <GPIO3_IRQHandler+0x28>
		 buttonData.buttonState = RAISING;
1a000a12:	2302      	movs	r3, #2
1a000a14:	f88d 3008 	strb.w	r3, [sp, #8]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a000a18:	2208      	movs	r2, #8
1a000a1a:	4b10      	ldr	r3, [pc, #64]	; (1a000a5c <GPIO3_IRQHandler+0x64>)
1a000a1c:	61da      	str	r2, [r3, #28]
1a000a1e:	e005      	b.n	1a000a2c <GPIO3_IRQHandler+0x34>
		   Chip_PININT_ClearRiseStates(LPC_GPIO_PIN_INT,PININTCH(3));
	 }
	 else{
		 buttonData.buttonState = FALLING;
1a000a20:	2301      	movs	r3, #1
1a000a22:	f88d 3008 	strb.w	r3, [sp, #8]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a000a26:	2208      	movs	r2, #8
1a000a28:	4b0c      	ldr	r3, [pc, #48]	; (1a000a5c <GPIO3_IRQHandler+0x64>)
1a000a2a:	621a      	str	r2, [r3, #32]
		 Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(3));
	 }

	pxHigherPriorityTaskWoken = pdFALSE;
1a000a2c:	2300      	movs	r3, #0
1a000a2e:	9305      	str	r3, [sp, #20]

	xQueueSendFromISR(buttonsInfo, &buttonData, &pxHigherPriorityTaskWoken );
1a000a30:	4a0b      	ldr	r2, [pc, #44]	; (1a000a60 <GPIO3_IRQHandler+0x68>)
1a000a32:	6810      	ldr	r0, [r2, #0]
1a000a34:	4669      	mov	r1, sp
1a000a36:	aa05      	add	r2, sp, #20
1a000a38:	f000 fa8e 	bl	1a000f58 <xQueueGenericSendFromISR>
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a000a3c:	2208      	movs	r2, #8
1a000a3e:	4b07      	ldr	r3, [pc, #28]	; (1a000a5c <GPIO3_IRQHandler+0x64>)
1a000a40:	625a      	str	r2, [r3, #36]	; 0x24

	Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(3));

	portYIELD_FROM_ISR( pxHigherPriorityTaskWoken );
1a000a42:	9b05      	ldr	r3, [sp, #20]
1a000a44:	b13b      	cbz	r3, 1a000a56 <GPIO3_IRQHandler+0x5e>
1a000a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a4a:	4b06      	ldr	r3, [pc, #24]	; (1a000a64 <GPIO3_IRQHandler+0x6c>)
1a000a4c:	601a      	str	r2, [r3, #0]
1a000a4e:	f3bf 8f4f 	dsb	sy
1a000a52:	f3bf 8f6f 	isb	sy
}
1a000a56:	b007      	add	sp, #28
1a000a58:	f85d fb04 	ldr.w	pc, [sp], #4
1a000a5c:	40087000 	.word	0x40087000
1a000a60:	10002b9c 	.word	0x10002b9c
1a000a64:	e000ed04 	.word	0xe000ed04

1a000a68 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a000a68:	b538      	push	{r3, r4, r5, lr}
1a000a6a:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a000a6c:	f010 0f07 	tst.w	r0, #7
1a000a70:	d002      	beq.n	1a000a78 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000a72:	f020 0407 	bic.w	r4, r0, #7
1a000a76:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a000a78:	f000 fe78 	bl	1a00176c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a000a7c:	4b10      	ldr	r3, [pc, #64]	; (1a000ac0 <pvPortMalloc+0x58>)
1a000a7e:	681b      	ldr	r3, [r3, #0]
1a000a80:	b923      	cbnz	r3, 1a000a8c <pvPortMalloc+0x24>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a000a82:	4b10      	ldr	r3, [pc, #64]	; (1a000ac4 <pvPortMalloc+0x5c>)
1a000a84:	f023 0307 	bic.w	r3, r3, #7
1a000a88:	4a0d      	ldr	r2, [pc, #52]	; (1a000ac0 <pvPortMalloc+0x58>)
1a000a8a:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a000a8c:	4b0e      	ldr	r3, [pc, #56]	; (1a000ac8 <pvPortMalloc+0x60>)
1a000a8e:	681b      	ldr	r3, [r3, #0]
1a000a90:	441c      	add	r4, r3
1a000a92:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a000a96:	4294      	cmp	r4, r2
1a000a98:	d807      	bhi.n	1a000aaa <pvPortMalloc+0x42>
1a000a9a:	42a3      	cmp	r3, r4
1a000a9c:	d207      	bcs.n	1a000aae <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a000a9e:	4a08      	ldr	r2, [pc, #32]	; (1a000ac0 <pvPortMalloc+0x58>)
1a000aa0:	6815      	ldr	r5, [r2, #0]
1a000aa2:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a000aa4:	4b08      	ldr	r3, [pc, #32]	; (1a000ac8 <pvPortMalloc+0x60>)
1a000aa6:	601c      	str	r4, [r3, #0]
1a000aa8:	e002      	b.n	1a000ab0 <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
1a000aaa:	2500      	movs	r5, #0
1a000aac:	e000      	b.n	1a000ab0 <pvPortMalloc+0x48>
1a000aae:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a000ab0:	f000 ff04 	bl	1a0018bc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
1a000ab4:	b90d      	cbnz	r5, 1a000aba <pvPortMalloc+0x52>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a000ab6:	f000 fc0b 	bl	1a0012d0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a000aba:	4628      	mov	r0, r5
1a000abc:	bd38      	pop	{r3, r4, r5, pc}
1a000abe:	bf00      	nop
1a000ac0:	10002110 	.word	0x10002110
1a000ac4:	10000118 	.word	0x10000118
1a000ac8:	1000010c 	.word	0x1000010c

1a000acc <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a000acc:	b140      	cbz	r0, 1a000ae0 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000ace:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ad2:	f383 8811 	msr	BASEPRI, r3
1a000ad6:	f3bf 8f6f 	isb	sy
1a000ada:	f3bf 8f4f 	dsb	sy
1a000ade:	e7fe      	b.n	1a000ade <vPortFree+0x12>
1a000ae0:	4770      	bx	lr
1a000ae2:	bf00      	nop

1a000ae4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000ae4:	b510      	push	{r4, lr}
1a000ae6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000ae8:	f001 fc34 	bl	1a002354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000aec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000aee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000af0:	429a      	cmp	r2, r3
1a000af2:	d101      	bne.n	1a000af8 <prvIsQueueFull+0x14>
		{
			xReturn = pdTRUE;
1a000af4:	2401      	movs	r4, #1
1a000af6:	e000      	b.n	1a000afa <prvIsQueueFull+0x16>
		}
		else
		{
			xReturn = pdFALSE;
1a000af8:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000afa:	f001 fc4d 	bl	1a002398 <vPortExitCritical>

	return xReturn;
}
1a000afe:	4620      	mov	r0, r4
1a000b00:	bd10      	pop	{r4, pc}
1a000b02:	bf00      	nop

1a000b04 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
1a000b04:	b510      	push	{r4, lr}
1a000b06:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000b08:	f001 fc24 	bl	1a002354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000b0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000b0e:	b90b      	cbnz	r3, 1a000b14 <prvIsQueueEmpty+0x10>
		{
			xReturn = pdTRUE;
1a000b10:	2401      	movs	r4, #1
1a000b12:	e000      	b.n	1a000b16 <prvIsQueueEmpty+0x12>
		}
		else
		{
			xReturn = pdFALSE;
1a000b14:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000b16:	f001 fc3f 	bl	1a002398 <vPortExitCritical>

	return xReturn;
}
1a000b1a:	4620      	mov	r0, r4
1a000b1c:	bd10      	pop	{r4, pc}
1a000b1e:	bf00      	nop

1a000b20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
1a000b20:	b570      	push	{r4, r5, r6, lr}
1a000b22:	4604      	mov	r4, r0
1a000b24:	4616      	mov	r6, r2
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000b26:	6b85      	ldr	r5, [r0, #56]	; 0x38

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000b28:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000b2a:	b93a      	cbnz	r2, 1a000b3c <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000b2c:	6803      	ldr	r3, [r0, #0]
1a000b2e:	bb43      	cbnz	r3, 1a000b82 <prvCopyDataToQueue+0x62>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000b30:	6840      	ldr	r0, [r0, #4]
1a000b32:	f001 f8fb 	bl	1a001d2c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000b36:	2300      	movs	r3, #0
1a000b38:	6063      	str	r3, [r4, #4]
1a000b3a:	e029      	b.n	1a000b90 <prvCopyDataToQueue+0x70>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
1a000b3c:	b96e      	cbnz	r6, 1a000b5a <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000b3e:	6880      	ldr	r0, [r0, #8]
1a000b40:	f003 fa76 	bl	1a004030 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000b44:	68a2      	ldr	r2, [r4, #8]
1a000b46:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000b48:	4413      	add	r3, r2
1a000b4a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000b4c:	6862      	ldr	r2, [r4, #4]
1a000b4e:	4293      	cmp	r3, r2
1a000b50:	d319      	bcc.n	1a000b86 <prvCopyDataToQueue+0x66>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000b52:	6823      	ldr	r3, [r4, #0]
1a000b54:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
1a000b56:	2000      	movs	r0, #0
1a000b58:	e01a      	b.n	1a000b90 <prvCopyDataToQueue+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000b5a:	68c0      	ldr	r0, [r0, #12]
1a000b5c:	f003 fa68 	bl	1a004030 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000b60:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000b62:	425b      	negs	r3, r3
1a000b64:	68e2      	ldr	r2, [r4, #12]
1a000b66:	441a      	add	r2, r3
1a000b68:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000b6a:	6821      	ldr	r1, [r4, #0]
1a000b6c:	428a      	cmp	r2, r1
1a000b6e:	d202      	bcs.n	1a000b76 <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000b70:	6862      	ldr	r2, [r4, #4]
1a000b72:	4413      	add	r3, r2
1a000b74:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
1a000b76:	2e02      	cmp	r6, #2
1a000b78:	d107      	bne.n	1a000b8a <prvCopyDataToQueue+0x6a>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000b7a:	b145      	cbz	r5, 1a000b8e <prvCopyDataToQueue+0x6e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
1a000b7c:	3d01      	subs	r5, #1
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
1a000b7e:	2000      	movs	r0, #0
1a000b80:	e006      	b.n	1a000b90 <prvCopyDataToQueue+0x70>
1a000b82:	2000      	movs	r0, #0
1a000b84:	e004      	b.n	1a000b90 <prvCopyDataToQueue+0x70>
1a000b86:	2000      	movs	r0, #0
1a000b88:	e002      	b.n	1a000b90 <prvCopyDataToQueue+0x70>
1a000b8a:	2000      	movs	r0, #0
1a000b8c:	e000      	b.n	1a000b90 <prvCopyDataToQueue+0x70>
1a000b8e:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000b90:	3501      	adds	r5, #1
1a000b92:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
1a000b94:	bd70      	pop	{r4, r5, r6, pc}
1a000b96:	bf00      	nop

1a000b98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000b98:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000b9a:	b172      	cbz	r2, 1a000bba <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
1a000b9c:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000b9e:	68c3      	ldr	r3, [r0, #12]
1a000ba0:	4413      	add	r3, r2
1a000ba2:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000ba4:	6844      	ldr	r4, [r0, #4]
1a000ba6:	42a3      	cmp	r3, r4
1a000ba8:	d301      	bcc.n	1a000bae <prvCopyDataFromQueue+0x16>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000baa:	6803      	ldr	r3, [r0, #0]
1a000bac:	60c3      	str	r3, [r0, #12]
1a000bae:	4603      	mov	r3, r0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000bb0:	4608      	mov	r0, r1
1a000bb2:	68d9      	ldr	r1, [r3, #12]
1a000bb4:	f003 fa3c 	bl	1a004030 <memcpy>
1a000bb8:	bd10      	pop	{r4, pc}
1a000bba:	4770      	bx	lr

1a000bbc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
1a000bbc:	b538      	push	{r3, r4, r5, lr}
1a000bbe:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
1a000bc0:	f001 fbc8 	bl	1a002354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
1a000bc4:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000bc8:	b2e4      	uxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000bca:	e00a      	b.n	1a000be2 <prvUnlockQueue+0x26>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000bcc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000bce:	b15b      	cbz	r3, 1a000be8 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000bd0:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000bd4:	f001 f802 	bl	1a001bdc <xTaskRemoveFromEventList>
1a000bd8:	b108      	cbz	r0, 1a000bde <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
1a000bda:	f001 f891 	bl	1a001d00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
1a000bde:	3c01      	subs	r4, #1
1a000be0:	b2e4      	uxtb	r4, r4
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000be2:	b263      	sxtb	r3, r4
1a000be4:	2b00      	cmp	r3, #0
1a000be6:	dcf1      	bgt.n	1a000bcc <prvUnlockQueue+0x10>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
1a000be8:	23ff      	movs	r3, #255	; 0xff
1a000bea:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
1a000bee:	f001 fbd3 	bl	1a002398 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
1a000bf2:	f001 fbaf 	bl	1a002354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
1a000bf6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000bfa:	b2e4      	uxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000bfc:	e00a      	b.n	1a000c14 <prvUnlockQueue+0x58>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000bfe:	692b      	ldr	r3, [r5, #16]
1a000c00:	b15b      	cbz	r3, 1a000c1a <prvUnlockQueue+0x5e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000c02:	f105 0010 	add.w	r0, r5, #16
1a000c06:	f000 ffe9 	bl	1a001bdc <xTaskRemoveFromEventList>
1a000c0a:	b108      	cbz	r0, 1a000c10 <prvUnlockQueue+0x54>
				{
					vTaskMissedYield();
1a000c0c:	f001 f878 	bl	1a001d00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
1a000c10:	3c01      	subs	r4, #1
1a000c12:	b2e4      	uxtb	r4, r4
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000c14:	b263      	sxtb	r3, r4
1a000c16:	2b00      	cmp	r3, #0
1a000c18:	dcf1      	bgt.n	1a000bfe <prvUnlockQueue+0x42>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
1a000c1a:	23ff      	movs	r3, #255	; 0xff
1a000c1c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
1a000c20:	f001 fbba 	bl	1a002398 <vPortExitCritical>
1a000c24:	bd38      	pop	{r3, r4, r5, pc}
1a000c26:	bf00      	nop

1a000c28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
1a000c28:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a000c2a:	b940      	cbnz	r0, 1a000c3e <xQueueGenericReset+0x16>
1a000c2c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c30:	f383 8811 	msr	BASEPRI, r3
1a000c34:	f3bf 8f6f 	isb	sy
1a000c38:	f3bf 8f4f 	dsb	sy
1a000c3c:	e7fe      	b.n	1a000c3c <xQueueGenericReset+0x14>
1a000c3e:	4604      	mov	r4, r0
1a000c40:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
1a000c42:	f001 fb87 	bl	1a002354 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000c46:	6821      	ldr	r1, [r4, #0]
1a000c48:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000c4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000c4c:	fb03 1002 	mla	r0, r3, r2, r1
1a000c50:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000c52:	2000      	movs	r0, #0
1a000c54:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000c56:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000c58:	3a01      	subs	r2, #1
1a000c5a:	fb02 1303 	mla	r3, r2, r3, r1
1a000c5e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000c60:	23ff      	movs	r3, #255	; 0xff
1a000c62:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000c66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
1a000c6a:	b97d      	cbnz	r5, 1a000c8c <xQueueGenericReset+0x64>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000c6c:	6923      	ldr	r3, [r4, #16]
1a000c6e:	b1ab      	cbz	r3, 1a000c9c <xQueueGenericReset+0x74>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000c70:	f104 0010 	add.w	r0, r4, #16
1a000c74:	f000 ffb2 	bl	1a001bdc <xTaskRemoveFromEventList>
1a000c78:	b180      	cbz	r0, 1a000c9c <xQueueGenericReset+0x74>
				{
					queueYIELD_IF_USING_PREEMPTION();
1a000c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c7e:	4b09      	ldr	r3, [pc, #36]	; (1a000ca4 <xQueueGenericReset+0x7c>)
1a000c80:	601a      	str	r2, [r3, #0]
1a000c82:	f3bf 8f4f 	dsb	sy
1a000c86:	f3bf 8f6f 	isb	sy
1a000c8a:	e007      	b.n	1a000c9c <xQueueGenericReset+0x74>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000c8c:	f104 0010 	add.w	r0, r4, #16
1a000c90:	f000 faba 	bl	1a001208 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000c94:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000c98:	f000 fab6 	bl	1a001208 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
1a000c9c:	f001 fb7c 	bl	1a002398 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
1a000ca0:	2001      	movs	r0, #1
1a000ca2:	bd38      	pop	{r3, r4, r5, pc}
1a000ca4:	e000ed04 	.word	0xe000ed04

1a000ca8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
1a000ca8:	b538      	push	{r3, r4, r5, lr}
1a000caa:	461d      	mov	r5, r3
1a000cac:	9c04      	ldr	r4, [sp, #16]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
1a000cae:	460b      	mov	r3, r1
1a000cb0:	b909      	cbnz	r1, 1a000cb6 <prvInitialiseNewQueue+0xe>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000cb2:	6024      	str	r4, [r4, #0]
1a000cb4:	e000      	b.n	1a000cb8 <prvInitialiseNewQueue+0x10>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000cb6:	6022      	str	r2, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
1a000cb8:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000cba:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000cbc:	4620      	mov	r0, r4
1a000cbe:	2101      	movs	r1, #1
1a000cc0:	f7ff ffb2 	bl	1a000c28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
1a000cc4:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
1a000cc8:	bd38      	pop	{r3, r4, r5, pc}
1a000cca:	bf00      	nop

1a000ccc <xQueueGenericCreateStatic>:

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000ccc:	b940      	cbnz	r0, 1a000ce0 <xQueueGenericCreateStatic+0x14>
1a000cce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000cd2:	f383 8811 	msr	BASEPRI, r3
1a000cd6:	f3bf 8f6f 	isb	sy
1a000cda:	f3bf 8f4f 	dsb	sy
1a000cde:	e7fe      	b.n	1a000cde <xQueueGenericCreateStatic+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
1a000ce0:	b510      	push	{r4, lr}
1a000ce2:	b084      	sub	sp, #16
1a000ce4:	4604      	mov	r4, r0

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
1a000ce6:	b943      	cbnz	r3, 1a000cfa <xQueueGenericCreateStatic+0x2e>
1a000ce8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000cec:	f383 8811 	msr	BASEPRI, r3
1a000cf0:	f3bf 8f6f 	isb	sy
1a000cf4:	f3bf 8f4f 	dsb	sy
1a000cf8:	e7fe      	b.n	1a000cf8 <xQueueGenericCreateStatic+0x2c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000cfa:	b112      	cbz	r2, 1a000d02 <xQueueGenericCreateStatic+0x36>
1a000cfc:	b119      	cbz	r1, 1a000d06 <xQueueGenericCreateStatic+0x3a>
1a000cfe:	2001      	movs	r0, #1
1a000d00:	e002      	b.n	1a000d08 <xQueueGenericCreateStatic+0x3c>
1a000d02:	2001      	movs	r0, #1
1a000d04:	e000      	b.n	1a000d08 <xQueueGenericCreateStatic+0x3c>
1a000d06:	2000      	movs	r0, #0
1a000d08:	b940      	cbnz	r0, 1a000d1c <xQueueGenericCreateStatic+0x50>
1a000d0a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d0e:	f383 8811 	msr	BASEPRI, r3
1a000d12:	f3bf 8f6f 	isb	sy
1a000d16:	f3bf 8f4f 	dsb	sy
1a000d1a:	e7fe      	b.n	1a000d1a <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000d1c:	b912      	cbnz	r2, 1a000d24 <xQueueGenericCreateStatic+0x58>
1a000d1e:	b919      	cbnz	r1, 1a000d28 <xQueueGenericCreateStatic+0x5c>
1a000d20:	2001      	movs	r0, #1
1a000d22:	e002      	b.n	1a000d2a <xQueueGenericCreateStatic+0x5e>
1a000d24:	2001      	movs	r0, #1
1a000d26:	e000      	b.n	1a000d2a <xQueueGenericCreateStatic+0x5e>
1a000d28:	2000      	movs	r0, #0
1a000d2a:	b940      	cbnz	r0, 1a000d3e <xQueueGenericCreateStatic+0x72>
1a000d2c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d30:	f383 8811 	msr	BASEPRI, r3
1a000d34:	f3bf 8f6f 	isb	sy
1a000d38:	f3bf 8f4f 	dsb	sy
1a000d3c:	e7fe      	b.n	1a000d3c <xQueueGenericCreateStatic+0x70>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000d3e:	2050      	movs	r0, #80	; 0x50
1a000d40:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000d42:	9803      	ldr	r0, [sp, #12]
1a000d44:	2850      	cmp	r0, #80	; 0x50
1a000d46:	d008      	beq.n	1a000d5a <xQueueGenericCreateStatic+0x8e>
1a000d48:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d4c:	f383 8811 	msr	BASEPRI, r3
1a000d50:	f3bf 8f6f 	isb	sy
1a000d54:	f3bf 8f4f 	dsb	sy
1a000d58:	e7fe      	b.n	1a000d58 <xQueueGenericCreateStatic+0x8c>
1a000d5a:	4620      	mov	r0, r4
1a000d5c:	461c      	mov	r4, r3
		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewQueue != NULL )
1a000d5e:	b13b      	cbz	r3, 1a000d70 <xQueueGenericCreateStatic+0xa4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000d60:	2301      	movs	r3, #1
1a000d62:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000d66:	9400      	str	r4, [sp, #0]
1a000d68:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000d6c:	f7ff ff9c 	bl	1a000ca8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
1a000d70:	4620      	mov	r0, r4
1a000d72:	b004      	add	sp, #16
1a000d74:	bd10      	pop	{r4, pc}
1a000d76:	bf00      	nop

1a000d78 <xQueueGenericCreate>:
	{
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000d78:	b940      	cbnz	r0, 1a000d8c <xQueueGenericCreate+0x14>
1a000d7a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d7e:	f383 8811 	msr	BASEPRI, r3
1a000d82:	f3bf 8f6f 	isb	sy
1a000d86:	f3bf 8f4f 	dsb	sy
1a000d8a:	e7fe      	b.n	1a000d8a <xQueueGenericCreate+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
1a000d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000d8e:	b083      	sub	sp, #12
1a000d90:	4603      	mov	r3, r0
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
1a000d92:	b111      	cbz	r1, 1a000d9a <xQueueGenericCreate+0x22>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000d94:	fb01 f000 	mul.w	r0, r1, r0
1a000d98:	e000      	b.n	1a000d9c <xQueueGenericCreate+0x24>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
1a000d9a:	2000      	movs	r0, #0
1a000d9c:	461e      	mov	r6, r3
1a000d9e:	4617      	mov	r7, r2
1a000da0:	460c      	mov	r4, r1
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000da2:	3050      	adds	r0, #80	; 0x50
1a000da4:	f7ff fe60 	bl	1a000a68 <pvPortMalloc>

		if( pxNewQueue != NULL )
1a000da8:	4605      	mov	r5, r0
1a000daa:	b150      	cbz	r0, 1a000dc2 <xQueueGenericCreate+0x4a>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000dac:	2300      	movs	r3, #0
1a000dae:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000db2:	9000      	str	r0, [sp, #0]
1a000db4:	4630      	mov	r0, r6
1a000db6:	4621      	mov	r1, r4
1a000db8:	f105 0250 	add.w	r2, r5, #80	; 0x50
1a000dbc:	463b      	mov	r3, r7
1a000dbe:	f7ff ff73 	bl	1a000ca8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
1a000dc2:	4628      	mov	r0, r5
1a000dc4:	b003      	add	sp, #12
1a000dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000dc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
1a000dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000dca:	b085      	sub	sp, #20
1a000dcc:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a000dce:	b940      	cbnz	r0, 1a000de2 <xQueueGenericSend+0x1a>
1a000dd0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dd4:	f383 8811 	msr	BASEPRI, r3
1a000dd8:	f3bf 8f6f 	isb	sy
1a000ddc:	f3bf 8f4f 	dsb	sy
1a000de0:	e7fe      	b.n	1a000de0 <xQueueGenericSend+0x18>
1a000de2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000de4:	b919      	cbnz	r1, 1a000dee <xQueueGenericSend+0x26>
1a000de6:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000de8:	b91a      	cbnz	r2, 1a000df2 <xQueueGenericSend+0x2a>
1a000dea:	2201      	movs	r2, #1
1a000dec:	e002      	b.n	1a000df4 <xQueueGenericSend+0x2c>
1a000dee:	2201      	movs	r2, #1
1a000df0:	e000      	b.n	1a000df4 <xQueueGenericSend+0x2c>
1a000df2:	2200      	movs	r2, #0
1a000df4:	b942      	cbnz	r2, 1a000e08 <xQueueGenericSend+0x40>
1a000df6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dfa:	f383 8811 	msr	BASEPRI, r3
1a000dfe:	f3bf 8f6f 	isb	sy
1a000e02:	f3bf 8f4f 	dsb	sy
1a000e06:	e7fe      	b.n	1a000e06 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000e08:	2b02      	cmp	r3, #2
1a000e0a:	d103      	bne.n	1a000e14 <xQueueGenericSend+0x4c>
1a000e0c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000e0e:	2a01      	cmp	r2, #1
1a000e10:	d102      	bne.n	1a000e18 <xQueueGenericSend+0x50>
1a000e12:	e002      	b.n	1a000e1a <xQueueGenericSend+0x52>
1a000e14:	2201      	movs	r2, #1
1a000e16:	e000      	b.n	1a000e1a <xQueueGenericSend+0x52>
1a000e18:	2200      	movs	r2, #0
1a000e1a:	b942      	cbnz	r2, 1a000e2e <xQueueGenericSend+0x66>
1a000e1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e20:	f383 8811 	msr	BASEPRI, r3
1a000e24:	f3bf 8f6f 	isb	sy
1a000e28:	f3bf 8f4f 	dsb	sy
1a000e2c:	e7fe      	b.n	1a000e2c <xQueueGenericSend+0x64>
1a000e2e:	461d      	mov	r5, r3
1a000e30:	460e      	mov	r6, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000e32:	f000 ff6b 	bl	1a001d0c <xTaskGetSchedulerState>
1a000e36:	b918      	cbnz	r0, 1a000e40 <xQueueGenericSend+0x78>
1a000e38:	9b01      	ldr	r3, [sp, #4]
1a000e3a:	b91b      	cbnz	r3, 1a000e44 <xQueueGenericSend+0x7c>
1a000e3c:	2301      	movs	r3, #1
1a000e3e:	e002      	b.n	1a000e46 <xQueueGenericSend+0x7e>
1a000e40:	2301      	movs	r3, #1
1a000e42:	e000      	b.n	1a000e46 <xQueueGenericSend+0x7e>
1a000e44:	2300      	movs	r3, #0
1a000e46:	b943      	cbnz	r3, 1a000e5a <xQueueGenericSend+0x92>
1a000e48:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e4c:	f383 8811 	msr	BASEPRI, r3
1a000e50:	f3bf 8f6f 	isb	sy
1a000e54:	f3bf 8f4f 	dsb	sy
1a000e58:	e7fe      	b.n	1a000e58 <xQueueGenericSend+0x90>
1a000e5a:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
1a000e5c:	f001 fa7a 	bl	1a002354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000e60:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000e62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000e64:	429a      	cmp	r2, r3
1a000e66:	d301      	bcc.n	1a000e6c <xQueueGenericSend+0xa4>
1a000e68:	2d02      	cmp	r5, #2
1a000e6a:	d121      	bne.n	1a000eb0 <xQueueGenericSend+0xe8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000e6c:	4620      	mov	r0, r4
1a000e6e:	4631      	mov	r1, r6
1a000e70:	462a      	mov	r2, r5
1a000e72:	f7ff fe55 	bl	1a000b20 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000e78:	b16b      	cbz	r3, 1a000e96 <xQueueGenericSend+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000e7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000e7e:	f000 fead 	bl	1a001bdc <xTaskRemoveFromEventList>
1a000e82:	b188      	cbz	r0, 1a000ea8 <xQueueGenericSend+0xe0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
1a000e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e88:	4b32      	ldr	r3, [pc, #200]	; (1a000f54 <xQueueGenericSend+0x18c>)
1a000e8a:	601a      	str	r2, [r3, #0]
1a000e8c:	f3bf 8f4f 	dsb	sy
1a000e90:	f3bf 8f6f 	isb	sy
1a000e94:	e008      	b.n	1a000ea8 <xQueueGenericSend+0xe0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
1a000e96:	b138      	cbz	r0, 1a000ea8 <xQueueGenericSend+0xe0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
1a000e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e9c:	4b2d      	ldr	r3, [pc, #180]	; (1a000f54 <xQueueGenericSend+0x18c>)
1a000e9e:	601a      	str	r2, [r3, #0]
1a000ea0:	f3bf 8f4f 	dsb	sy
1a000ea4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
1a000ea8:	f001 fa76 	bl	1a002398 <vPortExitCritical>
				return pdPASS;
1a000eac:	2001      	movs	r0, #1
1a000eae:	e04e      	b.n	1a000f4e <xQueueGenericSend+0x186>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1a000eb0:	9b01      	ldr	r3, [sp, #4]
1a000eb2:	b91b      	cbnz	r3, 1a000ebc <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
1a000eb4:	f001 fa70 	bl	1a002398 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
1a000eb8:	2000      	movs	r0, #0
1a000eba:	e048      	b.n	1a000f4e <xQueueGenericSend+0x186>
				}
				else if( xEntryTimeSet == pdFALSE )
1a000ebc:	b91f      	cbnz	r7, 1a000ec6 <xQueueGenericSend+0xfe>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000ebe:	a802      	add	r0, sp, #8
1a000ec0:	f000 fed2 	bl	1a001c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000ec4:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1a000ec6:	f001 fa67 	bl	1a002398 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
1a000eca:	f000 fc4f 	bl	1a00176c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000ece:	f001 fa41 	bl	1a002354 <vPortEnterCritical>
1a000ed2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000ed6:	b25b      	sxtb	r3, r3
1a000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000edc:	d102      	bne.n	1a000ee4 <xQueueGenericSend+0x11c>
1a000ede:	2300      	movs	r3, #0
1a000ee0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000ee4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000ee8:	b25b      	sxtb	r3, r3
1a000eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000eee:	d102      	bne.n	1a000ef6 <xQueueGenericSend+0x12e>
1a000ef0:	2300      	movs	r3, #0
1a000ef2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000ef6:	f001 fa4f 	bl	1a002398 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000efa:	a802      	add	r0, sp, #8
1a000efc:	a901      	add	r1, sp, #4
1a000efe:	f000 febf 	bl	1a001c80 <xTaskCheckForTimeOut>
1a000f02:	b9f0      	cbnz	r0, 1a000f42 <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000f04:	4620      	mov	r0, r4
1a000f06:	f7ff fded 	bl	1a000ae4 <prvIsQueueFull>
1a000f0a:	b1a0      	cbz	r0, 1a000f36 <xQueueGenericSend+0x16e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000f0c:	f104 0010 	add.w	r0, r4, #16
1a000f10:	9901      	ldr	r1, [sp, #4]
1a000f12:	f000 fe2f 	bl	1a001b74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
1a000f16:	4620      	mov	r0, r4
1a000f18:	f7ff fe50 	bl	1a000bbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
1a000f1c:	f000 fcce 	bl	1a0018bc <xTaskResumeAll>
1a000f20:	2800      	cmp	r0, #0
1a000f22:	d19b      	bne.n	1a000e5c <xQueueGenericSend+0x94>
				{
					portYIELD_WITHIN_API();
1a000f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f28:	4b0a      	ldr	r3, [pc, #40]	; (1a000f54 <xQueueGenericSend+0x18c>)
1a000f2a:	601a      	str	r2, [r3, #0]
1a000f2c:	f3bf 8f4f 	dsb	sy
1a000f30:	f3bf 8f6f 	isb	sy
1a000f34:	e792      	b.n	1a000e5c <xQueueGenericSend+0x94>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
1a000f36:	4620      	mov	r0, r4
1a000f38:	f7ff fe40 	bl	1a000bbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000f3c:	f000 fcbe 	bl	1a0018bc <xTaskResumeAll>
1a000f40:	e78c      	b.n	1a000e5c <xQueueGenericSend+0x94>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
1a000f42:	4620      	mov	r0, r4
1a000f44:	f7ff fe3a 	bl	1a000bbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000f48:	f000 fcb8 	bl	1a0018bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
1a000f4c:	2000      	movs	r0, #0
		}
	}
}
1a000f4e:	b005      	add	sp, #20
1a000f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000f52:	bf00      	nop
1a000f54:	e000ed04 	.word	0xe000ed04

1a000f58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
1a000f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a000f5c:	b940      	cbnz	r0, 1a000f70 <xQueueGenericSendFromISR+0x18>
1a000f5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f62:	f383 8811 	msr	BASEPRI, r3
1a000f66:	f3bf 8f6f 	isb	sy
1a000f6a:	f3bf 8f4f 	dsb	sy
1a000f6e:	e7fe      	b.n	1a000f6e <xQueueGenericSendFromISR+0x16>
1a000f70:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000f72:	b919      	cbnz	r1, 1a000f7c <xQueueGenericSendFromISR+0x24>
1a000f74:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000f76:	b918      	cbnz	r0, 1a000f80 <xQueueGenericSendFromISR+0x28>
1a000f78:	2001      	movs	r0, #1
1a000f7a:	e002      	b.n	1a000f82 <xQueueGenericSendFromISR+0x2a>
1a000f7c:	2001      	movs	r0, #1
1a000f7e:	e000      	b.n	1a000f82 <xQueueGenericSendFromISR+0x2a>
1a000f80:	2000      	movs	r0, #0
1a000f82:	b940      	cbnz	r0, 1a000f96 <xQueueGenericSendFromISR+0x3e>
1a000f84:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f88:	f383 8811 	msr	BASEPRI, r3
1a000f8c:	f3bf 8f6f 	isb	sy
1a000f90:	f3bf 8f4f 	dsb	sy
1a000f94:	e7fe      	b.n	1a000f94 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000f96:	2b02      	cmp	r3, #2
1a000f98:	d103      	bne.n	1a000fa2 <xQueueGenericSendFromISR+0x4a>
1a000f9a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000f9c:	2801      	cmp	r0, #1
1a000f9e:	d102      	bne.n	1a000fa6 <xQueueGenericSendFromISR+0x4e>
1a000fa0:	e002      	b.n	1a000fa8 <xQueueGenericSendFromISR+0x50>
1a000fa2:	2001      	movs	r0, #1
1a000fa4:	e000      	b.n	1a000fa8 <xQueueGenericSendFromISR+0x50>
1a000fa6:	2000      	movs	r0, #0
1a000fa8:	b940      	cbnz	r0, 1a000fbc <xQueueGenericSendFromISR+0x64>
1a000faa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fae:	f383 8811 	msr	BASEPRI, r3
1a000fb2:	f3bf 8f6f 	isb	sy
1a000fb6:	f3bf 8f4f 	dsb	sy
1a000fba:	e7fe      	b.n	1a000fba <xQueueGenericSendFromISR+0x62>
1a000fbc:	461f      	mov	r7, r3
1a000fbe:	4690      	mov	r8, r2
1a000fc0:	4689      	mov	r9, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000fc2:	f001 fafd 	bl	1a0025c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000fc6:	f3ef 8611 	mrs	r6, BASEPRI
1a000fca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fce:	f383 8811 	msr	BASEPRI, r3
1a000fd2:	f3bf 8f6f 	isb	sy
1a000fd6:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000fda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000fdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000fde:	429a      	cmp	r2, r3
1a000fe0:	d301      	bcc.n	1a000fe6 <xQueueGenericSendFromISR+0x8e>
1a000fe2:	2f02      	cmp	r7, #2
1a000fe4:	d11f      	bne.n	1a001026 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
1a000fe6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000fea:	b2ed      	uxtb	r5, r5
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000fec:	4620      	mov	r0, r4
1a000fee:	4649      	mov	r1, r9
1a000ff0:	463a      	mov	r2, r7
1a000ff2:	f7ff fd95 	bl	1a000b20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
1a000ff6:	b26b      	sxtb	r3, r5
1a000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000ffc:	d10d      	bne.n	1a00101a <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001000:	b19b      	cbz	r3, 1a00102a <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001002:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001006:	f000 fde9 	bl	1a001bdc <xTaskRemoveFromEventList>
1a00100a:	b180      	cbz	r0, 1a00102e <xQueueGenericSendFromISR+0xd6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
1a00100c:	f1b8 0f00 	cmp.w	r8, #0
1a001010:	d00f      	beq.n	1a001032 <xQueueGenericSendFromISR+0xda>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001012:	2001      	movs	r0, #1
1a001014:	f8c8 0000 	str.w	r0, [r8]
1a001018:	e00c      	b.n	1a001034 <xQueueGenericSendFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a00101a:	1c6b      	adds	r3, r5, #1
1a00101c:	b2db      	uxtb	r3, r3
1a00101e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
1a001022:	2001      	movs	r0, #1
1a001024:	e006      	b.n	1a001034 <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
1a001026:	2000      	movs	r0, #0
1a001028:	e004      	b.n	1a001034 <xQueueGenericSendFromISR+0xdc>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
1a00102a:	2001      	movs	r0, #1
1a00102c:	e002      	b.n	1a001034 <xQueueGenericSendFromISR+0xdc>
1a00102e:	2001      	movs	r0, #1
1a001030:	e000      	b.n	1a001034 <xQueueGenericSendFromISR+0xdc>
1a001032:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a001034:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
1a001038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a00103c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
1a00103c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00103e:	b085      	sub	sp, #20
1a001040:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
1a001042:	b940      	cbnz	r0, 1a001056 <xQueueReceive+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a001044:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001048:	f383 8811 	msr	BASEPRI, r3
1a00104c:	f3bf 8f6f 	isb	sy
1a001050:	f3bf 8f4f 	dsb	sy
1a001054:	e7fe      	b.n	1a001054 <xQueueReceive+0x18>
1a001056:	4604      	mov	r4, r0

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001058:	b919      	cbnz	r1, 1a001062 <xQueueReceive+0x26>
1a00105a:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a00105c:	b91b      	cbnz	r3, 1a001066 <xQueueReceive+0x2a>
1a00105e:	2301      	movs	r3, #1
1a001060:	e002      	b.n	1a001068 <xQueueReceive+0x2c>
1a001062:	2301      	movs	r3, #1
1a001064:	e000      	b.n	1a001068 <xQueueReceive+0x2c>
1a001066:	2300      	movs	r3, #0
1a001068:	b943      	cbnz	r3, 1a00107c <xQueueReceive+0x40>
1a00106a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00106e:	f383 8811 	msr	BASEPRI, r3
1a001072:	f3bf 8f6f 	isb	sy
1a001076:	f3bf 8f4f 	dsb	sy
1a00107a:	e7fe      	b.n	1a00107a <xQueueReceive+0x3e>
1a00107c:	460e      	mov	r6, r1

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00107e:	f000 fe45 	bl	1a001d0c <xTaskGetSchedulerState>
1a001082:	b918      	cbnz	r0, 1a00108c <xQueueReceive+0x50>
1a001084:	9b01      	ldr	r3, [sp, #4]
1a001086:	b91b      	cbnz	r3, 1a001090 <xQueueReceive+0x54>
1a001088:	2301      	movs	r3, #1
1a00108a:	e002      	b.n	1a001092 <xQueueReceive+0x56>
1a00108c:	2301      	movs	r3, #1
1a00108e:	e000      	b.n	1a001092 <xQueueReceive+0x56>
1a001090:	2300      	movs	r3, #0
1a001092:	b943      	cbnz	r3, 1a0010a6 <xQueueReceive+0x6a>
1a001094:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001098:	f383 8811 	msr	BASEPRI, r3
1a00109c:	f3bf 8f6f 	isb	sy
1a0010a0:	f3bf 8f4f 	dsb	sy
1a0010a4:	e7fe      	b.n	1a0010a4 <xQueueReceive+0x68>
1a0010a6:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
1a0010a8:	f001 f954 	bl	1a002354 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0010ac:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0010ae:	b1c5      	cbz	r5, 1a0010e2 <xQueueReceive+0xa6>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a0010b0:	4620      	mov	r0, r4
1a0010b2:	4631      	mov	r1, r6
1a0010b4:	f7ff fd70 	bl	1a000b98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a0010b8:	3d01      	subs	r5, #1
1a0010ba:	63a5      	str	r5, [r4, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0010bc:	6923      	ldr	r3, [r4, #16]
1a0010be:	b163      	cbz	r3, 1a0010da <xQueueReceive+0x9e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0010c0:	f104 0010 	add.w	r0, r4, #16
1a0010c4:	f000 fd8a 	bl	1a001bdc <xTaskRemoveFromEventList>
1a0010c8:	b138      	cbz	r0, 1a0010da <xQueueReceive+0x9e>
					{
						queueYIELD_IF_USING_PREEMPTION();
1a0010ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0010ce:	4b30      	ldr	r3, [pc, #192]	; (1a001190 <xQueueReceive+0x154>)
1a0010d0:	601a      	str	r2, [r3, #0]
1a0010d2:	f3bf 8f4f 	dsb	sy
1a0010d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
1a0010da:	f001 f95d 	bl	1a002398 <vPortExitCritical>
				return pdPASS;
1a0010de:	2001      	movs	r0, #1
1a0010e0:	e053      	b.n	1a00118a <xQueueReceive+0x14e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1a0010e2:	9b01      	ldr	r3, [sp, #4]
1a0010e4:	b91b      	cbnz	r3, 1a0010ee <xQueueReceive+0xb2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
1a0010e6:	f001 f957 	bl	1a002398 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
1a0010ea:	2000      	movs	r0, #0
1a0010ec:	e04d      	b.n	1a00118a <xQueueReceive+0x14e>
				}
				else if( xEntryTimeSet == pdFALSE )
1a0010ee:	b91f      	cbnz	r7, 1a0010f8 <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0010f0:	a802      	add	r0, sp, #8
1a0010f2:	f000 fdb9 	bl	1a001c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0010f6:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1a0010f8:	f001 f94e 	bl	1a002398 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
1a0010fc:	f000 fb36 	bl	1a00176c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001100:	f001 f928 	bl	1a002354 <vPortEnterCritical>
1a001104:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001108:	b25b      	sxtb	r3, r3
1a00110a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00110e:	d102      	bne.n	1a001116 <xQueueReceive+0xda>
1a001110:	2300      	movs	r3, #0
1a001112:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001116:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00111a:	b25b      	sxtb	r3, r3
1a00111c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001120:	d102      	bne.n	1a001128 <xQueueReceive+0xec>
1a001122:	2300      	movs	r3, #0
1a001124:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001128:	f001 f936 	bl	1a002398 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a00112c:	a802      	add	r0, sp, #8
1a00112e:	a901      	add	r1, sp, #4
1a001130:	f000 fda6 	bl	1a001c80 <xTaskCheckForTimeOut>
1a001134:	b9f0      	cbnz	r0, 1a001174 <xQueueReceive+0x138>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001136:	4620      	mov	r0, r4
1a001138:	f7ff fce4 	bl	1a000b04 <prvIsQueueEmpty>
1a00113c:	b1a0      	cbz	r0, 1a001168 <xQueueReceive+0x12c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a00113e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001142:	9901      	ldr	r1, [sp, #4]
1a001144:	f000 fd16 	bl	1a001b74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001148:	4620      	mov	r0, r4
1a00114a:	f7ff fd37 	bl	1a000bbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a00114e:	f000 fbb5 	bl	1a0018bc <xTaskResumeAll>
1a001152:	2800      	cmp	r0, #0
1a001154:	d1a8      	bne.n	1a0010a8 <xQueueReceive+0x6c>
				{
					portYIELD_WITHIN_API();
1a001156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00115a:	4b0d      	ldr	r3, [pc, #52]	; (1a001190 <xQueueReceive+0x154>)
1a00115c:	601a      	str	r2, [r3, #0]
1a00115e:	f3bf 8f4f 	dsb	sy
1a001162:	f3bf 8f6f 	isb	sy
1a001166:	e79f      	b.n	1a0010a8 <xQueueReceive+0x6c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
1a001168:	4620      	mov	r0, r4
1a00116a:	f7ff fd27 	bl	1a000bbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00116e:	f000 fba5 	bl	1a0018bc <xTaskResumeAll>
1a001172:	e799      	b.n	1a0010a8 <xQueueReceive+0x6c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
1a001174:	4620      	mov	r0, r4
1a001176:	f7ff fd21 	bl	1a000bbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a00117a:	f000 fb9f 	bl	1a0018bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00117e:	4620      	mov	r0, r4
1a001180:	f7ff fcc0 	bl	1a000b04 <prvIsQueueEmpty>
1a001184:	2800      	cmp	r0, #0
1a001186:	d08f      	beq.n	1a0010a8 <xQueueReceive+0x6c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
1a001188:	2000      	movs	r0, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
1a00118a:	b005      	add	sp, #20
1a00118c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00118e:	bf00      	nop
1a001190:	e000ed04 	.word	0xe000ed04

1a001194 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001194:	2300      	movs	r3, #0
1a001196:	e00b      	b.n	1a0011b0 <vQueueAddToRegistry+0x1c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001198:	4a07      	ldr	r2, [pc, #28]	; (1a0011b8 <vQueueAddToRegistry+0x24>)
1a00119a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a00119e:	b932      	cbnz	r2, 1a0011ae <vQueueAddToRegistry+0x1a>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a0011a0:	4a05      	ldr	r2, [pc, #20]	; (1a0011b8 <vQueueAddToRegistry+0x24>)
1a0011a2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a0011a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a0011aa:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a0011ac:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0011ae:	3301      	adds	r3, #1
1a0011b0:	2b07      	cmp	r3, #7
1a0011b2:	d9f1      	bls.n	1a001198 <vQueueAddToRegistry+0x4>
1a0011b4:	4770      	bx	lr
1a0011b6:	bf00      	nop
1a0011b8:	10002ba4 	.word	0x10002ba4

1a0011bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a0011bc:	b570      	push	{r4, r5, r6, lr}
1a0011be:	4604      	mov	r4, r0
1a0011c0:	460e      	mov	r6, r1
1a0011c2:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a0011c4:	f001 f8c6 	bl	1a002354 <vPortEnterCritical>
1a0011c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0011cc:	b25b      	sxtb	r3, r3
1a0011ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0011d2:	d102      	bne.n	1a0011da <vQueueWaitForMessageRestricted+0x1e>
1a0011d4:	2300      	movs	r3, #0
1a0011d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0011da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0011de:	b25b      	sxtb	r3, r3
1a0011e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0011e4:	d102      	bne.n	1a0011ec <vQueueWaitForMessageRestricted+0x30>
1a0011e6:	2300      	movs	r3, #0
1a0011e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0011ec:	f001 f8d4 	bl	1a002398 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a0011f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0011f2:	b92b      	cbnz	r3, 1a001200 <vQueueWaitForMessageRestricted+0x44>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a0011f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0011f8:	4631      	mov	r1, r6
1a0011fa:	462a      	mov	r2, r5
1a0011fc:	f000 fcd2 	bl	1a001ba4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001200:	4620      	mov	r0, r4
1a001202:	f7ff fcdb 	bl	1a000bbc <prvUnlockQueue>
1a001206:	bd70      	pop	{r4, r5, r6, pc}

1a001208 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001208:	f100 0308 	add.w	r3, r0, #8
1a00120c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a00120e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001212:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001214:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001216:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001218:	2300      	movs	r3, #0
1a00121a:	6003      	str	r3, [r0, #0]
1a00121c:	4770      	bx	lr
1a00121e:	bf00      	nop

1a001220 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001220:	2300      	movs	r3, #0
1a001222:	6103      	str	r3, [r0, #16]
1a001224:	4770      	bx	lr
1a001226:	bf00      	nop

1a001228 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001228:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a00122a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a00122c:	689a      	ldr	r2, [r3, #8]
1a00122e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a001230:	689a      	ldr	r2, [r3, #8]
1a001232:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001234:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001236:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001238:	6803      	ldr	r3, [r0, #0]
1a00123a:	3301      	adds	r3, #1
1a00123c:	6003      	str	r3, [r0, #0]
1a00123e:	4770      	bx	lr

1a001240 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001240:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001242:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001244:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001248:	d101      	bne.n	1a00124e <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
1a00124a:	6902      	ldr	r2, [r0, #16]
1a00124c:	e007      	b.n	1a00125e <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00124e:	f100 0208 	add.w	r2, r0, #8
1a001252:	e000      	b.n	1a001256 <vListInsert+0x16>
1a001254:	461a      	mov	r2, r3
1a001256:	6853      	ldr	r3, [r2, #4]
1a001258:	681c      	ldr	r4, [r3, #0]
1a00125a:	42ac      	cmp	r4, r5
1a00125c:	d9fa      	bls.n	1a001254 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a00125e:	6853      	ldr	r3, [r2, #4]
1a001260:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001262:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001264:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001266:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001268:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a00126a:	6803      	ldr	r3, [r0, #0]
1a00126c:	3301      	adds	r3, #1
1a00126e:	6003      	str	r3, [r0, #0]
}
1a001270:	bc30      	pop	{r4, r5}
1a001272:	4770      	bx	lr

1a001274 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001274:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001276:	6842      	ldr	r2, [r0, #4]
1a001278:	6881      	ldr	r1, [r0, #8]
1a00127a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a00127c:	6882      	ldr	r2, [r0, #8]
1a00127e:	6841      	ldr	r1, [r0, #4]
1a001280:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001282:	685a      	ldr	r2, [r3, #4]
1a001284:	4282      	cmp	r2, r0
1a001286:	d101      	bne.n	1a00128c <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001288:	6882      	ldr	r2, [r0, #8]
1a00128a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a00128c:	2200      	movs	r2, #0
1a00128e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a001290:	681a      	ldr	r2, [r3, #0]
1a001292:	3a01      	subs	r2, #1
1a001294:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001296:	6818      	ldr	r0, [r3, #0]
}
1a001298:	4770      	bx	lr
1a00129a:	bf00      	nop

1a00129c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a00129c:	4b03      	ldr	r3, [pc, #12]	; (1a0012ac <vApplicationGetIdleTaskMemory+0x10>)
1a00129e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a0012a0:	4b03      	ldr	r3, [pc, #12]	; (1a0012b0 <vApplicationGetIdleTaskMemory+0x14>)
1a0012a2:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a0012a4:	235a      	movs	r3, #90	; 0x5a
1a0012a6:	6013      	str	r3, [r2, #0]
1a0012a8:	4770      	bx	lr
1a0012aa:	bf00      	nop
1a0012ac:	1000227c 	.word	0x1000227c
1a0012b0:	10002114 	.word	0x10002114

1a0012b4 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a0012b4:	4b03      	ldr	r3, [pc, #12]	; (1a0012c4 <vApplicationGetTimerTaskMemory+0x10>)
1a0012b6:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a0012b8:	4b03      	ldr	r3, [pc, #12]	; (1a0012c8 <vApplicationGetTimerTaskMemory+0x14>)
1a0012ba:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a0012bc:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a0012c0:	6013      	str	r3, [r2, #0]
1a0012c2:	4770      	bx	lr
1a0012c4:	100022dc 	.word	0x100022dc
1a0012c8:	1000233c 	.word	0x1000233c

1a0012cc <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
    while(1)
        ;
1a0012cc:	e7fe      	b.n	1a0012cc <vApplicationStackOverflowHook>
1a0012ce:	bf00      	nop

1a0012d0 <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook( void )
{
    while(1)
        ;
1a0012d0:	e7fe      	b.n	1a0012d0 <vApplicationMallocFailedHook>
1a0012d2:	bf00      	nop

1a0012d4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0012d4:	4b0a      	ldr	r3, [pc, #40]	; (1a001300 <prvResetNextTaskUnblockTime+0x2c>)
1a0012d6:	681b      	ldr	r3, [r3, #0]
1a0012d8:	681b      	ldr	r3, [r3, #0]
1a0012da:	b90b      	cbnz	r3, 1a0012e0 <prvResetNextTaskUnblockTime+0xc>
1a0012dc:	2301      	movs	r3, #1
1a0012de:	e000      	b.n	1a0012e2 <prvResetNextTaskUnblockTime+0xe>
1a0012e0:	2300      	movs	r3, #0
1a0012e2:	b123      	cbz	r3, 1a0012ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a0012e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0012e8:	4b06      	ldr	r3, [pc, #24]	; (1a001304 <prvResetNextTaskUnblockTime+0x30>)
1a0012ea:	601a      	str	r2, [r3, #0]
1a0012ec:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0012ee:	4b04      	ldr	r3, [pc, #16]	; (1a001300 <prvResetNextTaskUnblockTime+0x2c>)
1a0012f0:	681b      	ldr	r3, [r3, #0]
1a0012f2:	68db      	ldr	r3, [r3, #12]
1a0012f4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a0012f6:	685a      	ldr	r2, [r3, #4]
1a0012f8:	4b02      	ldr	r3, [pc, #8]	; (1a001304 <prvResetNextTaskUnblockTime+0x30>)
1a0012fa:	601a      	str	r2, [r3, #0]
1a0012fc:	4770      	bx	lr
1a0012fe:	bf00      	nop
1a001300:	100028e0 	.word	0x100028e0
1a001304:	100029bc 	.word	0x100029bc

1a001308 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
1a001308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00130c:	4682      	mov	sl, r0
1a00130e:	460d      	mov	r5, r1
1a001310:	4617      	mov	r7, r2
1a001312:	4699      	mov	r9, r3
1a001314:	9e08      	ldr	r6, [sp, #32]
1a001316:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00131a:	9c0a      	ldr	r4, [sp, #40]	; 0x28

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a00131c:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a00131e:	21a5      	movs	r1, #165	; 0xa5
1a001320:	0092      	lsls	r2, r2, #2
1a001322:	f002 fe90 	bl	1a004046 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001326:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001328:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a00132c:	3a01      	subs	r2, #1
1a00132e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001332:	f027 0707 	bic.w	r7, r7, #7

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001336:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001338:	2300      	movs	r3, #0
1a00133a:	e006      	b.n	1a00134a <prvInitialiseNewTask+0x42>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a00133c:	5ce9      	ldrb	r1, [r5, r3]
1a00133e:	18e2      	adds	r2, r4, r3
1a001340:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
1a001344:	5cea      	ldrb	r2, [r5, r3]
1a001346:	b112      	cbz	r2, 1a00134e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001348:	3301      	adds	r3, #1
1a00134a:	2b0f      	cmp	r3, #15
1a00134c:	d9f6      	bls.n	1a00133c <prvInitialiseNewTask+0x34>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a00134e:	2300      	movs	r3, #0
1a001350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001354:	2e06      	cmp	r6, #6
1a001356:	d900      	bls.n	1a00135a <prvInitialiseNewTask+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001358:	2606      	movs	r6, #6
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
1a00135a:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
1a00135c:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a00135e:	2500      	movs	r5, #0
1a001360:	6565      	str	r5, [r4, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001362:	1d20      	adds	r0, r4, #4
1a001364:	f7ff ff5c 	bl	1a001220 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001368:	f104 0018 	add.w	r0, r4, #24
1a00136c:	f7ff ff58 	bl	1a001220 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001370:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001372:	f1c6 0607 	rsb	r6, r6, #7
1a001376:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001378:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
1a00137a:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a00137c:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001380:	4638      	mov	r0, r7
1a001382:	4651      	mov	r1, sl
1a001384:	464a      	mov	r2, r9
1a001386:	f000 ffb9 	bl	1a0022fc <pxPortInitialiseStack>
1a00138a:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
1a00138c:	f1b8 0f00 	cmp.w	r8, #0
1a001390:	d001      	beq.n	1a001396 <prvInitialiseNewTask+0x8e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001392:	f8c8 4000 	str.w	r4, [r8]
1a001396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00139a:	bf00      	nop

1a00139c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
1a00139c:	b538      	push	{r3, r4, r5, lr}
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00139e:	2400      	movs	r4, #0
1a0013a0:	e007      	b.n	1a0013b2 <prvInitialiseTaskLists+0x16>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a0013a2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0013a6:	009b      	lsls	r3, r3, #2
1a0013a8:	480e      	ldr	r0, [pc, #56]	; (1a0013e4 <prvInitialiseTaskLists+0x48>)
1a0013aa:	4418      	add	r0, r3
1a0013ac:	f7ff ff2c 	bl	1a001208 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0013b0:	3401      	adds	r4, #1
1a0013b2:	2c06      	cmp	r4, #6
1a0013b4:	d9f5      	bls.n	1a0013a2 <prvInitialiseTaskLists+0x6>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
1a0013b6:	4d0c      	ldr	r5, [pc, #48]	; (1a0013e8 <prvInitialiseTaskLists+0x4c>)
1a0013b8:	4628      	mov	r0, r5
1a0013ba:	f7ff ff25 	bl	1a001208 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a0013be:	4c0b      	ldr	r4, [pc, #44]	; (1a0013ec <prvInitialiseTaskLists+0x50>)
1a0013c0:	4620      	mov	r0, r4
1a0013c2:	f7ff ff21 	bl	1a001208 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a0013c6:	480a      	ldr	r0, [pc, #40]	; (1a0013f0 <prvInitialiseTaskLists+0x54>)
1a0013c8:	f7ff ff1e 	bl	1a001208 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
1a0013cc:	4809      	ldr	r0, [pc, #36]	; (1a0013f4 <prvInitialiseTaskLists+0x58>)
1a0013ce:	f7ff ff1b 	bl	1a001208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
1a0013d2:	4809      	ldr	r0, [pc, #36]	; (1a0013f8 <prvInitialiseTaskLists+0x5c>)
1a0013d4:	f7ff ff18 	bl	1a001208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
1a0013d8:	4b08      	ldr	r3, [pc, #32]	; (1a0013fc <prvInitialiseTaskLists+0x60>)
1a0013da:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a0013dc:	4b08      	ldr	r3, [pc, #32]	; (1a001400 <prvInitialiseTaskLists+0x64>)
1a0013de:	601c      	str	r4, [r3, #0]
1a0013e0:	bd38      	pop	{r3, r4, r5, pc}
1a0013e2:	bf00      	nop
1a0013e4:	10002904 	.word	0x10002904
1a0013e8:	100029c4 	.word	0x100029c4
1a0013ec:	100029d8 	.word	0x100029d8
1a0013f0:	100029a0 	.word	0x100029a0
1a0013f4:	100028e8 	.word	0x100028e8
1a0013f8:	100029ec 	.word	0x100029ec
1a0013fc:	100028e0 	.word	0x100028e0
1a001400:	100028fc 	.word	0x100028fc

1a001404 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
1a001404:	b510      	push	{r4, lr}
1a001406:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
1a001408:	f000 ffa4 	bl	1a002354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
1a00140c:	4a20      	ldr	r2, [pc, #128]	; (1a001490 <prvAddNewTaskToReadyList+0x8c>)
1a00140e:	6813      	ldr	r3, [r2, #0]
1a001410:	3301      	adds	r3, #1
1a001412:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001414:	4b1f      	ldr	r3, [pc, #124]	; (1a001494 <prvAddNewTaskToReadyList+0x90>)
1a001416:	681b      	ldr	r3, [r3, #0]
1a001418:	b93b      	cbnz	r3, 1a00142a <prvAddNewTaskToReadyList+0x26>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
1a00141a:	4b1e      	ldr	r3, [pc, #120]	; (1a001494 <prvAddNewTaskToReadyList+0x90>)
1a00141c:	601c      	str	r4, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00141e:	6813      	ldr	r3, [r2, #0]
1a001420:	2b01      	cmp	r3, #1
1a001422:	d10d      	bne.n	1a001440 <prvAddNewTaskToReadyList+0x3c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
1a001424:	f7ff ffba 	bl	1a00139c <prvInitialiseTaskLists>
1a001428:	e00a      	b.n	1a001440 <prvAddNewTaskToReadyList+0x3c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
1a00142a:	4b1b      	ldr	r3, [pc, #108]	; (1a001498 <prvAddNewTaskToReadyList+0x94>)
1a00142c:	681b      	ldr	r3, [r3, #0]
1a00142e:	b93b      	cbnz	r3, 1a001440 <prvAddNewTaskToReadyList+0x3c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001430:	4b18      	ldr	r3, [pc, #96]	; (1a001494 <prvAddNewTaskToReadyList+0x90>)
1a001432:	681b      	ldr	r3, [r3, #0]
1a001434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001436:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001438:	429a      	cmp	r2, r3
1a00143a:	d801      	bhi.n	1a001440 <prvAddNewTaskToReadyList+0x3c>
				{
					pxCurrentTCB = pxNewTCB;
1a00143c:	4b15      	ldr	r3, [pc, #84]	; (1a001494 <prvAddNewTaskToReadyList+0x90>)
1a00143e:	601c      	str	r4, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
1a001440:	4a16      	ldr	r2, [pc, #88]	; (1a00149c <prvAddNewTaskToReadyList+0x98>)
1a001442:	6813      	ldr	r3, [r2, #0]
1a001444:	3301      	adds	r3, #1
1a001446:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001448:	64a3      	str	r3, [r4, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
1a00144a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1a00144c:	2301      	movs	r3, #1
1a00144e:	4083      	lsls	r3, r0
1a001450:	4913      	ldr	r1, [pc, #76]	; (1a0014a0 <prvAddNewTaskToReadyList+0x9c>)
1a001452:	680a      	ldr	r2, [r1, #0]
1a001454:	4313      	orrs	r3, r2
1a001456:	600b      	str	r3, [r1, #0]
1a001458:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00145c:	0080      	lsls	r0, r0, #2
1a00145e:	4b11      	ldr	r3, [pc, #68]	; (1a0014a4 <prvAddNewTaskToReadyList+0xa0>)
1a001460:	4418      	add	r0, r3
1a001462:	1d21      	adds	r1, r4, #4
1a001464:	f7ff fee0 	bl	1a001228 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
1a001468:	f000 ff96 	bl	1a002398 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
1a00146c:	4b0a      	ldr	r3, [pc, #40]	; (1a001498 <prvAddNewTaskToReadyList+0x94>)
1a00146e:	681b      	ldr	r3, [r3, #0]
1a001470:	b16b      	cbz	r3, 1a00148e <prvAddNewTaskToReadyList+0x8a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001472:	4b08      	ldr	r3, [pc, #32]	; (1a001494 <prvAddNewTaskToReadyList+0x90>)
1a001474:	681b      	ldr	r3, [r3, #0]
1a001476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001478:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00147a:	429a      	cmp	r2, r3
1a00147c:	d207      	bcs.n	1a00148e <prvAddNewTaskToReadyList+0x8a>
		{
			taskYIELD_IF_USING_PREEMPTION();
1a00147e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001482:	4b09      	ldr	r3, [pc, #36]	; (1a0014a8 <prvAddNewTaskToReadyList+0xa4>)
1a001484:	601a      	str	r2, [r3, #0]
1a001486:	f3bf 8f4f 	dsb	sy
1a00148a:	f3bf 8f6f 	isb	sy
1a00148e:	bd10      	pop	{r4, pc}
1a001490:	10002998 	.word	0x10002998
1a001494:	1000299c 	.word	0x1000299c
1a001498:	100028e4 	.word	0x100028e4
1a00149c:	100029c0 	.word	0x100029c0
1a0014a0:	10002a00 	.word	0x10002a00
1a0014a4:	10002904 	.word	0x10002904
1a0014a8:	e000ed04 	.word	0xe000ed04

1a0014ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
1a0014ac:	b510      	push	{r4, lr}
1a0014ae:	4604      	mov	r4, r0
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a0014b0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a0014b4:	b933      	cbnz	r3, 1a0014c4 <prvDeleteTCB+0x18>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
1a0014b6:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0014b8:	f7ff fb08 	bl	1a000acc <vPortFree>
				vPortFree( pxTCB );
1a0014bc:	4620      	mov	r0, r4
1a0014be:	f7ff fb05 	bl	1a000acc <vPortFree>
1a0014c2:	bd10      	pop	{r4, pc}
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a0014c4:	2b01      	cmp	r3, #1
1a0014c6:	d102      	bne.n	1a0014ce <prvDeleteTCB+0x22>
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
1a0014c8:	f7ff fb00 	bl	1a000acc <vPortFree>
1a0014cc:	bd10      	pop	{r4, pc}
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a0014ce:	2b02      	cmp	r3, #2
1a0014d0:	d008      	beq.n	1a0014e4 <prvDeleteTCB+0x38>
1a0014d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014d6:	f383 8811 	msr	BASEPRI, r3
1a0014da:	f3bf 8f6f 	isb	sy
1a0014de:	f3bf 8f4f 	dsb	sy
1a0014e2:	e7fe      	b.n	1a0014e2 <prvDeleteTCB+0x36>
1a0014e4:	bd10      	pop	{r4, pc}
1a0014e6:	bf00      	nop

1a0014e8 <prvCheckTasksWaitingTermination>:
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
1a0014e8:	b510      	push	{r4, lr}
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0014ea:	e014      	b.n	1a001516 <prvCheckTasksWaitingTermination+0x2e>
		{
			taskENTER_CRITICAL();
1a0014ec:	f000 ff32 	bl	1a002354 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a0014f0:	4b0b      	ldr	r3, [pc, #44]	; (1a001520 <prvCheckTasksWaitingTermination+0x38>)
1a0014f2:	68db      	ldr	r3, [r3, #12]
1a0014f4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0014f6:	1d20      	adds	r0, r4, #4
1a0014f8:	f7ff febc 	bl	1a001274 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a0014fc:	4a09      	ldr	r2, [pc, #36]	; (1a001524 <prvCheckTasksWaitingTermination+0x3c>)
1a0014fe:	6813      	ldr	r3, [r2, #0]
1a001500:	3b01      	subs	r3, #1
1a001502:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001504:	4a08      	ldr	r2, [pc, #32]	; (1a001528 <prvCheckTasksWaitingTermination+0x40>)
1a001506:	6813      	ldr	r3, [r2, #0]
1a001508:	3b01      	subs	r3, #1
1a00150a:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
1a00150c:	f000 ff44 	bl	1a002398 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
1a001510:	4620      	mov	r0, r4
1a001512:	f7ff ffcb 	bl	1a0014ac <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001516:	4b04      	ldr	r3, [pc, #16]	; (1a001528 <prvCheckTasksWaitingTermination+0x40>)
1a001518:	681b      	ldr	r3, [r3, #0]
1a00151a:	2b00      	cmp	r3, #0
1a00151c:	d1e6      	bne.n	1a0014ec <prvCheckTasksWaitingTermination+0x4>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
1a00151e:	bd10      	pop	{r4, pc}
1a001520:	100028e8 	.word	0x100028e8
1a001524:	10002998 	.word	0x10002998
1a001528:	10002994 	.word	0x10002994

1a00152c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
1a00152c:	b508      	push	{r3, lr}

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
1a00152e:	f7ff ffdb 	bl	1a0014e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001532:	4b06      	ldr	r3, [pc, #24]	; (1a00154c <prvIdleTask+0x20>)
1a001534:	681b      	ldr	r3, [r3, #0]
1a001536:	2b01      	cmp	r3, #1
1a001538:	d9f9      	bls.n	1a00152e <prvIdleTask+0x2>
			{
				taskYIELD();
1a00153a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00153e:	4b04      	ldr	r3, [pc, #16]	; (1a001550 <prvIdleTask+0x24>)
1a001540:	601a      	str	r2, [r3, #0]
1a001542:	f3bf 8f4f 	dsb	sy
1a001546:	f3bf 8f6f 	isb	sy
1a00154a:	e7f0      	b.n	1a00152e <prvIdleTask+0x2>
1a00154c:	10002904 	.word	0x10002904
1a001550:	e000ed04 	.word	0xe000ed04

1a001554 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001554:	b570      	push	{r4, r5, r6, lr}
1a001556:	4604      	mov	r4, r0
1a001558:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a00155a:	4b1c      	ldr	r3, [pc, #112]	; (1a0015cc <prvAddCurrentTaskToDelayedList+0x78>)
1a00155c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00155e:	4b1c      	ldr	r3, [pc, #112]	; (1a0015d0 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001560:	6818      	ldr	r0, [r3, #0]
1a001562:	3004      	adds	r0, #4
1a001564:	f7ff fe86 	bl	1a001274 <uxListRemove>
1a001568:	b948      	cbnz	r0, 1a00157e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a00156a:	4b19      	ldr	r3, [pc, #100]	; (1a0015d0 <prvAddCurrentTaskToDelayedList+0x7c>)
1a00156c:	681b      	ldr	r3, [r3, #0]
1a00156e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001570:	2301      	movs	r3, #1
1a001572:	4093      	lsls	r3, r2
1a001574:	4917      	ldr	r1, [pc, #92]	; (1a0015d4 <prvAddCurrentTaskToDelayedList+0x80>)
1a001576:	680a      	ldr	r2, [r1, #0]
1a001578:	ea22 0303 	bic.w	r3, r2, r3
1a00157c:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00157e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001582:	d107      	bne.n	1a001594 <prvAddCurrentTaskToDelayedList+0x40>
1a001584:	b136      	cbz	r6, 1a001594 <prvAddCurrentTaskToDelayedList+0x40>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001586:	4b12      	ldr	r3, [pc, #72]	; (1a0015d0 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001588:	6819      	ldr	r1, [r3, #0]
1a00158a:	4813      	ldr	r0, [pc, #76]	; (1a0015d8 <prvAddCurrentTaskToDelayedList+0x84>)
1a00158c:	3104      	adds	r1, #4
1a00158e:	f7ff fe4b 	bl	1a001228 <vListInsertEnd>
1a001592:	bd70      	pop	{r4, r5, r6, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001594:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001596:	4b0e      	ldr	r3, [pc, #56]	; (1a0015d0 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001598:	681b      	ldr	r3, [r3, #0]
1a00159a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a00159c:	42ac      	cmp	r4, r5
1a00159e:	d207      	bcs.n	1a0015b0 <prvAddCurrentTaskToDelayedList+0x5c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0015a0:	4b0e      	ldr	r3, [pc, #56]	; (1a0015dc <prvAddCurrentTaskToDelayedList+0x88>)
1a0015a2:	6818      	ldr	r0, [r3, #0]
1a0015a4:	4b0a      	ldr	r3, [pc, #40]	; (1a0015d0 <prvAddCurrentTaskToDelayedList+0x7c>)
1a0015a6:	6819      	ldr	r1, [r3, #0]
1a0015a8:	3104      	adds	r1, #4
1a0015aa:	f7ff fe49 	bl	1a001240 <vListInsert>
1a0015ae:	bd70      	pop	{r4, r5, r6, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0015b0:	4b0b      	ldr	r3, [pc, #44]	; (1a0015e0 <prvAddCurrentTaskToDelayedList+0x8c>)
1a0015b2:	6818      	ldr	r0, [r3, #0]
1a0015b4:	4b06      	ldr	r3, [pc, #24]	; (1a0015d0 <prvAddCurrentTaskToDelayedList+0x7c>)
1a0015b6:	6819      	ldr	r1, [r3, #0]
1a0015b8:	3104      	adds	r1, #4
1a0015ba:	f7ff fe41 	bl	1a001240 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a0015be:	4b09      	ldr	r3, [pc, #36]	; (1a0015e4 <prvAddCurrentTaskToDelayedList+0x90>)
1a0015c0:	681b      	ldr	r3, [r3, #0]
1a0015c2:	429c      	cmp	r4, r3
1a0015c4:	d201      	bcs.n	1a0015ca <prvAddCurrentTaskToDelayedList+0x76>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a0015c6:	4b07      	ldr	r3, [pc, #28]	; (1a0015e4 <prvAddCurrentTaskToDelayedList+0x90>)
1a0015c8:	601c      	str	r4, [r3, #0]
1a0015ca:	bd70      	pop	{r4, r5, r6, pc}
1a0015cc:	100029b8 	.word	0x100029b8
1a0015d0:	1000299c 	.word	0x1000299c
1a0015d4:	10002a00 	.word	0x10002a00
1a0015d8:	100029ec 	.word	0x100029ec
1a0015dc:	100028fc 	.word	0x100028fc
1a0015e0:	100028e0 	.word	0x100028e0
1a0015e4:	100029bc 	.word	0x100029bc

1a0015e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
1a0015e8:	b570      	push	{r4, r5, r6, lr}
1a0015ea:	b086      	sub	sp, #24
1a0015ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0015ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
1a0015f0:	b945      	cbnz	r5, 1a001604 <xTaskCreateStatic+0x1c>
1a0015f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015f6:	f383 8811 	msr	BASEPRI, r3
1a0015fa:	f3bf 8f6f 	isb	sy
1a0015fe:	f3bf 8f4f 	dsb	sy
1a001602:	e7fe      	b.n	1a001602 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001604:	b944      	cbnz	r4, 1a001618 <xTaskCreateStatic+0x30>
1a001606:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00160a:	f383 8811 	msr	BASEPRI, r3
1a00160e:	f3bf 8f6f 	isb	sy
1a001612:	f3bf 8f4f 	dsb	sy
1a001616:	e7fe      	b.n	1a001616 <xTaskCreateStatic+0x2e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
1a001618:	2660      	movs	r6, #96	; 0x60
1a00161a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a00161c:	9e04      	ldr	r6, [sp, #16]
1a00161e:	2e60      	cmp	r6, #96	; 0x60
1a001620:	d008      	beq.n	1a001634 <xTaskCreateStatic+0x4c>
1a001622:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001626:	f383 8811 	msr	BASEPRI, r3
1a00162a:	f3bf 8f6f 	isb	sy
1a00162e:	f3bf 8f4f 	dsb	sy
1a001632:	e7fe      	b.n	1a001632 <xTaskCreateStatic+0x4a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
1a001634:	b18c      	cbz	r4, 1a00165a <xTaskCreateStatic+0x72>
1a001636:	b185      	cbz	r5, 1a00165a <xTaskCreateStatic+0x72>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001638:	6325      	str	r5, [r4, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a00163a:	2502      	movs	r5, #2
1a00163c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001640:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001642:	9500      	str	r5, [sp, #0]
1a001644:	ad05      	add	r5, sp, #20
1a001646:	9501      	str	r5, [sp, #4]
1a001648:	9402      	str	r4, [sp, #8]
1a00164a:	2500      	movs	r5, #0
1a00164c:	9503      	str	r5, [sp, #12]
1a00164e:	f7ff fe5b 	bl	1a001308 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001652:	4620      	mov	r0, r4
1a001654:	f7ff fed6 	bl	1a001404 <prvAddNewTaskToReadyList>
1a001658:	e001      	b.n	1a00165e <xTaskCreateStatic+0x76>
		}
		else
		{
			xReturn = NULL;
1a00165a:	2300      	movs	r3, #0
1a00165c:	9305      	str	r3, [sp, #20]
		}

		return xReturn;
	}
1a00165e:	9805      	ldr	r0, [sp, #20]
1a001660:	b006      	add	sp, #24
1a001662:	bd70      	pop	{r4, r5, r6, pc}

1a001664 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
1a001664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001668:	b085      	sub	sp, #20
1a00166a:	4680      	mov	r8, r0
1a00166c:	460f      	mov	r7, r1
1a00166e:	4615      	mov	r5, r2
1a001670:	461e      	mov	r6, r3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001672:	0090      	lsls	r0, r2, #2
1a001674:	f7ff f9f8 	bl	1a000a68 <pvPortMalloc>

			if( pxStack != NULL )
1a001678:	b160      	cbz	r0, 1a001694 <xTaskCreate+0x30>
1a00167a:	4681      	mov	r9, r0
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a00167c:	2060      	movs	r0, #96	; 0x60
1a00167e:	f7ff f9f3 	bl	1a000a68 <pvPortMalloc>

				if( pxNewTCB != NULL )
1a001682:	4604      	mov	r4, r0
1a001684:	b110      	cbz	r0, 1a00168c <xTaskCreate+0x28>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
1a001686:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
1a00168a:	e004      	b.n	1a001696 <xTaskCreate+0x32>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
1a00168c:	4648      	mov	r0, r9
1a00168e:	f7ff fa1d 	bl	1a000acc <vPortFree>
1a001692:	e000      	b.n	1a001696 <xTaskCreate+0x32>
				}
			}
			else
			{
				pxNewTCB = NULL;
1a001694:	2400      	movs	r4, #0
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
1a001696:	b19c      	cbz	r4, 1a0016c0 <xTaskCreate+0x5c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001698:	2300      	movs	r3, #0
1a00169a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00169e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0016a0:	9200      	str	r2, [sp, #0]
1a0016a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a0016a4:	9201      	str	r2, [sp, #4]
1a0016a6:	9402      	str	r4, [sp, #8]
1a0016a8:	9303      	str	r3, [sp, #12]
1a0016aa:	4640      	mov	r0, r8
1a0016ac:	4639      	mov	r1, r7
1a0016ae:	462a      	mov	r2, r5
1a0016b0:	4633      	mov	r3, r6
1a0016b2:	f7ff fe29 	bl	1a001308 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0016b6:	4620      	mov	r0, r4
1a0016b8:	f7ff fea4 	bl	1a001404 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a0016bc:	2001      	movs	r0, #1
1a0016be:	e001      	b.n	1a0016c4 <xTaskCreate+0x60>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0016c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}

		return xReturn;
	}
1a0016c4:	b005      	add	sp, #20
1a0016c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0016ca:	bf00      	nop

1a0016cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
1a0016cc:	b510      	push	{r4, lr}
1a0016ce:	b088      	sub	sp, #32
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a0016d0:	2400      	movs	r4, #0
1a0016d2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a0016d4:	9406      	str	r4, [sp, #24]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a0016d6:	a805      	add	r0, sp, #20
1a0016d8:	a906      	add	r1, sp, #24
1a0016da:	aa07      	add	r2, sp, #28
1a0016dc:	f7ff fdde 	bl	1a00129c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a0016e0:	9400      	str	r4, [sp, #0]
1a0016e2:	9b06      	ldr	r3, [sp, #24]
1a0016e4:	9301      	str	r3, [sp, #4]
1a0016e6:	9b05      	ldr	r3, [sp, #20]
1a0016e8:	9302      	str	r3, [sp, #8]
1a0016ea:	481a      	ldr	r0, [pc, #104]	; (1a001754 <vTaskStartScheduler+0x88>)
1a0016ec:	491a      	ldr	r1, [pc, #104]	; (1a001758 <vTaskStartScheduler+0x8c>)
1a0016ee:	9a07      	ldr	r2, [sp, #28]
1a0016f0:	4623      	mov	r3, r4
1a0016f2:	f7ff ff79 	bl	1a0015e8 <xTaskCreateStatic>
1a0016f6:	4b19      	ldr	r3, [pc, #100]	; (1a00175c <vTaskStartScheduler+0x90>)
1a0016f8:	6018      	str	r0, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
1a0016fa:	b108      	cbz	r0, 1a001700 <vTaskStartScheduler+0x34>
		{
			xReturn = pdPASS;
1a0016fc:	2001      	movs	r0, #1
1a0016fe:	e000      	b.n	1a001702 <vTaskStartScheduler+0x36>
		}
		else
		{
			xReturn = pdFAIL;
1a001700:	2000      	movs	r0, #0
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
1a001702:	2801      	cmp	r0, #1
1a001704:	d101      	bne.n	1a00170a <vTaskStartScheduler+0x3e>
		{
			xReturn = xTimerCreateTimerTask();
1a001706:	f000 fbf5 	bl	1a001ef4 <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
1a00170a:	2801      	cmp	r0, #1
1a00170c:	d114      	bne.n	1a001738 <vTaskStartScheduler+0x6c>
1a00170e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001712:	f383 8811 	msr	BASEPRI, r3
1a001716:	f3bf 8f6f 	isb	sy
1a00171a:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
1a00171e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001722:	4b0f      	ldr	r3, [pc, #60]	; (1a001760 <vTaskStartScheduler+0x94>)
1a001724:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001726:	2201      	movs	r2, #1
1a001728:	4b0e      	ldr	r3, [pc, #56]	; (1a001764 <vTaskStartScheduler+0x98>)
1a00172a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a00172c:	2200      	movs	r2, #0
1a00172e:	4b0e      	ldr	r3, [pc, #56]	; (1a001768 <vTaskStartScheduler+0x9c>)
1a001730:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
1a001732:	f000 feb1 	bl	1a002498 <xPortStartScheduler>
1a001736:	e00b      	b.n	1a001750 <vTaskStartScheduler+0x84>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001738:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00173c:	d108      	bne.n	1a001750 <vTaskStartScheduler+0x84>
1a00173e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001742:	f383 8811 	msr	BASEPRI, r3
1a001746:	f3bf 8f6f 	isb	sy
1a00174a:	f3bf 8f4f 	dsb	sy
1a00174e:	e7fe      	b.n	1a00174e <vTaskStartScheduler+0x82>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
1a001750:	b008      	add	sp, #32
1a001752:	bd10      	pop	{r4, pc}
1a001754:	1a00152d 	.word	0x1a00152d
1a001758:	1a0040a4 	.word	0x1a0040a4
1a00175c:	100029b4 	.word	0x100029b4
1a001760:	100029bc 	.word	0x100029bc
1a001764:	100028e4 	.word	0x100028e4
1a001768:	100029b8 	.word	0x100029b8

1a00176c <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
1a00176c:	4a02      	ldr	r2, [pc, #8]	; (1a001778 <vTaskSuspendAll+0xc>)
1a00176e:	6813      	ldr	r3, [r2, #0]
1a001770:	3301      	adds	r3, #1
1a001772:	6013      	str	r3, [r2, #0]
1a001774:	4770      	bx	lr
1a001776:	bf00      	nop
1a001778:	10002990 	.word	0x10002990

1a00177c <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
1a00177c:	4b01      	ldr	r3, [pc, #4]	; (1a001784 <xTaskGetTickCount+0x8>)
1a00177e:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
1a001780:	4770      	bx	lr
1a001782:	bf00      	nop
1a001784:	100029b8 	.word	0x100029b8

1a001788 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
1a001788:	b508      	push	{r3, lr}
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a00178a:	f000 ff19 	bl	1a0025c0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
1a00178e:	4b01      	ldr	r3, [pc, #4]	; (1a001794 <xTaskGetTickCountFromISR+0xc>)
1a001790:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
1a001792:	bd08      	pop	{r3, pc}
1a001794:	100029b8 	.word	0x100029b8

1a001798 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
1a001798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00179a:	4b3d      	ldr	r3, [pc, #244]	; (1a001890 <xTaskIncrementTick+0xf8>)
1a00179c:	681b      	ldr	r3, [r3, #0]
1a00179e:	2b00      	cmp	r3, #0
1a0017a0:	d169      	bne.n	1a001876 <xTaskIncrementTick+0xde>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a0017a2:	4b3c      	ldr	r3, [pc, #240]	; (1a001894 <xTaskIncrementTick+0xfc>)
1a0017a4:	681d      	ldr	r5, [r3, #0]
1a0017a6:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
1a0017a8:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a0017aa:	b9c5      	cbnz	r5, 1a0017de <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
1a0017ac:	4b3a      	ldr	r3, [pc, #232]	; (1a001898 <xTaskIncrementTick+0x100>)
1a0017ae:	681b      	ldr	r3, [r3, #0]
1a0017b0:	681b      	ldr	r3, [r3, #0]
1a0017b2:	b143      	cbz	r3, 1a0017c6 <xTaskIncrementTick+0x2e>
1a0017b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017b8:	f383 8811 	msr	BASEPRI, r3
1a0017bc:	f3bf 8f6f 	isb	sy
1a0017c0:	f3bf 8f4f 	dsb	sy
1a0017c4:	e7fe      	b.n	1a0017c4 <xTaskIncrementTick+0x2c>
1a0017c6:	4a34      	ldr	r2, [pc, #208]	; (1a001898 <xTaskIncrementTick+0x100>)
1a0017c8:	6811      	ldr	r1, [r2, #0]
1a0017ca:	4b34      	ldr	r3, [pc, #208]	; (1a00189c <xTaskIncrementTick+0x104>)
1a0017cc:	6818      	ldr	r0, [r3, #0]
1a0017ce:	6010      	str	r0, [r2, #0]
1a0017d0:	6019      	str	r1, [r3, #0]
1a0017d2:	4a33      	ldr	r2, [pc, #204]	; (1a0018a0 <xTaskIncrementTick+0x108>)
1a0017d4:	6813      	ldr	r3, [r2, #0]
1a0017d6:	3301      	adds	r3, #1
1a0017d8:	6013      	str	r3, [r2, #0]
1a0017da:	f7ff fd7b 	bl	1a0012d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
1a0017de:	4b31      	ldr	r3, [pc, #196]	; (1a0018a4 <xTaskIncrementTick+0x10c>)
1a0017e0:	681b      	ldr	r3, [r3, #0]
1a0017e2:	429d      	cmp	r5, r3
1a0017e4:	d203      	bcs.n	1a0017ee <xTaskIncrementTick+0x56>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
1a0017e6:	2400      	movs	r4, #0
1a0017e8:	e03a      	b.n	1a001860 <xTaskIncrementTick+0xc8>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
1a0017ea:	2401      	movs	r4, #1
1a0017ec:	e000      	b.n	1a0017f0 <xTaskIncrementTick+0x58>
1a0017ee:	2400      	movs	r4, #0
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0017f0:	4b29      	ldr	r3, [pc, #164]	; (1a001898 <xTaskIncrementTick+0x100>)
1a0017f2:	681b      	ldr	r3, [r3, #0]
1a0017f4:	681b      	ldr	r3, [r3, #0]
1a0017f6:	b90b      	cbnz	r3, 1a0017fc <xTaskIncrementTick+0x64>
1a0017f8:	2301      	movs	r3, #1
1a0017fa:	e000      	b.n	1a0017fe <xTaskIncrementTick+0x66>
1a0017fc:	2300      	movs	r3, #0
1a0017fe:	b123      	cbz	r3, 1a00180a <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001804:	4b27      	ldr	r3, [pc, #156]	; (1a0018a4 <xTaskIncrementTick+0x10c>)
1a001806:	601a      	str	r2, [r3, #0]
					break;
1a001808:	e02a      	b.n	1a001860 <xTaskIncrementTick+0xc8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00180a:	4b23      	ldr	r3, [pc, #140]	; (1a001898 <xTaskIncrementTick+0x100>)
1a00180c:	681b      	ldr	r3, [r3, #0]
1a00180e:	68db      	ldr	r3, [r3, #12]
1a001810:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001812:	6873      	ldr	r3, [r6, #4]

					if( xConstTickCount < xItemValue )
1a001814:	429d      	cmp	r5, r3
1a001816:	d202      	bcs.n	1a00181e <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
1a001818:	4a22      	ldr	r2, [pc, #136]	; (1a0018a4 <xTaskIncrementTick+0x10c>)
1a00181a:	6013      	str	r3, [r2, #0]
						break;
1a00181c:	e020      	b.n	1a001860 <xTaskIncrementTick+0xc8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00181e:	1d37      	adds	r7, r6, #4
1a001820:	4638      	mov	r0, r7
1a001822:	f7ff fd27 	bl	1a001274 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001826:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001828:	b11b      	cbz	r3, 1a001832 <xTaskIncrementTick+0x9a>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00182a:	f106 0018 	add.w	r0, r6, #24
1a00182e:	f7ff fd21 	bl	1a001274 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
1a001832:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001834:	2201      	movs	r2, #1
1a001836:	fa02 f103 	lsl.w	r1, r2, r3
1a00183a:	481b      	ldr	r0, [pc, #108]	; (1a0018a8 <xTaskIncrementTick+0x110>)
1a00183c:	6802      	ldr	r2, [r0, #0]
1a00183e:	430a      	orrs	r2, r1
1a001840:	6002      	str	r2, [r0, #0]
1a001842:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001846:	009b      	lsls	r3, r3, #2
1a001848:	4818      	ldr	r0, [pc, #96]	; (1a0018ac <xTaskIncrementTick+0x114>)
1a00184a:	4418      	add	r0, r3
1a00184c:	4639      	mov	r1, r7
1a00184e:	f7ff fceb 	bl	1a001228 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001852:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001854:	4b16      	ldr	r3, [pc, #88]	; (1a0018b0 <xTaskIncrementTick+0x118>)
1a001856:	681b      	ldr	r3, [r3, #0]
1a001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00185a:	429a      	cmp	r2, r3
1a00185c:	d2c5      	bcs.n	1a0017ea <xTaskIncrementTick+0x52>
1a00185e:	e7c7      	b.n	1a0017f0 <xTaskIncrementTick+0x58>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001860:	4b13      	ldr	r3, [pc, #76]	; (1a0018b0 <xTaskIncrementTick+0x118>)
1a001862:	681b      	ldr	r3, [r3, #0]
1a001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001866:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00186a:	009b      	lsls	r3, r3, #2
1a00186c:	4a0f      	ldr	r2, [pc, #60]	; (1a0018ac <xTaskIncrementTick+0x114>)
1a00186e:	58d3      	ldr	r3, [r2, r3]
1a001870:	2b01      	cmp	r3, #1
1a001872:	d806      	bhi.n	1a001882 <xTaskIncrementTick+0xea>
1a001874:	e006      	b.n	1a001884 <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
1a001876:	4a0f      	ldr	r2, [pc, #60]	; (1a0018b4 <xTaskIncrementTick+0x11c>)
1a001878:	6813      	ldr	r3, [r2, #0]
1a00187a:	3301      	adds	r3, #1
1a00187c:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
1a00187e:	2400      	movs	r4, #0
1a001880:	e000      	b.n	1a001884 <xTaskIncrementTick+0xec>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
1a001882:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
1a001884:	4b0c      	ldr	r3, [pc, #48]	; (1a0018b8 <xTaskIncrementTick+0x120>)
1a001886:	681b      	ldr	r3, [r3, #0]
1a001888:	b103      	cbz	r3, 1a00188c <xTaskIncrementTick+0xf4>
		{
			xSwitchRequired = pdTRUE;
1a00188a:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
1a00188c:	4620      	mov	r0, r4
1a00188e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001890:	10002990 	.word	0x10002990
1a001894:	100029b8 	.word	0x100029b8
1a001898:	100028e0 	.word	0x100028e0
1a00189c:	100028fc 	.word	0x100028fc
1a0018a0:	100028dc 	.word	0x100028dc
1a0018a4:	100029bc 	.word	0x100029bc
1a0018a8:	10002a00 	.word	0x10002a00
1a0018ac:	10002904 	.word	0x10002904
1a0018b0:	1000299c 	.word	0x1000299c
1a0018b4:	10002900 	.word	0x10002900
1a0018b8:	10002a04 	.word	0x10002a04

1a0018bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
1a0018bc:	b538      	push	{r3, r4, r5, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
1a0018be:	4b34      	ldr	r3, [pc, #208]	; (1a001990 <xTaskResumeAll+0xd4>)
1a0018c0:	681b      	ldr	r3, [r3, #0]
1a0018c2:	b943      	cbnz	r3, 1a0018d6 <xTaskResumeAll+0x1a>
1a0018c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018c8:	f383 8811 	msr	BASEPRI, r3
1a0018cc:	f3bf 8f6f 	isb	sy
1a0018d0:	f3bf 8f4f 	dsb	sy
1a0018d4:	e7fe      	b.n	1a0018d4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
1a0018d6:	f000 fd3d 	bl	1a002354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
1a0018da:	4b2d      	ldr	r3, [pc, #180]	; (1a001990 <xTaskResumeAll+0xd4>)
1a0018dc:	681a      	ldr	r2, [r3, #0]
1a0018de:	3a01      	subs	r2, #1
1a0018e0:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0018e2:	681b      	ldr	r3, [r3, #0]
1a0018e4:	2b00      	cmp	r3, #0
1a0018e6:	d14c      	bne.n	1a001982 <xTaskResumeAll+0xc6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a0018e8:	4b2a      	ldr	r3, [pc, #168]	; (1a001994 <xTaskResumeAll+0xd8>)
1a0018ea:	681b      	ldr	r3, [r3, #0]
1a0018ec:	bb33      	cbnz	r3, 1a00193c <xTaskResumeAll+0x80>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
1a0018ee:	2400      	movs	r4, #0
1a0018f0:	e04a      	b.n	1a001988 <xTaskResumeAll+0xcc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a0018f2:	4b29      	ldr	r3, [pc, #164]	; (1a001998 <xTaskResumeAll+0xdc>)
1a0018f4:	68db      	ldr	r3, [r3, #12]
1a0018f6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0018f8:	f104 0018 	add.w	r0, r4, #24
1a0018fc:	f7ff fcba 	bl	1a001274 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001900:	1d25      	adds	r5, r4, #4
1a001902:	4628      	mov	r0, r5
1a001904:	f7ff fcb6 	bl	1a001274 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001908:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00190a:	2201      	movs	r2, #1
1a00190c:	fa02 f103 	lsl.w	r1, r2, r3
1a001910:	4822      	ldr	r0, [pc, #136]	; (1a00199c <xTaskResumeAll+0xe0>)
1a001912:	6802      	ldr	r2, [r0, #0]
1a001914:	430a      	orrs	r2, r1
1a001916:	6002      	str	r2, [r0, #0]
1a001918:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00191c:	009b      	lsls	r3, r3, #2
1a00191e:	4820      	ldr	r0, [pc, #128]	; (1a0019a0 <xTaskResumeAll+0xe4>)
1a001920:	4418      	add	r0, r3
1a001922:	4629      	mov	r1, r5
1a001924:	f7ff fc80 	bl	1a001228 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001928:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00192a:	4b1e      	ldr	r3, [pc, #120]	; (1a0019a4 <xTaskResumeAll+0xe8>)
1a00192c:	681b      	ldr	r3, [r3, #0]
1a00192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001930:	429a      	cmp	r2, r3
1a001932:	d304      	bcc.n	1a00193e <xTaskResumeAll+0x82>
					{
						xYieldPending = pdTRUE;
1a001934:	2201      	movs	r2, #1
1a001936:	4b1c      	ldr	r3, [pc, #112]	; (1a0019a8 <xTaskResumeAll+0xec>)
1a001938:	601a      	str	r2, [r3, #0]
1a00193a:	e000      	b.n	1a00193e <xTaskResumeAll+0x82>
1a00193c:	2400      	movs	r4, #0
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a00193e:	4b16      	ldr	r3, [pc, #88]	; (1a001998 <xTaskResumeAll+0xdc>)
1a001940:	681b      	ldr	r3, [r3, #0]
1a001942:	2b00      	cmp	r3, #0
1a001944:	d1d5      	bne.n	1a0018f2 <xTaskResumeAll+0x36>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
1a001946:	b10c      	cbz	r4, 1a00194c <xTaskResumeAll+0x90>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
1a001948:	f7ff fcc4 	bl	1a0012d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a00194c:	4b17      	ldr	r3, [pc, #92]	; (1a0019ac <xTaskResumeAll+0xf0>)
1a00194e:	681c      	ldr	r4, [r3, #0]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001950:	b154      	cbz	r4, 1a001968 <xTaskResumeAll+0xac>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
1a001952:	f7ff ff21 	bl	1a001798 <xTaskIncrementTick>
1a001956:	b110      	cbz	r0, 1a00195e <xTaskResumeAll+0xa2>
							{
								xYieldPending = pdTRUE;
1a001958:	2201      	movs	r2, #1
1a00195a:	4b13      	ldr	r3, [pc, #76]	; (1a0019a8 <xTaskResumeAll+0xec>)
1a00195c:	601a      	str	r2, [r3, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a00195e:	3c01      	subs	r4, #1
1a001960:	d1f7      	bne.n	1a001952 <xTaskResumeAll+0x96>

						uxPendedTicks = 0;
1a001962:	2200      	movs	r2, #0
1a001964:	4b11      	ldr	r3, [pc, #68]	; (1a0019ac <xTaskResumeAll+0xf0>)
1a001966:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
1a001968:	4b0f      	ldr	r3, [pc, #60]	; (1a0019a8 <xTaskResumeAll+0xec>)
1a00196a:	681b      	ldr	r3, [r3, #0]
1a00196c:	b15b      	cbz	r3, 1a001986 <xTaskResumeAll+0xca>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
1a00196e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001972:	4b0f      	ldr	r3, [pc, #60]	; (1a0019b0 <xTaskResumeAll+0xf4>)
1a001974:	601a      	str	r2, [r3, #0]
1a001976:	f3bf 8f4f 	dsb	sy
1a00197a:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
1a00197e:	2401      	movs	r4, #1
1a001980:	e002      	b.n	1a001988 <xTaskResumeAll+0xcc>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
1a001982:	2400      	movs	r4, #0
1a001984:	e000      	b.n	1a001988 <xTaskResumeAll+0xcc>
1a001986:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001988:	f000 fd06 	bl	1a002398 <vPortExitCritical>

	return xAlreadyYielded;
}
1a00198c:	4620      	mov	r0, r4
1a00198e:	bd38      	pop	{r3, r4, r5, pc}
1a001990:	10002990 	.word	0x10002990
1a001994:	10002998 	.word	0x10002998
1a001998:	100029a0 	.word	0x100029a0
1a00199c:	10002a00 	.word	0x10002a00
1a0019a0:	10002904 	.word	0x10002904
1a0019a4:	1000299c 	.word	0x1000299c
1a0019a8:	10002a04 	.word	0x10002a04
1a0019ac:	10002900 	.word	0x10002900
1a0019b0:	e000ed04 	.word	0xe000ed04

1a0019b4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
1a0019b4:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
1a0019b6:	b940      	cbnz	r0, 1a0019ca <vTaskDelayUntil+0x16>
1a0019b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019bc:	f383 8811 	msr	BASEPRI, r3
1a0019c0:	f3bf 8f6f 	isb	sy
1a0019c4:	f3bf 8f4f 	dsb	sy
1a0019c8:	e7fe      	b.n	1a0019c8 <vTaskDelayUntil+0x14>
1a0019ca:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a0019cc:	b941      	cbnz	r1, 1a0019e0 <vTaskDelayUntil+0x2c>
1a0019ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019d2:	f383 8811 	msr	BASEPRI, r3
1a0019d6:	f3bf 8f6f 	isb	sy
1a0019da:	f3bf 8f4f 	dsb	sy
1a0019de:	e7fe      	b.n	1a0019de <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a0019e0:	4b1c      	ldr	r3, [pc, #112]	; (1a001a54 <vTaskDelayUntil+0xa0>)
1a0019e2:	681b      	ldr	r3, [r3, #0]
1a0019e4:	b143      	cbz	r3, 1a0019f8 <vTaskDelayUntil+0x44>
1a0019e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019ea:	f383 8811 	msr	BASEPRI, r3
1a0019ee:	f3bf 8f6f 	isb	sy
1a0019f2:	f3bf 8f4f 	dsb	sy
1a0019f6:	e7fe      	b.n	1a0019f6 <vTaskDelayUntil+0x42>
1a0019f8:	460c      	mov	r4, r1

		vTaskSuspendAll();
1a0019fa:	f7ff feb7 	bl	1a00176c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
1a0019fe:	4b16      	ldr	r3, [pc, #88]	; (1a001a58 <vTaskDelayUntil+0xa4>)
1a001a00:	6818      	ldr	r0, [r3, #0]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a001a02:	682a      	ldr	r2, [r5, #0]
1a001a04:	1913      	adds	r3, r2, r4

			if( xConstTickCount < *pxPreviousWakeTime )
1a001a06:	4290      	cmp	r0, r2
1a001a08:	d205      	bcs.n	1a001a16 <vTaskDelayUntil+0x62>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001a0a:	429a      	cmp	r2, r3
1a001a0c:	d909      	bls.n	1a001a22 <vTaskDelayUntil+0x6e>
1a001a0e:	4283      	cmp	r3, r0
1a001a10:	d809      	bhi.n	1a001a26 <vTaskDelayUntil+0x72>
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1a001a12:	2200      	movs	r2, #0
1a001a14:	e00c      	b.n	1a001a30 <vTaskDelayUntil+0x7c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a001a16:	429a      	cmp	r2, r3
1a001a18:	d807      	bhi.n	1a001a2a <vTaskDelayUntil+0x76>
1a001a1a:	4283      	cmp	r3, r0
1a001a1c:	d807      	bhi.n	1a001a2e <vTaskDelayUntil+0x7a>
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1a001a1e:	2200      	movs	r2, #0
1a001a20:	e006      	b.n	1a001a30 <vTaskDelayUntil+0x7c>
1a001a22:	2200      	movs	r2, #0
1a001a24:	e004      	b.n	1a001a30 <vTaskDelayUntil+0x7c>
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
				{
					xShouldDelay = pdTRUE;
1a001a26:	2201      	movs	r2, #1
1a001a28:	e002      	b.n	1a001a30 <vTaskDelayUntil+0x7c>
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
				{
					xShouldDelay = pdTRUE;
1a001a2a:	2201      	movs	r2, #1
1a001a2c:	e000      	b.n	1a001a30 <vTaskDelayUntil+0x7c>
1a001a2e:	2201      	movs	r2, #1
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
1a001a30:	602b      	str	r3, [r5, #0]

			if( xShouldDelay != pdFALSE )
1a001a32:	b11a      	cbz	r2, 1a001a3c <vTaskDelayUntil+0x88>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a001a34:	1a18      	subs	r0, r3, r0
1a001a36:	2100      	movs	r1, #0
1a001a38:	f7ff fd8c 	bl	1a001554 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
1a001a3c:	f7ff ff3e 	bl	1a0018bc <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
1a001a40:	b938      	cbnz	r0, 1a001a52 <vTaskDelayUntil+0x9e>
		{
			portYIELD_WITHIN_API();
1a001a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001a46:	4b05      	ldr	r3, [pc, #20]	; (1a001a5c <vTaskDelayUntil+0xa8>)
1a001a48:	601a      	str	r2, [r3, #0]
1a001a4a:	f3bf 8f4f 	dsb	sy
1a001a4e:	f3bf 8f6f 	isb	sy
1a001a52:	bd38      	pop	{r3, r4, r5, pc}
1a001a54:	10002990 	.word	0x10002990
1a001a58:	100029b8 	.word	0x100029b8
1a001a5c:	e000ed04 	.word	0xe000ed04

1a001a60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
1a001a60:	b510      	push	{r4, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
1a001a62:	b1a8      	cbz	r0, 1a001a90 <vTaskDelay+0x30>
1a001a64:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
1a001a66:	4b10      	ldr	r3, [pc, #64]	; (1a001aa8 <vTaskDelay+0x48>)
1a001a68:	681b      	ldr	r3, [r3, #0]
1a001a6a:	b143      	cbz	r3, 1a001a7e <vTaskDelay+0x1e>
1a001a6c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a70:	f383 8811 	msr	BASEPRI, r3
1a001a74:	f3bf 8f6f 	isb	sy
1a001a78:	f3bf 8f4f 	dsb	sy
1a001a7c:	e7fe      	b.n	1a001a7c <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a001a7e:	f7ff fe75 	bl	1a00176c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a001a82:	4620      	mov	r0, r4
1a001a84:	2100      	movs	r1, #0
1a001a86:	f7ff fd65 	bl	1a001554 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
1a001a8a:	f7ff ff17 	bl	1a0018bc <xTaskResumeAll>
1a001a8e:	e000      	b.n	1a001a92 <vTaskDelay+0x32>

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
	BaseType_t xAlreadyYielded = pdFALSE;
1a001a90:	2000      	movs	r0, #0
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
1a001a92:	b938      	cbnz	r0, 1a001aa4 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
1a001a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001a98:	4b04      	ldr	r3, [pc, #16]	; (1a001aac <vTaskDelay+0x4c>)
1a001a9a:	601a      	str	r2, [r3, #0]
1a001a9c:	f3bf 8f4f 	dsb	sy
1a001aa0:	f3bf 8f6f 	isb	sy
1a001aa4:	bd10      	pop	{r4, pc}
1a001aa6:	bf00      	nop
1a001aa8:	10002990 	.word	0x10002990
1a001aac:	e000ed04 	.word	0xe000ed04

1a001ab0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001ab0:	4b2b      	ldr	r3, [pc, #172]	; (1a001b60 <vTaskSwitchContext+0xb0>)
1a001ab2:	681b      	ldr	r3, [r3, #0]
1a001ab4:	b11b      	cbz	r3, 1a001abe <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
1a001ab6:	2201      	movs	r2, #1
1a001ab8:	4b2a      	ldr	r3, [pc, #168]	; (1a001b64 <vTaskSwitchContext+0xb4>)
1a001aba:	601a      	str	r2, [r3, #0]
1a001abc:	4770      	bx	lr

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
1a001abe:	b510      	push	{r4, lr}
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
1a001ac0:	2200      	movs	r2, #0
1a001ac2:	4b28      	ldr	r3, [pc, #160]	; (1a001b64 <vTaskSwitchContext+0xb4>)
1a001ac4:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
1a001ac6:	4b28      	ldr	r3, [pc, #160]	; (1a001b68 <vTaskSwitchContext+0xb8>)
1a001ac8:	681b      	ldr	r3, [r3, #0]
1a001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001acc:	681a      	ldr	r2, [r3, #0]
1a001ace:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001ad2:	d10b      	bne.n	1a001aec <vTaskSwitchContext+0x3c>
1a001ad4:	685a      	ldr	r2, [r3, #4]
1a001ad6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001ada:	d107      	bne.n	1a001aec <vTaskSwitchContext+0x3c>
1a001adc:	689a      	ldr	r2, [r3, #8]
1a001ade:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001ae2:	d103      	bne.n	1a001aec <vTaskSwitchContext+0x3c>
1a001ae4:	68db      	ldr	r3, [r3, #12]
1a001ae6:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001aea:	d005      	beq.n	1a001af8 <vTaskSwitchContext+0x48>
1a001aec:	4b1e      	ldr	r3, [pc, #120]	; (1a001b68 <vTaskSwitchContext+0xb8>)
1a001aee:	6818      	ldr	r0, [r3, #0]
1a001af0:	6819      	ldr	r1, [r3, #0]
1a001af2:	3134      	adds	r1, #52	; 0x34
1a001af4:	f7ff fbea 	bl	1a0012cc <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001af8:	4b1c      	ldr	r3, [pc, #112]	; (1a001b6c <vTaskSwitchContext+0xbc>)
1a001afa:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001afc:	fab3 f383 	clz	r3, r3
1a001b00:	b2db      	uxtb	r3, r3
1a001b02:	f1c3 031f 	rsb	r3, r3, #31
1a001b06:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001b0a:	0092      	lsls	r2, r2, #2
1a001b0c:	4918      	ldr	r1, [pc, #96]	; (1a001b70 <vTaskSwitchContext+0xc0>)
1a001b0e:	588a      	ldr	r2, [r1, r2]
1a001b10:	b942      	cbnz	r2, 1a001b24 <vTaskSwitchContext+0x74>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a001b12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b16:	f383 8811 	msr	BASEPRI, r3
1a001b1a:	f3bf 8f6f 	isb	sy
1a001b1e:	f3bf 8f4f 	dsb	sy
1a001b22:	e7fe      	b.n	1a001b22 <vTaskSwitchContext+0x72>
1a001b24:	4c12      	ldr	r4, [pc, #72]	; (1a001b70 <vTaskSwitchContext+0xc0>)
1a001b26:	009a      	lsls	r2, r3, #2
1a001b28:	18d1      	adds	r1, r2, r3
1a001b2a:	0089      	lsls	r1, r1, #2
1a001b2c:	4421      	add	r1, r4
1a001b2e:	6848      	ldr	r0, [r1, #4]
1a001b30:	6840      	ldr	r0, [r0, #4]
1a001b32:	6048      	str	r0, [r1, #4]
1a001b34:	441a      	add	r2, r3
1a001b36:	0092      	lsls	r2, r2, #2
1a001b38:	3208      	adds	r2, #8
1a001b3a:	4422      	add	r2, r4
1a001b3c:	4290      	cmp	r0, r2
1a001b3e:	d105      	bne.n	1a001b4c <vTaskSwitchContext+0x9c>
1a001b40:	6841      	ldr	r1, [r0, #4]
1a001b42:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001b46:	0092      	lsls	r2, r2, #2
1a001b48:	4422      	add	r2, r4
1a001b4a:	6051      	str	r1, [r2, #4]
1a001b4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001b50:	009b      	lsls	r3, r3, #2
1a001b52:	4a07      	ldr	r2, [pc, #28]	; (1a001b70 <vTaskSwitchContext+0xc0>)
1a001b54:	4413      	add	r3, r2
1a001b56:	685b      	ldr	r3, [r3, #4]
1a001b58:	68da      	ldr	r2, [r3, #12]
1a001b5a:	4b03      	ldr	r3, [pc, #12]	; (1a001b68 <vTaskSwitchContext+0xb8>)
1a001b5c:	601a      	str	r2, [r3, #0]
1a001b5e:	bd10      	pop	{r4, pc}
1a001b60:	10002990 	.word	0x10002990
1a001b64:	10002a04 	.word	0x10002a04
1a001b68:	1000299c 	.word	0x1000299c
1a001b6c:	10002a00 	.word	0x10002a00
1a001b70:	10002904 	.word	0x10002904

1a001b74 <vTaskPlaceOnEventList>:
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
	configASSERT( pxEventList );
1a001b74:	b940      	cbnz	r0, 1a001b88 <vTaskPlaceOnEventList+0x14>
1a001b76:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b7a:	f383 8811 	msr	BASEPRI, r3
1a001b7e:	f3bf 8f6f 	isb	sy
1a001b82:	f3bf 8f4f 	dsb	sy
1a001b86:	e7fe      	b.n	1a001b86 <vTaskPlaceOnEventList+0x12>
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
1a001b88:	b510      	push	{r4, lr}
1a001b8a:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001b8c:	4b04      	ldr	r3, [pc, #16]	; (1a001ba0 <vTaskPlaceOnEventList+0x2c>)
1a001b8e:	6819      	ldr	r1, [r3, #0]
1a001b90:	3118      	adds	r1, #24
1a001b92:	f7ff fb55 	bl	1a001240 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001b96:	4620      	mov	r0, r4
1a001b98:	2101      	movs	r1, #1
1a001b9a:	f7ff fcdb 	bl	1a001554 <prvAddCurrentTaskToDelayedList>
1a001b9e:	bd10      	pop	{r4, pc}
1a001ba0:	1000299c 	.word	0x1000299c

1a001ba4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001ba4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001ba6:	b940      	cbnz	r0, 1a001bba <vTaskPlaceOnEventListRestricted+0x16>
1a001ba8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bac:	f383 8811 	msr	BASEPRI, r3
1a001bb0:	f3bf 8f6f 	isb	sy
1a001bb4:	f3bf 8f4f 	dsb	sy
1a001bb8:	e7fe      	b.n	1a001bb8 <vTaskPlaceOnEventListRestricted+0x14>
1a001bba:	460d      	mov	r5, r1
1a001bbc:	4614      	mov	r4, r2

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001bbe:	4a06      	ldr	r2, [pc, #24]	; (1a001bd8 <vTaskPlaceOnEventListRestricted+0x34>)
1a001bc0:	6811      	ldr	r1, [r2, #0]
1a001bc2:	3118      	adds	r1, #24
1a001bc4:	f7ff fb30 	bl	1a001228 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
1a001bc8:	b10c      	cbz	r4, 1a001bce <vTaskPlaceOnEventListRestricted+0x2a>
		{
			xTicksToWait = portMAX_DELAY;
1a001bca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001bce:	4628      	mov	r0, r5
1a001bd0:	4621      	mov	r1, r4
1a001bd2:	f7ff fcbf 	bl	1a001554 <prvAddCurrentTaskToDelayedList>
1a001bd6:	bd38      	pop	{r3, r4, r5, pc}
1a001bd8:	1000299c 	.word	0x1000299c

1a001bdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
1a001bdc:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001bde:	68c3      	ldr	r3, [r0, #12]
1a001be0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001be2:	b944      	cbnz	r4, 1a001bf6 <xTaskRemoveFromEventList+0x1a>
1a001be4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001be8:	f383 8811 	msr	BASEPRI, r3
1a001bec:	f3bf 8f6f 	isb	sy
1a001bf0:	f3bf 8f4f 	dsb	sy
1a001bf4:	e7fe      	b.n	1a001bf4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001bf6:	f104 0518 	add.w	r5, r4, #24
1a001bfa:	4628      	mov	r0, r5
1a001bfc:	f7ff fb3a 	bl	1a001274 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001c00:	4b13      	ldr	r3, [pc, #76]	; (1a001c50 <xTaskRemoveFromEventList+0x74>)
1a001c02:	681b      	ldr	r3, [r3, #0]
1a001c04:	b9a3      	cbnz	r3, 1a001c30 <xTaskRemoveFromEventList+0x54>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001c06:	1d25      	adds	r5, r4, #4
1a001c08:	4628      	mov	r0, r5
1a001c0a:	f7ff fb33 	bl	1a001274 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001c0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001c10:	2201      	movs	r2, #1
1a001c12:	fa02 f103 	lsl.w	r1, r2, r3
1a001c16:	480f      	ldr	r0, [pc, #60]	; (1a001c54 <xTaskRemoveFromEventList+0x78>)
1a001c18:	6802      	ldr	r2, [r0, #0]
1a001c1a:	430a      	orrs	r2, r1
1a001c1c:	6002      	str	r2, [r0, #0]
1a001c1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001c22:	009b      	lsls	r3, r3, #2
1a001c24:	480c      	ldr	r0, [pc, #48]	; (1a001c58 <xTaskRemoveFromEventList+0x7c>)
1a001c26:	4418      	add	r0, r3
1a001c28:	4629      	mov	r1, r5
1a001c2a:	f7ff fafd 	bl	1a001228 <vListInsertEnd>
1a001c2e:	e003      	b.n	1a001c38 <xTaskRemoveFromEventList+0x5c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001c30:	480a      	ldr	r0, [pc, #40]	; (1a001c5c <xTaskRemoveFromEventList+0x80>)
1a001c32:	4629      	mov	r1, r5
1a001c34:	f7ff faf8 	bl	1a001228 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001c38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001c3a:	4b09      	ldr	r3, [pc, #36]	; (1a001c60 <xTaskRemoveFromEventList+0x84>)
1a001c3c:	681b      	ldr	r3, [r3, #0]
1a001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001c40:	429a      	cmp	r2, r3
1a001c42:	d903      	bls.n	1a001c4c <xTaskRemoveFromEventList+0x70>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
1a001c44:	2001      	movs	r0, #1
1a001c46:	4b07      	ldr	r3, [pc, #28]	; (1a001c64 <xTaskRemoveFromEventList+0x88>)
1a001c48:	6018      	str	r0, [r3, #0]
1a001c4a:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
1a001c4c:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
1a001c4e:	bd38      	pop	{r3, r4, r5, pc}
1a001c50:	10002990 	.word	0x10002990
1a001c54:	10002a00 	.word	0x10002a00
1a001c58:	10002904 	.word	0x10002904
1a001c5c:	100029a0 	.word	0x100029a0
1a001c60:	1000299c 	.word	0x1000299c
1a001c64:	10002a04 	.word	0x10002a04

1a001c68 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001c68:	4b03      	ldr	r3, [pc, #12]	; (1a001c78 <vTaskInternalSetTimeOutState+0x10>)
1a001c6a:	681b      	ldr	r3, [r3, #0]
1a001c6c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001c6e:	4b03      	ldr	r3, [pc, #12]	; (1a001c7c <vTaskInternalSetTimeOutState+0x14>)
1a001c70:	681b      	ldr	r3, [r3, #0]
1a001c72:	6043      	str	r3, [r0, #4]
1a001c74:	4770      	bx	lr
1a001c76:	bf00      	nop
1a001c78:	100028dc 	.word	0x100028dc
1a001c7c:	100029b8 	.word	0x100029b8

1a001c80 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
1a001c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
1a001c82:	b940      	cbnz	r0, 1a001c96 <xTaskCheckForTimeOut+0x16>
1a001c84:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c88:	f383 8811 	msr	BASEPRI, r3
1a001c8c:	f3bf 8f6f 	isb	sy
1a001c90:	f3bf 8f4f 	dsb	sy
1a001c94:	e7fe      	b.n	1a001c94 <xTaskCheckForTimeOut+0x14>
1a001c96:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001c98:	b941      	cbnz	r1, 1a001cac <xTaskCheckForTimeOut+0x2c>
1a001c9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c9e:	f383 8811 	msr	BASEPRI, r3
1a001ca2:	f3bf 8f6f 	isb	sy
1a001ca6:	f3bf 8f4f 	dsb	sy
1a001caa:	e7fe      	b.n	1a001caa <xTaskCheckForTimeOut+0x2a>
1a001cac:	460c      	mov	r4, r1

	taskENTER_CRITICAL();
1a001cae:	f000 fb51 	bl	1a002354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
1a001cb2:	4b11      	ldr	r3, [pc, #68]	; (1a001cf8 <xTaskCheckForTimeOut+0x78>)
1a001cb4:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001cb6:	6869      	ldr	r1, [r5, #4]
1a001cb8:	1a42      	subs	r2, r0, r1
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
1a001cba:	6823      	ldr	r3, [r4, #0]
1a001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001cc0:	d013      	beq.n	1a001cea <xTaskCheckForTimeOut+0x6a>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001cc2:	682f      	ldr	r7, [r5, #0]
1a001cc4:	4e0d      	ldr	r6, [pc, #52]	; (1a001cfc <xTaskCheckForTimeOut+0x7c>)
1a001cc6:	6836      	ldr	r6, [r6, #0]
1a001cc8:	42b7      	cmp	r7, r6
1a001cca:	d001      	beq.n	1a001cd0 <xTaskCheckForTimeOut+0x50>
1a001ccc:	4288      	cmp	r0, r1
1a001cce:	d20e      	bcs.n	1a001cee <xTaskCheckForTimeOut+0x6e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001cd0:	429a      	cmp	r2, r3
1a001cd2:	d206      	bcs.n	1a001ce2 <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
1a001cd4:	1a9b      	subs	r3, r3, r2
1a001cd6:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001cd8:	4628      	mov	r0, r5
1a001cda:	f7ff ffc5 	bl	1a001c68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001cde:	2400      	movs	r4, #0
1a001ce0:	e006      	b.n	1a001cf0 <xTaskCheckForTimeOut+0x70>
		}
		else
		{
			*pxTicksToWait = 0;
1a001ce2:	2300      	movs	r3, #0
1a001ce4:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001ce6:	2401      	movs	r4, #1
1a001ce8:	e002      	b.n	1a001cf0 <xTaskCheckForTimeOut+0x70>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
1a001cea:	2400      	movs	r4, #0
1a001cec:	e000      	b.n	1a001cf0 <xTaskCheckForTimeOut+0x70>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
1a001cee:	2401      	movs	r4, #1
		{
			*pxTicksToWait = 0;
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
1a001cf0:	f000 fb52 	bl	1a002398 <vPortExitCritical>

	return xReturn;
}
1a001cf4:	4620      	mov	r0, r4
1a001cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001cf8:	100029b8 	.word	0x100029b8
1a001cfc:	100028dc 	.word	0x100028dc

1a001d00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
1a001d00:	2201      	movs	r2, #1
1a001d02:	4b01      	ldr	r3, [pc, #4]	; (1a001d08 <vTaskMissedYield+0x8>)
1a001d04:	601a      	str	r2, [r3, #0]
1a001d06:	4770      	bx	lr
1a001d08:	10002a04 	.word	0x10002a04

1a001d0c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
1a001d0c:	4b05      	ldr	r3, [pc, #20]	; (1a001d24 <xTaskGetSchedulerState+0x18>)
1a001d0e:	681b      	ldr	r3, [r3, #0]
1a001d10:	b123      	cbz	r3, 1a001d1c <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001d12:	4b05      	ldr	r3, [pc, #20]	; (1a001d28 <xTaskGetSchedulerState+0x1c>)
1a001d14:	681b      	ldr	r3, [r3, #0]
1a001d16:	b91b      	cbnz	r3, 1a001d20 <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
1a001d18:	2002      	movs	r0, #2
1a001d1a:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001d1c:	2001      	movs	r0, #1
1a001d1e:	4770      	bx	lr
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
1a001d20:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
1a001d22:	4770      	bx	lr
1a001d24:	100028e4 	.word	0x100028e4
1a001d28:	10002990 	.word	0x10002990

1a001d2c <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
1a001d2c:	2800      	cmp	r0, #0
1a001d2e:	d04b      	beq.n	1a001dc8 <xTaskPriorityDisinherit+0x9c>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
1a001d30:	b538      	push	{r3, r4, r5, lr}
1a001d32:	4603      	mov	r3, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
1a001d34:	4a27      	ldr	r2, [pc, #156]	; (1a001dd4 <xTaskPriorityDisinherit+0xa8>)
1a001d36:	6812      	ldr	r2, [r2, #0]
1a001d38:	4290      	cmp	r0, r2
1a001d3a:	d008      	beq.n	1a001d4e <xTaskPriorityDisinherit+0x22>
1a001d3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d40:	f383 8811 	msr	BASEPRI, r3
1a001d44:	f3bf 8f6f 	isb	sy
1a001d48:	f3bf 8f4f 	dsb	sy
1a001d4c:	e7fe      	b.n	1a001d4c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001d4e:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001d50:	b942      	cbnz	r2, 1a001d64 <xTaskPriorityDisinherit+0x38>
1a001d52:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d56:	f383 8811 	msr	BASEPRI, r3
1a001d5a:	f3bf 8f6f 	isb	sy
1a001d5e:	f3bf 8f4f 	dsb	sy
1a001d62:	e7fe      	b.n	1a001d62 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001d64:	3a01      	subs	r2, #1
1a001d66:	6542      	str	r2, [r0, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001d68:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001d6a:	6d19      	ldr	r1, [r3, #80]	; 0x50
1a001d6c:	4288      	cmp	r0, r1
1a001d6e:	d02d      	beq.n	1a001dcc <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001d70:	bb72      	cbnz	r2, 1a001dd0 <xTaskPriorityDisinherit+0xa4>
1a001d72:	461c      	mov	r4, r3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001d74:	1d1d      	adds	r5, r3, #4
1a001d76:	4628      	mov	r0, r5
1a001d78:	f7ff fa7c 	bl	1a001274 <uxListRemove>
1a001d7c:	b970      	cbnz	r0, 1a001d9c <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001d7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001d80:	eb02 0382 	add.w	r3, r2, r2, lsl #2
1a001d84:	009b      	lsls	r3, r3, #2
1a001d86:	4914      	ldr	r1, [pc, #80]	; (1a001dd8 <xTaskPriorityDisinherit+0xac>)
1a001d88:	58cb      	ldr	r3, [r1, r3]
1a001d8a:	b93b      	cbnz	r3, 1a001d9c <xTaskPriorityDisinherit+0x70>
1a001d8c:	2301      	movs	r3, #1
1a001d8e:	fa03 f202 	lsl.w	r2, r3, r2
1a001d92:	4912      	ldr	r1, [pc, #72]	; (1a001ddc <xTaskPriorityDisinherit+0xb0>)
1a001d94:	680b      	ldr	r3, [r1, #0]
1a001d96:	ea23 0302 	bic.w	r3, r3, r2
1a001d9a:	600b      	str	r3, [r1, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001d9c:	6d20      	ldr	r0, [r4, #80]	; 0x50
1a001d9e:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001da0:	f1c0 0307 	rsb	r3, r0, #7
1a001da4:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001da6:	2401      	movs	r4, #1
1a001da8:	fa04 f100 	lsl.w	r1, r4, r0
1a001dac:	4a0b      	ldr	r2, [pc, #44]	; (1a001ddc <xTaskPriorityDisinherit+0xb0>)
1a001dae:	6813      	ldr	r3, [r2, #0]
1a001db0:	430b      	orrs	r3, r1
1a001db2:	6013      	str	r3, [r2, #0]
1a001db4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001db8:	0080      	lsls	r0, r0, #2
1a001dba:	4b07      	ldr	r3, [pc, #28]	; (1a001dd8 <xTaskPriorityDisinherit+0xac>)
1a001dbc:	4418      	add	r0, r3
1a001dbe:	4629      	mov	r1, r5
1a001dc0:	f7ff fa32 	bl	1a001228 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
1a001dc4:	4620      	mov	r0, r4
1a001dc6:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
1a001dc8:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a001dca:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
1a001dcc:	2000      	movs	r0, #0
1a001dce:	bd38      	pop	{r3, r4, r5, pc}
1a001dd0:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a001dd2:	bd38      	pop	{r3, r4, r5, pc}
1a001dd4:	1000299c 	.word	0x1000299c
1a001dd8:	10002904 	.word	0x10002904
1a001ddc:	10002a00 	.word	0x10002a00

1a001de0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001de0:	4b06      	ldr	r3, [pc, #24]	; (1a001dfc <prvGetNextExpireTime+0x1c>)
1a001de2:	681a      	ldr	r2, [r3, #0]
1a001de4:	6813      	ldr	r3, [r2, #0]
1a001de6:	fab3 f383 	clz	r3, r3
1a001dea:	095b      	lsrs	r3, r3, #5
1a001dec:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001dee:	b913      	cbnz	r3, 1a001df6 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001df0:	68d3      	ldr	r3, [r2, #12]
1a001df2:	6818      	ldr	r0, [r3, #0]
1a001df4:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001df6:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001df8:	4770      	bx	lr
1a001dfa:	bf00      	nop
1a001dfc:	10002a08 	.word	0x10002a08

1a001e00 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001e00:	b510      	push	{r4, lr}
1a001e02:	4604      	mov	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001e04:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001e06:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001e08:	4291      	cmp	r1, r2
1a001e0a:	d80a      	bhi.n	1a001e22 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001e0c:	1ad2      	subs	r2, r2, r3
1a001e0e:	6983      	ldr	r3, [r0, #24]
1a001e10:	429a      	cmp	r2, r3
1a001e12:	d211      	bcs.n	1a001e38 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001e14:	4b0a      	ldr	r3, [pc, #40]	; (1a001e40 <prvInsertTimerInActiveList+0x40>)
1a001e16:	6818      	ldr	r0, [r3, #0]
1a001e18:	1d21      	adds	r1, r4, #4
1a001e1a:	f7ff fa11 	bl	1a001240 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
1a001e1e:	2000      	movs	r0, #0
1a001e20:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001e22:	429a      	cmp	r2, r3
1a001e24:	d201      	bcs.n	1a001e2a <prvInsertTimerInActiveList+0x2a>
1a001e26:	4299      	cmp	r1, r3
1a001e28:	d208      	bcs.n	1a001e3c <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001e2a:	4b06      	ldr	r3, [pc, #24]	; (1a001e44 <prvInsertTimerInActiveList+0x44>)
1a001e2c:	6818      	ldr	r0, [r3, #0]
1a001e2e:	1d21      	adds	r1, r4, #4
1a001e30:	f7ff fa06 	bl	1a001240 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
1a001e34:	2000      	movs	r0, #0
1a001e36:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001e38:	2001      	movs	r0, #1
1a001e3a:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
1a001e3c:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a001e3e:	bd10      	pop	{r4, pc}
1a001e40:	10002b2c 	.word	0x10002b2c
1a001e44:	10002a08 	.word	0x10002a08

1a001e48 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001e48:	b530      	push	{r4, r5, lr}
1a001e4a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001e4c:	f000 fa82 	bl	1a002354 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001e50:	4b10      	ldr	r3, [pc, #64]	; (1a001e94 <prvCheckForValidListAndQueue+0x4c>)
1a001e52:	681b      	ldr	r3, [r3, #0]
1a001e54:	b9cb      	cbnz	r3, 1a001e8a <prvCheckForValidListAndQueue+0x42>
		{
			vListInitialise( &xActiveTimerList1 );
1a001e56:	4d10      	ldr	r5, [pc, #64]	; (1a001e98 <prvCheckForValidListAndQueue+0x50>)
1a001e58:	4628      	mov	r0, r5
1a001e5a:	f7ff f9d5 	bl	1a001208 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001e5e:	4c0f      	ldr	r4, [pc, #60]	; (1a001e9c <prvCheckForValidListAndQueue+0x54>)
1a001e60:	4620      	mov	r0, r4
1a001e62:	f7ff f9d1 	bl	1a001208 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001e66:	4b0e      	ldr	r3, [pc, #56]	; (1a001ea0 <prvCheckForValidListAndQueue+0x58>)
1a001e68:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001e6a:	4b0e      	ldr	r3, [pc, #56]	; (1a001ea4 <prvCheckForValidListAndQueue+0x5c>)
1a001e6c:	601c      	str	r4, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a001e6e:	2300      	movs	r3, #0
1a001e70:	9300      	str	r3, [sp, #0]
1a001e72:	200a      	movs	r0, #10
1a001e74:	2110      	movs	r1, #16
1a001e76:	4a0c      	ldr	r2, [pc, #48]	; (1a001ea8 <prvCheckForValidListAndQueue+0x60>)
1a001e78:	4b0c      	ldr	r3, [pc, #48]	; (1a001eac <prvCheckForValidListAndQueue+0x64>)
1a001e7a:	f7fe ff27 	bl	1a000ccc <xQueueGenericCreateStatic>
1a001e7e:	4b05      	ldr	r3, [pc, #20]	; (1a001e94 <prvCheckForValidListAndQueue+0x4c>)
1a001e80:	6018      	str	r0, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
1a001e82:	b110      	cbz	r0, 1a001e8a <prvCheckForValidListAndQueue+0x42>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001e84:	490a      	ldr	r1, [pc, #40]	; (1a001eb0 <prvCheckForValidListAndQueue+0x68>)
1a001e86:	f7ff f985 	bl	1a001194 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001e8a:	f000 fa85 	bl	1a002398 <vPortExitCritical>
}
1a001e8e:	b003      	add	sp, #12
1a001e90:	bd30      	pop	{r4, r5, pc}
1a001e92:	bf00      	nop
1a001e94:	10002b28 	.word	0x10002b28
1a001e98:	10002a0c 	.word	0x10002a0c
1a001e9c:	10002a20 	.word	0x10002a20
1a001ea0:	10002a08 	.word	0x10002a08
1a001ea4:	10002b2c 	.word	0x10002b2c
1a001ea8:	10002a34 	.word	0x10002a34
1a001eac:	10002ad8 	.word	0x10002ad8
1a001eb0:	1a0040ac 	.word	0x1a0040ac

1a001eb4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
1a001eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001eb8:	9c07      	ldr	r4, [sp, #28]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a001eba:	b941      	cbnz	r1, 1a001ece <prvInitialiseNewTimer+0x1a>
1a001ebc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ec0:	f383 8811 	msr	BASEPRI, r3
1a001ec4:	f3bf 8f6f 	isb	sy
1a001ec8:	f3bf 8f4f 	dsb	sy
1a001ecc:	e7fe      	b.n	1a001ecc <prvInitialiseNewTimer+0x18>
1a001ece:	460f      	mov	r7, r1

	if( pxNewTimer != NULL )
1a001ed0:	b174      	cbz	r4, 1a001ef0 <prvInitialiseNewTimer+0x3c>
1a001ed2:	461d      	mov	r5, r3
1a001ed4:	4616      	mov	r6, r2
1a001ed6:	4680      	mov	r8, r0
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
1a001ed8:	f7ff ffb6 	bl	1a001e48 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
1a001edc:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a001ee0:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a001ee2:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a001ee4:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a001ee6:	9b06      	ldr	r3, [sp, #24]
1a001ee8:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a001eea:	1d20      	adds	r0, r4, #4
1a001eec:	f7ff f998 	bl	1a001220 <vListInitialiseItem>
1a001ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a001ef4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
1a001ef4:	b510      	push	{r4, lr}
1a001ef6:	b088      	sub	sp, #32

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
1a001ef8:	f7ff ffa6 	bl	1a001e48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
1a001efc:	4b15      	ldr	r3, [pc, #84]	; (1a001f54 <xTimerCreateTimerTask+0x60>)
1a001efe:	681b      	ldr	r3, [r3, #0]
1a001f00:	b1d3      	cbz	r3, 1a001f38 <xTimerCreateTimerTask+0x44>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001f02:	2400      	movs	r4, #0
1a001f04:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001f06:	9406      	str	r4, [sp, #24]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001f08:	a805      	add	r0, sp, #20
1a001f0a:	a906      	add	r1, sp, #24
1a001f0c:	aa07      	add	r2, sp, #28
1a001f0e:	f7ff f9d1 	bl	1a0012b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001f12:	2304      	movs	r3, #4
1a001f14:	9300      	str	r3, [sp, #0]
1a001f16:	9b06      	ldr	r3, [sp, #24]
1a001f18:	9301      	str	r3, [sp, #4]
1a001f1a:	9b05      	ldr	r3, [sp, #20]
1a001f1c:	9302      	str	r3, [sp, #8]
1a001f1e:	480e      	ldr	r0, [pc, #56]	; (1a001f58 <xTimerCreateTimerTask+0x64>)
1a001f20:	490e      	ldr	r1, [pc, #56]	; (1a001f5c <xTimerCreateTimerTask+0x68>)
1a001f22:	9a07      	ldr	r2, [sp, #28]
1a001f24:	4623      	mov	r3, r4
1a001f26:	f7ff fb5f 	bl	1a0015e8 <xTaskCreateStatic>
1a001f2a:	4b0d      	ldr	r3, [pc, #52]	; (1a001f60 <xTimerCreateTimerTask+0x6c>)
1a001f2c:	6018      	str	r0, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
1a001f2e:	b908      	cbnz	r0, 1a001f34 <xTimerCreateTimerTask+0x40>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
1a001f30:	4620      	mov	r0, r4
1a001f32:	e002      	b.n	1a001f3a <xTimerCreateTimerTask+0x46>
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
			{
				xReturn = pdPASS;
1a001f34:	2001      	movs	r0, #1
1a001f36:	e000      	b.n	1a001f3a <xTimerCreateTimerTask+0x46>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
1a001f38:	2000      	movs	r0, #0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
1a001f3a:	b940      	cbnz	r0, 1a001f4e <xTimerCreateTimerTask+0x5a>
1a001f3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f40:	f383 8811 	msr	BASEPRI, r3
1a001f44:	f3bf 8f6f 	isb	sy
1a001f48:	f3bf 8f4f 	dsb	sy
1a001f4c:	e7fe      	b.n	1a001f4c <xTimerCreateTimerTask+0x58>
	return xReturn;
}
1a001f4e:	b008      	add	sp, #32
1a001f50:	bd10      	pop	{r4, pc}
1a001f52:	bf00      	nop
1a001f54:	10002b28 	.word	0x10002b28
1a001f58:	1a002269 	.word	0x1a002269
1a001f5c:	1a0040b4 	.word	0x1a0040b4
1a001f60:	10002b30 	.word	0x10002b30

1a001f64 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
1a001f64:	b530      	push	{r4, r5, lr}
1a001f66:	b085      	sub	sp, #20
1a001f68:	9c09      	ldr	r4, [sp, #36]	; 0x24
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
1a001f6a:	2530      	movs	r5, #48	; 0x30
1a001f6c:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a001f6e:	9d03      	ldr	r5, [sp, #12]
1a001f70:	2d30      	cmp	r5, #48	; 0x30
1a001f72:	d008      	beq.n	1a001f86 <xTimerCreateStatic+0x22>
1a001f74:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f78:	f383 8811 	msr	BASEPRI, r3
1a001f7c:	f3bf 8f6f 	isb	sy
1a001f80:	f3bf 8f4f 	dsb	sy
1a001f84:	e7fe      	b.n	1a001f84 <xTimerCreateStatic+0x20>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
1a001f86:	b944      	cbnz	r4, 1a001f9a <xTimerCreateStatic+0x36>
1a001f88:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f8c:	f383 8811 	msr	BASEPRI, r3
1a001f90:	f3bf 8f6f 	isb	sy
1a001f94:	f3bf 8f4f 	dsb	sy
1a001f98:	e7fe      	b.n	1a001f98 <xTimerCreateStatic+0x34>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewTimer != NULL )
1a001f9a:	b13c      	cbz	r4, 1a001fac <xTimerCreateStatic+0x48>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a001f9c:	9d08      	ldr	r5, [sp, #32]
1a001f9e:	9500      	str	r5, [sp, #0]
1a001fa0:	9401      	str	r4, [sp, #4]
1a001fa2:	f7ff ff87 	bl	1a001eb4 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a001fa6:	2301      	movs	r3, #1
1a001fa8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
	}
1a001fac:	4620      	mov	r0, r4
1a001fae:	b005      	add	sp, #20
1a001fb0:	bd30      	pop	{r4, r5, pc}
1a001fb2:	bf00      	nop

1a001fb4 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
1a001fb4:	b940      	cbnz	r0, 1a001fc8 <xTimerGenericCommand+0x14>
1a001fb6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fba:	f383 8811 	msr	BASEPRI, r3
1a001fbe:	f3bf 8f6f 	isb	sy
1a001fc2:	f3bf 8f4f 	dsb	sy
1a001fc6:	e7fe      	b.n	1a001fc6 <xTimerGenericCommand+0x12>
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
1a001fc8:	b530      	push	{r4, r5, lr}
1a001fca:	b085      	sub	sp, #20
1a001fcc:	4615      	mov	r5, r2
1a001fce:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
1a001fd0:	4a12      	ldr	r2, [pc, #72]	; (1a00201c <xTimerGenericCommand+0x68>)
1a001fd2:	6810      	ldr	r0, [r2, #0]
1a001fd4:	b1f0      	cbz	r0, 1a002014 <xTimerGenericCommand+0x60>
1a001fd6:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
1a001fd8:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001fda:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001fdc:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001fde:	2905      	cmp	r1, #5
1a001fe0:	dc13      	bgt.n	1a00200a <xTimerGenericCommand+0x56>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001fe2:	f7ff fe93 	bl	1a001d0c <xTaskGetSchedulerState>
1a001fe6:	2802      	cmp	r0, #2
1a001fe8:	d107      	bne.n	1a001ffa <xTimerGenericCommand+0x46>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a001fea:	4b0c      	ldr	r3, [pc, #48]	; (1a00201c <xTimerGenericCommand+0x68>)
1a001fec:	6818      	ldr	r0, [r3, #0]
1a001fee:	4669      	mov	r1, sp
1a001ff0:	9a08      	ldr	r2, [sp, #32]
1a001ff2:	2300      	movs	r3, #0
1a001ff4:	f7fe fee8 	bl	1a000dc8 <xQueueGenericSend>
1a001ff8:	e00d      	b.n	1a002016 <xTimerGenericCommand+0x62>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001ffa:	4b08      	ldr	r3, [pc, #32]	; (1a00201c <xTimerGenericCommand+0x68>)
1a001ffc:	6818      	ldr	r0, [r3, #0]
1a001ffe:	4669      	mov	r1, sp
1a002000:	2200      	movs	r2, #0
1a002002:	4613      	mov	r3, r2
1a002004:	f7fe fee0 	bl	1a000dc8 <xQueueGenericSend>
1a002008:	e005      	b.n	1a002016 <xTimerGenericCommand+0x62>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a00200a:	4669      	mov	r1, sp
1a00200c:	2300      	movs	r3, #0
1a00200e:	f7fe ffa3 	bl	1a000f58 <xQueueGenericSendFromISR>
1a002012:	e000      	b.n	1a002016 <xTimerGenericCommand+0x62>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
1a002014:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
1a002016:	b005      	add	sp, #20
1a002018:	bd30      	pop	{r4, r5, pc}
1a00201a:	bf00      	nop
1a00201c:	10002b28 	.word	0x10002b28

1a002020 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
1a002020:	b570      	push	{r4, r5, r6, lr}
1a002022:	b082      	sub	sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002024:	e029      	b.n	1a00207a <prvSwitchTimerLists+0x5a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002026:	68db      	ldr	r3, [r3, #12]
1a002028:	681e      	ldr	r6, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00202a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00202c:	1d25      	adds	r5, r4, #4
1a00202e:	4628      	mov	r0, r5
1a002030:	f7ff f920 	bl	1a001274 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002034:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002036:	4620      	mov	r0, r4
1a002038:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00203a:	69e3      	ldr	r3, [r4, #28]
1a00203c:	2b01      	cmp	r3, #1
1a00203e:	d11c      	bne.n	1a00207a <prvSwitchTimerLists+0x5a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a002040:	69a3      	ldr	r3, [r4, #24]
1a002042:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a002044:	42b3      	cmp	r3, r6
1a002046:	d907      	bls.n	1a002058 <prvSwitchTimerLists+0x38>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002048:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a00204a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a00204c:	4b11      	ldr	r3, [pc, #68]	; (1a002094 <prvSwitchTimerLists+0x74>)
1a00204e:	6818      	ldr	r0, [r3, #0]
1a002050:	4629      	mov	r1, r5
1a002052:	f7ff f8f5 	bl	1a001240 <vListInsert>
1a002056:	e010      	b.n	1a00207a <prvSwitchTimerLists+0x5a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002058:	2300      	movs	r3, #0
1a00205a:	9300      	str	r3, [sp, #0]
1a00205c:	4620      	mov	r0, r4
1a00205e:	4619      	mov	r1, r3
1a002060:	4632      	mov	r2, r6
1a002062:	f7ff ffa7 	bl	1a001fb4 <xTimerGenericCommand>
				configASSERT( xResult );
1a002066:	b940      	cbnz	r0, 1a00207a <prvSwitchTimerLists+0x5a>
1a002068:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00206c:	f383 8811 	msr	BASEPRI, r3
1a002070:	f3bf 8f6f 	isb	sy
1a002074:	f3bf 8f4f 	dsb	sy
1a002078:	e7fe      	b.n	1a002078 <prvSwitchTimerLists+0x58>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a00207a:	4b06      	ldr	r3, [pc, #24]	; (1a002094 <prvSwitchTimerLists+0x74>)
1a00207c:	681b      	ldr	r3, [r3, #0]
1a00207e:	681a      	ldr	r2, [r3, #0]
1a002080:	2a00      	cmp	r2, #0
1a002082:	d1d0      	bne.n	1a002026 <prvSwitchTimerLists+0x6>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
1a002084:	4a04      	ldr	r2, [pc, #16]	; (1a002098 <prvSwitchTimerLists+0x78>)
1a002086:	6810      	ldr	r0, [r2, #0]
1a002088:	4902      	ldr	r1, [pc, #8]	; (1a002094 <prvSwitchTimerLists+0x74>)
1a00208a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a00208c:	6013      	str	r3, [r2, #0]
}
1a00208e:	b002      	add	sp, #8
1a002090:	bd70      	pop	{r4, r5, r6, pc}
1a002092:	bf00      	nop
1a002094:	10002a08 	.word	0x10002a08
1a002098:	10002b2c 	.word	0x10002b2c

1a00209c <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
1a00209c:	b538      	push	{r3, r4, r5, lr}
1a00209e:	4605      	mov	r5, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
1a0020a0:	f7ff fb6c 	bl	1a00177c <xTaskGetTickCount>
1a0020a4:	4604      	mov	r4, r0

	if( xTimeNow < xLastTime )
1a0020a6:	4b07      	ldr	r3, [pc, #28]	; (1a0020c4 <prvSampleTimeNow+0x28>)
1a0020a8:	681b      	ldr	r3, [r3, #0]
1a0020aa:	4298      	cmp	r0, r3
1a0020ac:	d204      	bcs.n	1a0020b8 <prvSampleTimeNow+0x1c>
	{
		prvSwitchTimerLists();
1a0020ae:	f7ff ffb7 	bl	1a002020 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a0020b2:	2301      	movs	r3, #1
1a0020b4:	602b      	str	r3, [r5, #0]
1a0020b6:	e001      	b.n	1a0020bc <prvSampleTimeNow+0x20>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
1a0020b8:	2300      	movs	r3, #0
1a0020ba:	602b      	str	r3, [r5, #0]
	}

	xLastTime = xTimeNow;
1a0020bc:	4b01      	ldr	r3, [pc, #4]	; (1a0020c4 <prvSampleTimeNow+0x28>)
1a0020be:	601c      	str	r4, [r3, #0]

	return xTimeNow;
}
1a0020c0:	4620      	mov	r0, r4
1a0020c2:	bd38      	pop	{r3, r4, r5, pc}
1a0020c4:	10002ad4 	.word	0x10002ad4

1a0020c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
1a0020c8:	b570      	push	{r4, r5, r6, lr}
1a0020ca:	b082      	sub	sp, #8
1a0020cc:	4605      	mov	r5, r0
1a0020ce:	460e      	mov	r6, r1
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0020d0:	4b13      	ldr	r3, [pc, #76]	; (1a002120 <prvProcessExpiredTimer+0x58>)
1a0020d2:	681b      	ldr	r3, [r3, #0]
1a0020d4:	68db      	ldr	r3, [r3, #12]
1a0020d6:	68dc      	ldr	r4, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0020d8:	1d20      	adds	r0, r4, #4
1a0020da:	f7ff f8cb 	bl	1a001274 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0020de:	69e3      	ldr	r3, [r4, #28]
1a0020e0:	2b01      	cmp	r3, #1
1a0020e2:	d118      	bne.n	1a002116 <prvProcessExpiredTimer+0x4e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0020e4:	69a1      	ldr	r1, [r4, #24]
1a0020e6:	4620      	mov	r0, r4
1a0020e8:	4429      	add	r1, r5
1a0020ea:	4632      	mov	r2, r6
1a0020ec:	462b      	mov	r3, r5
1a0020ee:	f7ff fe87 	bl	1a001e00 <prvInsertTimerInActiveList>
1a0020f2:	b180      	cbz	r0, 1a002116 <prvProcessExpiredTimer+0x4e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0020f4:	2300      	movs	r3, #0
1a0020f6:	9300      	str	r3, [sp, #0]
1a0020f8:	4620      	mov	r0, r4
1a0020fa:	4619      	mov	r1, r3
1a0020fc:	462a      	mov	r2, r5
1a0020fe:	f7ff ff59 	bl	1a001fb4 <xTimerGenericCommand>
			configASSERT( xResult );
1a002102:	b940      	cbnz	r0, 1a002116 <prvProcessExpiredTimer+0x4e>
1a002104:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002108:	f383 8811 	msr	BASEPRI, r3
1a00210c:	f3bf 8f6f 	isb	sy
1a002110:	f3bf 8f4f 	dsb	sy
1a002114:	e7fe      	b.n	1a002114 <prvProcessExpiredTimer+0x4c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002116:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002118:	4620      	mov	r0, r4
1a00211a:	4798      	blx	r3
}
1a00211c:	b002      	add	sp, #8
1a00211e:	bd70      	pop	{r4, r5, r6, pc}
1a002120:	10002a08 	.word	0x10002a08

1a002124 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
1a002124:	b570      	push	{r4, r5, r6, lr}
1a002126:	b082      	sub	sp, #8
1a002128:	4606      	mov	r6, r0
1a00212a:	460c      	mov	r4, r1
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
1a00212c:	f7ff fb1e 	bl	1a00176c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002130:	a801      	add	r0, sp, #4
1a002132:	f7ff ffb3 	bl	1a00209c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a002136:	9b01      	ldr	r3, [sp, #4]
1a002138:	bb1b      	cbnz	r3, 1a002182 <prvProcessTimerOrBlockTask+0x5e>
1a00213a:	4605      	mov	r5, r0
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a00213c:	b944      	cbnz	r4, 1a002150 <prvProcessTimerOrBlockTask+0x2c>
1a00213e:	4286      	cmp	r6, r0
1a002140:	d806      	bhi.n	1a002150 <prvProcessTimerOrBlockTask+0x2c>
			{
				( void ) xTaskResumeAll();
1a002142:	f7ff fbbb 	bl	1a0018bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002146:	4630      	mov	r0, r6
1a002148:	4629      	mov	r1, r5
1a00214a:	f7ff ffbd 	bl	1a0020c8 <prvProcessExpiredTimer>
1a00214e:	e01a      	b.n	1a002186 <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
1a002150:	b12c      	cbz	r4, 1a00215e <prvProcessTimerOrBlockTask+0x3a>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002152:	4b0e      	ldr	r3, [pc, #56]	; (1a00218c <prvProcessTimerOrBlockTask+0x68>)
1a002154:	681b      	ldr	r3, [r3, #0]
1a002156:	681c      	ldr	r4, [r3, #0]
1a002158:	fab4 f484 	clz	r4, r4
1a00215c:	0964      	lsrs	r4, r4, #5
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a00215e:	4b0c      	ldr	r3, [pc, #48]	; (1a002190 <prvProcessTimerOrBlockTask+0x6c>)
1a002160:	6818      	ldr	r0, [r3, #0]
1a002162:	1b71      	subs	r1, r6, r5
1a002164:	4622      	mov	r2, r4
1a002166:	f7ff f829 	bl	1a0011bc <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
1a00216a:	f7ff fba7 	bl	1a0018bc <xTaskResumeAll>
1a00216e:	b950      	cbnz	r0, 1a002186 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
1a002170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002174:	4b07      	ldr	r3, [pc, #28]	; (1a002194 <prvProcessTimerOrBlockTask+0x70>)
1a002176:	601a      	str	r2, [r3, #0]
1a002178:	f3bf 8f4f 	dsb	sy
1a00217c:	f3bf 8f6f 	isb	sy
1a002180:	e001      	b.n	1a002186 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
1a002182:	f7ff fb9b 	bl	1a0018bc <xTaskResumeAll>
		}
	}
}
1a002186:	b002      	add	sp, #8
1a002188:	bd70      	pop	{r4, r5, r6, pc}
1a00218a:	bf00      	nop
1a00218c:	10002b2c 	.word	0x10002b2c
1a002190:	10002b28 	.word	0x10002b28
1a002194:	e000ed04 	.word	0xe000ed04

1a002198 <prvProcessReceivedCommands>:
	return xProcessTimerNow;
}
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
1a002198:	b530      	push	{r4, r5, lr}
1a00219a:	b089      	sub	sp, #36	; 0x24
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00219c:	e057      	b.n	1a00224e <prvProcessReceivedCommands+0xb6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a00219e:	9b04      	ldr	r3, [sp, #16]
1a0021a0:	2b00      	cmp	r3, #0
1a0021a2:	da03      	bge.n	1a0021ac <prvProcessReceivedCommands+0x14>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a0021a4:	9806      	ldr	r0, [sp, #24]
1a0021a6:	9907      	ldr	r1, [sp, #28]
1a0021a8:	9b05      	ldr	r3, [sp, #20]
1a0021aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a0021ac:	9b04      	ldr	r3, [sp, #16]
1a0021ae:	2b00      	cmp	r3, #0
1a0021b0:	db4d      	blt.n	1a00224e <prvProcessReceivedCommands+0xb6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a0021b2:	9c06      	ldr	r4, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a0021b4:	6963      	ldr	r3, [r4, #20]
1a0021b6:	b113      	cbz	r3, 1a0021be <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0021b8:	1d20      	adds	r0, r4, #4
1a0021ba:	f7ff f85b 	bl	1a001274 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0021be:	a803      	add	r0, sp, #12
1a0021c0:	f7ff ff6c 	bl	1a00209c <prvSampleTimeNow>
1a0021c4:	4603      	mov	r3, r0

			switch( xMessage.xMessageID )
1a0021c6:	9a04      	ldr	r2, [sp, #16]
1a0021c8:	2a09      	cmp	r2, #9
1a0021ca:	d840      	bhi.n	1a00224e <prvProcessReceivedCommands+0xb6>
1a0021cc:	e8df f002 	tbb	[pc, r2]
1a0021d0:	3f050505 	.word	0x3f050505
1a0021d4:	05053927 	.word	0x05053927
1a0021d8:	273f      	.short	0x273f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0021da:	9d05      	ldr	r5, [sp, #20]
1a0021dc:	69a1      	ldr	r1, [r4, #24]
1a0021de:	4620      	mov	r0, r4
1a0021e0:	4429      	add	r1, r5
1a0021e2:	461a      	mov	r2, r3
1a0021e4:	462b      	mov	r3, r5
1a0021e6:	f7ff fe0b 	bl	1a001e00 <prvInsertTimerInActiveList>
1a0021ea:	b380      	cbz	r0, 1a00224e <prvProcessReceivedCommands+0xb6>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0021ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0021ee:	4620      	mov	r0, r4
1a0021f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0021f2:	69e3      	ldr	r3, [r4, #28]
1a0021f4:	2b01      	cmp	r3, #1
1a0021f6:	d12a      	bne.n	1a00224e <prvProcessReceivedCommands+0xb6>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a0021f8:	69a2      	ldr	r2, [r4, #24]
1a0021fa:	2300      	movs	r3, #0
1a0021fc:	9300      	str	r3, [sp, #0]
1a0021fe:	4620      	mov	r0, r4
1a002200:	4619      	mov	r1, r3
1a002202:	9c05      	ldr	r4, [sp, #20]
1a002204:	4422      	add	r2, r4
1a002206:	f7ff fed5 	bl	1a001fb4 <xTimerGenericCommand>
							configASSERT( xResult );
1a00220a:	bb00      	cbnz	r0, 1a00224e <prvProcessReceivedCommands+0xb6>
1a00220c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002210:	f383 8811 	msr	BASEPRI, r3
1a002214:	f3bf 8f6f 	isb	sy
1a002218:	f3bf 8f4f 	dsb	sy
1a00221c:	e7fe      	b.n	1a00221c <prvProcessReceivedCommands+0x84>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a00221e:	9905      	ldr	r1, [sp, #20]
1a002220:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002222:	b941      	cbnz	r1, 1a002236 <prvProcessReceivedCommands+0x9e>
1a002224:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002228:	f383 8811 	msr	BASEPRI, r3
1a00222c:	f3bf 8f6f 	isb	sy
1a002230:	f3bf 8f4f 	dsb	sy
1a002234:	e7fe      	b.n	1a002234 <prvProcessReceivedCommands+0x9c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002236:	4620      	mov	r0, r4
1a002238:	4419      	add	r1, r3
1a00223a:	461a      	mov	r2, r3
1a00223c:	f7ff fde0 	bl	1a001e00 <prvInsertTimerInActiveList>
					break;
1a002240:	e005      	b.n	1a00224e <prvProcessReceivedCommands+0xb6>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002242:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002246:	b913      	cbnz	r3, 1a00224e <prvProcessReceivedCommands+0xb6>
						{
							vPortFree( pxTimer );
1a002248:	4620      	mov	r0, r4
1a00224a:	f7fe fc3f 	bl	1a000acc <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00224e:	4b05      	ldr	r3, [pc, #20]	; (1a002264 <prvProcessReceivedCommands+0xcc>)
1a002250:	6818      	ldr	r0, [r3, #0]
1a002252:	a904      	add	r1, sp, #16
1a002254:	2200      	movs	r2, #0
1a002256:	f7fe fef1 	bl	1a00103c <xQueueReceive>
1a00225a:	2800      	cmp	r0, #0
1a00225c:	d19f      	bne.n	1a00219e <prvProcessReceivedCommands+0x6>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
1a00225e:	b009      	add	sp, #36	; 0x24
1a002260:	bd30      	pop	{r4, r5, pc}
1a002262:	bf00      	nop
1a002264:	10002b28 	.word	0x10002b28

1a002268 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
1a002268:	b500      	push	{lr}
1a00226a:	b083      	sub	sp, #12

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a00226c:	a801      	add	r0, sp, #4
1a00226e:	f7ff fdb7 	bl	1a001de0 <prvGetNextExpireTime>

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002272:	9901      	ldr	r1, [sp, #4]
1a002274:	f7ff ff56 	bl	1a002124 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
1a002278:	f7ff ff8e 	bl	1a002198 <prvProcessReceivedCommands>
	}
1a00227c:	e7f6      	b.n	1a00226c <prvTimerTask+0x4>
1a00227e:	bf00      	nop

1a002280 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002280:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002282:	2300      	movs	r3, #0
1a002284:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002286:	4b0d      	ldr	r3, [pc, #52]	; (1a0022bc <prvTaskExitError+0x3c>)
1a002288:	681b      	ldr	r3, [r3, #0]
1a00228a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00228e:	d008      	beq.n	1a0022a2 <prvTaskExitError+0x22>
1a002290:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002294:	f383 8811 	msr	BASEPRI, r3
1a002298:	f3bf 8f6f 	isb	sy
1a00229c:	f3bf 8f4f 	dsb	sy
1a0022a0:	e7fe      	b.n	1a0022a0 <prvTaskExitError+0x20>
1a0022a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022a6:	f383 8811 	msr	BASEPRI, r3
1a0022aa:	f3bf 8f6f 	isb	sy
1a0022ae:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a0022b2:	9b01      	ldr	r3, [sp, #4]
1a0022b4:	2b00      	cmp	r3, #0
1a0022b6:	d0fc      	beq.n	1a0022b2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a0022b8:	b002      	add	sp, #8
1a0022ba:	4770      	bx	lr
1a0022bc:	10000004 	.word	0x10000004

1a0022c0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a0022c0:	4808      	ldr	r0, [pc, #32]	; (1a0022e4 <prvPortStartFirstTask+0x24>)
1a0022c2:	6800      	ldr	r0, [r0, #0]
1a0022c4:	6800      	ldr	r0, [r0, #0]
1a0022c6:	f380 8808 	msr	MSP, r0
1a0022ca:	f04f 0000 	mov.w	r0, #0
1a0022ce:	f380 8814 	msr	CONTROL, r0
1a0022d2:	b662      	cpsie	i
1a0022d4:	b661      	cpsie	f
1a0022d6:	f3bf 8f4f 	dsb	sy
1a0022da:	f3bf 8f6f 	isb	sy
1a0022de:	df00      	svc	0
1a0022e0:	bf00      	nop
1a0022e2:	0000      	.short	0x0000
1a0022e4:	e000ed08 	.word	0xe000ed08

1a0022e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a0022e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a0022f8 <vPortEnableVFP+0x10>
1a0022ec:	6801      	ldr	r1, [r0, #0]
1a0022ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0022f2:	6001      	str	r1, [r0, #0]
1a0022f4:	4770      	bx	lr
1a0022f6:	0000      	.short	0x0000
1a0022f8:	e000ed88 	.word	0xe000ed88

1a0022fc <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a0022fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002300:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002304:	f021 0101 	bic.w	r1, r1, #1
1a002308:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a00230c:	4b05      	ldr	r3, [pc, #20]	; (1a002324 <pxPortInitialiseStack+0x28>)
1a00230e:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002312:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002316:	f06f 0302 	mvn.w	r3, #2
1a00231a:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
1a00231e:	3844      	subs	r0, #68	; 0x44
1a002320:	4770      	bx	lr
1a002322:	bf00      	nop
1a002324:	1a002281 	.word	0x1a002281
1a002328:	ffffffff 	.word	0xffffffff
1a00232c:	ffffffff 	.word	0xffffffff

1a002330 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
1a002330:	4b07      	ldr	r3, [pc, #28]	; (1a002350 <pxCurrentTCBConst2>)
1a002332:	6819      	ldr	r1, [r3, #0]
1a002334:	6808      	ldr	r0, [r1, #0]
1a002336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00233a:	f380 8809 	msr	PSP, r0
1a00233e:	f3bf 8f6f 	isb	sy
1a002342:	f04f 0000 	mov.w	r0, #0
1a002346:	f380 8811 	msr	BASEPRI, r0
1a00234a:	4770      	bx	lr
1a00234c:	f3af 8000 	nop.w

1a002350 <pxCurrentTCBConst2>:
1a002350:	1000299c 	.word	0x1000299c

1a002354 <vPortEnterCritical>:
1a002354:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002358:	f383 8811 	msr	BASEPRI, r3
1a00235c:	f3bf 8f6f 	isb	sy
1a002360:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
1a002364:	4a0a      	ldr	r2, [pc, #40]	; (1a002390 <vPortEnterCritical+0x3c>)
1a002366:	6813      	ldr	r3, [r2, #0]
1a002368:	3301      	adds	r3, #1
1a00236a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
1a00236c:	2b01      	cmp	r3, #1
1a00236e:	d10d      	bne.n	1a00238c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002370:	4b08      	ldr	r3, [pc, #32]	; (1a002394 <vPortEnterCritical+0x40>)
1a002372:	681b      	ldr	r3, [r3, #0]
1a002374:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002378:	d008      	beq.n	1a00238c <vPortEnterCritical+0x38>
1a00237a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00237e:	f383 8811 	msr	BASEPRI, r3
1a002382:	f3bf 8f6f 	isb	sy
1a002386:	f3bf 8f4f 	dsb	sy
1a00238a:	e7fe      	b.n	1a00238a <vPortEnterCritical+0x36>
1a00238c:	4770      	bx	lr
1a00238e:	bf00      	nop
1a002390:	10000004 	.word	0x10000004
1a002394:	e000ed04 	.word	0xe000ed04

1a002398 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
1a002398:	4b09      	ldr	r3, [pc, #36]	; (1a0023c0 <vPortExitCritical+0x28>)
1a00239a:	681b      	ldr	r3, [r3, #0]
1a00239c:	b943      	cbnz	r3, 1a0023b0 <vPortExitCritical+0x18>
1a00239e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023a2:	f383 8811 	msr	BASEPRI, r3
1a0023a6:	f3bf 8f6f 	isb	sy
1a0023aa:	f3bf 8f4f 	dsb	sy
1a0023ae:	e7fe      	b.n	1a0023ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a0023b0:	3b01      	subs	r3, #1
1a0023b2:	4a03      	ldr	r2, [pc, #12]	; (1a0023c0 <vPortExitCritical+0x28>)
1a0023b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a0023b6:	b90b      	cbnz	r3, 1a0023bc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a0023b8:	f383 8811 	msr	BASEPRI, r3
1a0023bc:	4770      	bx	lr
1a0023be:	bf00      	nop
1a0023c0:	10000004 	.word	0x10000004
1a0023c4:	ffffffff 	.word	0xffffffff
1a0023c8:	ffffffff 	.word	0xffffffff
1a0023cc:	ffffffff 	.word	0xffffffff

1a0023d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
1a0023d0:	f3ef 8009 	mrs	r0, PSP
1a0023d4:	f3bf 8f6f 	isb	sy
1a0023d8:	4b15      	ldr	r3, [pc, #84]	; (1a002430 <pxCurrentTCBConst>)
1a0023da:	681a      	ldr	r2, [r3, #0]
1a0023dc:	f01e 0f10 	tst.w	lr, #16
1a0023e0:	bf08      	it	eq
1a0023e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a0023e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0023ea:	6010      	str	r0, [r2, #0]
1a0023ec:	e92d 0009 	stmdb	sp!, {r0, r3}
1a0023f0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a0023f4:	f380 8811 	msr	BASEPRI, r0
1a0023f8:	f3bf 8f4f 	dsb	sy
1a0023fc:	f3bf 8f6f 	isb	sy
1a002400:	f7ff fb56 	bl	1a001ab0 <vTaskSwitchContext>
1a002404:	f04f 0000 	mov.w	r0, #0
1a002408:	f380 8811 	msr	BASEPRI, r0
1a00240c:	bc09      	pop	{r0, r3}
1a00240e:	6819      	ldr	r1, [r3, #0]
1a002410:	6808      	ldr	r0, [r1, #0]
1a002412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002416:	f01e 0f10 	tst.w	lr, #16
1a00241a:	bf08      	it	eq
1a00241c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002420:	f380 8809 	msr	PSP, r0
1a002424:	f3bf 8f6f 	isb	sy
1a002428:	4770      	bx	lr
1a00242a:	bf00      	nop
1a00242c:	f3af 8000 	nop.w

1a002430 <pxCurrentTCBConst>:
1a002430:	1000299c 	.word	0x1000299c

1a002434 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
1a002434:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a002436:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00243a:	f383 8811 	msr	BASEPRI, r3
1a00243e:	f3bf 8f6f 	isb	sy
1a002442:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
1a002446:	f7ff f9a7 	bl	1a001798 <xTaskIncrementTick>
1a00244a:	b118      	cbz	r0, 1a002454 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00244c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002450:	4b02      	ldr	r3, [pc, #8]	; (1a00245c <SysTick_Handler+0x28>)
1a002452:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a002454:	2300      	movs	r3, #0
1a002456:	f383 8811 	msr	BASEPRI, r3
1a00245a:	bd08      	pop	{r3, pc}
1a00245c:	e000ed04 	.word	0xe000ed04

1a002460 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002460:	4a08      	ldr	r2, [pc, #32]	; (1a002484 <vPortSetupTimerInterrupt+0x24>)
1a002462:	2300      	movs	r3, #0
1a002464:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002466:	4908      	ldr	r1, [pc, #32]	; (1a002488 <vPortSetupTimerInterrupt+0x28>)
1a002468:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00246a:	4b08      	ldr	r3, [pc, #32]	; (1a00248c <vPortSetupTimerInterrupt+0x2c>)
1a00246c:	681b      	ldr	r3, [r3, #0]
1a00246e:	4908      	ldr	r1, [pc, #32]	; (1a002490 <vPortSetupTimerInterrupt+0x30>)
1a002470:	fba1 1303 	umull	r1, r3, r1, r3
1a002474:	099b      	lsrs	r3, r3, #6
1a002476:	3b01      	subs	r3, #1
1a002478:	4906      	ldr	r1, [pc, #24]	; (1a002494 <vPortSetupTimerInterrupt+0x34>)
1a00247a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00247c:	2307      	movs	r3, #7
1a00247e:	6013      	str	r3, [r2, #0]
1a002480:	4770      	bx	lr
1a002482:	bf00      	nop
1a002484:	e000e010 	.word	0xe000e010
1a002488:	e000e018 	.word	0xe000e018
1a00248c:	10002bf8 	.word	0x10002bf8
1a002490:	10624dd3 	.word	0x10624dd3
1a002494:	e000e014 	.word	0xe000e014

1a002498 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002498:	4b40      	ldr	r3, [pc, #256]	; (1a00259c <xPortStartScheduler+0x104>)
1a00249a:	681a      	ldr	r2, [r3, #0]
1a00249c:	4b40      	ldr	r3, [pc, #256]	; (1a0025a0 <xPortStartScheduler+0x108>)
1a00249e:	429a      	cmp	r2, r3
1a0024a0:	d108      	bne.n	1a0024b4 <xPortStartScheduler+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0024a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024a6:	f383 8811 	msr	BASEPRI, r3
1a0024aa:	f3bf 8f6f 	isb	sy
1a0024ae:	f3bf 8f4f 	dsb	sy
1a0024b2:	e7fe      	b.n	1a0024b2 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0024b4:	4b39      	ldr	r3, [pc, #228]	; (1a00259c <xPortStartScheduler+0x104>)
1a0024b6:	681a      	ldr	r2, [r3, #0]
1a0024b8:	4b3a      	ldr	r3, [pc, #232]	; (1a0025a4 <xPortStartScheduler+0x10c>)
1a0024ba:	429a      	cmp	r2, r3
1a0024bc:	d108      	bne.n	1a0024d0 <xPortStartScheduler+0x38>
1a0024be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024c2:	f383 8811 	msr	BASEPRI, r3
1a0024c6:	f3bf 8f6f 	isb	sy
1a0024ca:	f3bf 8f4f 	dsb	sy
1a0024ce:	e7fe      	b.n	1a0024ce <xPortStartScheduler+0x36>

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
1a0024d0:	b510      	push	{r4, lr}
1a0024d2:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a0024d4:	4b34      	ldr	r3, [pc, #208]	; (1a0025a8 <xPortStartScheduler+0x110>)
1a0024d6:	781a      	ldrb	r2, [r3, #0]
1a0024d8:	b2d2      	uxtb	r2, r2
1a0024da:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a0024dc:	22ff      	movs	r2, #255	; 0xff
1a0024de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a0024e0:	781b      	ldrb	r3, [r3, #0]
1a0024e2:	b2db      	uxtb	r3, r3
1a0024e4:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a0024e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0024ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a0024f0:	4a2e      	ldr	r2, [pc, #184]	; (1a0025ac <xPortStartScheduler+0x114>)
1a0024f2:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a0024f4:	2207      	movs	r2, #7
1a0024f6:	4b2e      	ldr	r3, [pc, #184]	; (1a0025b0 <xPortStartScheduler+0x118>)
1a0024f8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0024fa:	e009      	b.n	1a002510 <xPortStartScheduler+0x78>
		{
			ulMaxPRIGROUPValue--;
1a0024fc:	4a2c      	ldr	r2, [pc, #176]	; (1a0025b0 <xPortStartScheduler+0x118>)
1a0024fe:	6813      	ldr	r3, [r2, #0]
1a002500:	3b01      	subs	r3, #1
1a002502:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002504:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002508:	005b      	lsls	r3, r3, #1
1a00250a:	b2db      	uxtb	r3, r3
1a00250c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002510:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002514:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002518:	d1f0      	bne.n	1a0024fc <xPortStartScheduler+0x64>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00251a:	4b25      	ldr	r3, [pc, #148]	; (1a0025b0 <xPortStartScheduler+0x118>)
1a00251c:	681b      	ldr	r3, [r3, #0]
1a00251e:	f1c3 0207 	rsb	r2, r3, #7
1a002522:	2a03      	cmp	r2, #3
1a002524:	d008      	beq.n	1a002538 <xPortStartScheduler+0xa0>
1a002526:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00252a:	f383 8811 	msr	BASEPRI, r3
1a00252e:	f3bf 8f6f 	isb	sy
1a002532:	f3bf 8f4f 	dsb	sy
1a002536:	e7fe      	b.n	1a002536 <xPortStartScheduler+0x9e>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
1a002538:	2a03      	cmp	r2, #3
1a00253a:	d008      	beq.n	1a00254e <xPortStartScheduler+0xb6>
1a00253c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002540:	f383 8811 	msr	BASEPRI, r3
1a002544:	f3bf 8f6f 	isb	sy
1a002548:	f3bf 8f4f 	dsb	sy
1a00254c:	e7fe      	b.n	1a00254c <xPortStartScheduler+0xb4>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a00254e:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002550:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002554:	4a16      	ldr	r2, [pc, #88]	; (1a0025b0 <xPortStartScheduler+0x118>)
1a002556:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a002558:	9b01      	ldr	r3, [sp, #4]
1a00255a:	b2db      	uxtb	r3, r3
1a00255c:	4a12      	ldr	r2, [pc, #72]	; (1a0025a8 <xPortStartScheduler+0x110>)
1a00255e:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002560:	4b14      	ldr	r3, [pc, #80]	; (1a0025b4 <xPortStartScheduler+0x11c>)
1a002562:	681a      	ldr	r2, [r3, #0]
1a002564:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a002568:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a00256a:	681a      	ldr	r2, [r3, #0]
1a00256c:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002570:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
1a002572:	f7ff ff75 	bl	1a002460 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
1a002576:	2400      	movs	r4, #0
1a002578:	4b0f      	ldr	r3, [pc, #60]	; (1a0025b8 <xPortStartScheduler+0x120>)
1a00257a:	601c      	str	r4, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
1a00257c:	f7ff feb4 	bl	1a0022e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002580:	4a0e      	ldr	r2, [pc, #56]	; (1a0025bc <xPortStartScheduler+0x124>)
1a002582:	6813      	ldr	r3, [r2, #0]
1a002584:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a002588:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
1a00258a:	f7ff fe99 	bl	1a0022c0 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
1a00258e:	f7ff fa8f 	bl	1a001ab0 <vTaskSwitchContext>
	prvTaskExitError();
1a002592:	f7ff fe75 	bl	1a002280 <prvTaskExitError>

	/* Should not get here! */
	return 0;
}
1a002596:	4620      	mov	r0, r4
1a002598:	b002      	add	sp, #8
1a00259a:	bd10      	pop	{r4, pc}
1a00259c:	e000ed00 	.word	0xe000ed00
1a0025a0:	410fc271 	.word	0x410fc271
1a0025a4:	410fc270 	.word	0x410fc270
1a0025a8:	e000e400 	.word	0xe000e400
1a0025ac:	10002b34 	.word	0x10002b34
1a0025b0:	10002b38 	.word	0x10002b38
1a0025b4:	e000ed20 	.word	0xe000ed20
1a0025b8:	10000004 	.word	0x10000004
1a0025bc:	e000ef34 	.word	0xe000ef34

1a0025c0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a0025c0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a0025c4:	2b0f      	cmp	r3, #15
1a0025c6:	d90f      	bls.n	1a0025e8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a0025c8:	4a10      	ldr	r2, [pc, #64]	; (1a00260c <vPortValidateInterruptPriority+0x4c>)
1a0025ca:	5c9b      	ldrb	r3, [r3, r2]
1a0025cc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority <= ucMaxSysCallPriority );
1a0025ce:	4a10      	ldr	r2, [pc, #64]	; (1a002610 <vPortValidateInterruptPriority+0x50>)
1a0025d0:	7812      	ldrb	r2, [r2, #0]
1a0025d2:	4293      	cmp	r3, r2
1a0025d4:	d908      	bls.n	1a0025e8 <vPortValidateInterruptPriority+0x28>
1a0025d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025da:	f383 8811 	msr	BASEPRI, r3
1a0025de:	f3bf 8f6f 	isb	sy
1a0025e2:	f3bf 8f4f 	dsb	sy
1a0025e6:	e7fe      	b.n	1a0025e6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a0025e8:	4b0a      	ldr	r3, [pc, #40]	; (1a002614 <vPortValidateInterruptPriority+0x54>)
1a0025ea:	681b      	ldr	r3, [r3, #0]
1a0025ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0025f0:	4a09      	ldr	r2, [pc, #36]	; (1a002618 <vPortValidateInterruptPriority+0x58>)
1a0025f2:	6812      	ldr	r2, [r2, #0]
1a0025f4:	4293      	cmp	r3, r2
1a0025f6:	d908      	bls.n	1a00260a <vPortValidateInterruptPriority+0x4a>
1a0025f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025fc:	f383 8811 	msr	BASEPRI, r3
1a002600:	f3bf 8f6f 	isb	sy
1a002604:	f3bf 8f4f 	dsb	sy
1a002608:	e7fe      	b.n	1a002608 <vPortValidateInterruptPriority+0x48>
1a00260a:	4770      	bx	lr
1a00260c:	e000e3f0 	.word	0xe000e3f0
1a002610:	10002b34 	.word	0x10002b34
1a002614:	e000ed0c 	.word	0xe000ed0c
1a002618:	10002b38 	.word	0x10002b38

1a00261c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a00261c:	4b04      	ldr	r3, [pc, #16]	; (1a002630 <cyclesCounterInit+0x14>)
1a00261e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a002620:	4b04      	ldr	r3, [pc, #16]	; (1a002634 <cyclesCounterInit+0x18>)
1a002622:	681a      	ldr	r2, [r3, #0]
1a002624:	6813      	ldr	r3, [r2, #0]
1a002626:	f043 0301 	orr.w	r3, r3, #1
1a00262a:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00262c:	2001      	movs	r0, #1
1a00262e:	4770      	bx	lr
1a002630:	1000000c 	.word	0x1000000c
1a002634:	10000008 	.word	0x10000008

1a002638 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002638:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00263a:	4d09      	ldr	r5, [pc, #36]	; (1a002660 <gpioObtainPinInit+0x28>)
1a00263c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002640:	182c      	adds	r4, r5, r0
1a002642:	5c28      	ldrb	r0, [r5, r0]
1a002644:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002646:	7861      	ldrb	r1, [r4, #1]
1a002648:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00264a:	78a2      	ldrb	r2, [r4, #2]
1a00264c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00264e:	78e2      	ldrb	r2, [r4, #3]
1a002650:	9b02      	ldr	r3, [sp, #8]
1a002652:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a002654:	7922      	ldrb	r2, [r4, #4]
1a002656:	9b03      	ldr	r3, [sp, #12]
1a002658:	701a      	strb	r2, [r3, #0]
}
1a00265a:	bc30      	pop	{r4, r5}
1a00265c:	4770      	bx	lr
1a00265e:	bf00      	nop
1a002660:	1a0040bc 	.word	0x1a0040bc

1a002664 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a002664:	b570      	push	{r4, r5, r6, lr}
1a002666:	b084      	sub	sp, #16
1a002668:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00266a:	2300      	movs	r3, #0
1a00266c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002670:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002674:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002678:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00267c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002680:	ab03      	add	r3, sp, #12
1a002682:	9300      	str	r3, [sp, #0]
1a002684:	f10d 030b 	add.w	r3, sp, #11
1a002688:	9301      	str	r3, [sp, #4]
1a00268a:	f10d 010f 	add.w	r1, sp, #15
1a00268e:	f10d 020e 	add.w	r2, sp, #14
1a002692:	f10d 030d 	add.w	r3, sp, #13
1a002696:	f7ff ffcf 	bl	1a002638 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00269a:	2c05      	cmp	r4, #5
1a00269c:	f200 80a8 	bhi.w	1a0027f0 <gpioInit+0x18c>
1a0026a0:	e8df f004 	tbb	[pc, r4]
1a0026a4:	46278408 	.word	0x46278408
1a0026a8:	0365      	.short	0x0365

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0026aa:	4853      	ldr	r0, [pc, #332]	; (1a0027f8 <gpioInit+0x194>)
1a0026ac:	f001 f882 	bl	1a0037b4 <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a0026b0:	2001      	movs	r0, #1
   switch(config) {

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;
1a0026b2:	e09e      	b.n	1a0027f2 <gpioInit+0x18e>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a0026b4:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0026b8:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0026bc:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0026c0:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0026c4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0026c8:	494c      	ldr	r1, [pc, #304]	; (1a0027fc <gpioInit+0x198>)
1a0026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0026ce:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0026d2:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0026d6:	2001      	movs	r0, #1
1a0026d8:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0026dc:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a0026e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0026e4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0026e8:	ea22 0204 	bic.w	r2, r2, r4
1a0026ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0026f0:	e07f      	b.n	1a0027f2 <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a0026f2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0026f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0026fa:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0026fe:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002702:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002706:	493d      	ldr	r1, [pc, #244]	; (1a0027fc <gpioInit+0x198>)
1a002708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00270c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002710:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002714:	2001      	movs	r0, #1
1a002716:	fa00 f402 	lsl.w	r4, r0, r2
1a00271a:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a00271e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002722:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a002726:	ea22 0204 	bic.w	r2, r2, r4
1a00272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a00272e:	e060      	b.n	1a0027f2 <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a002730:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002734:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002738:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a00273c:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002740:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002744:	492d      	ldr	r1, [pc, #180]	; (1a0027fc <gpioInit+0x198>)
1a002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00274a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00274e:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002752:	2001      	movs	r0, #1
1a002754:	fa00 f402 	lsl.w	r4, r0, r2
1a002758:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a00275c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002760:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a002764:	ea22 0204 	bic.w	r2, r2, r4
1a002768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a00276c:	e041      	b.n	1a0027f2 <gpioInit+0x18e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a00276e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002772:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002776:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a00277a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00277e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002782:	491e      	ldr	r1, [pc, #120]	; (1a0027fc <gpioInit+0x198>)
1a002784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002788:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00278c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002790:	2001      	movs	r0, #1
1a002792:	fa00 f402 	lsl.w	r4, r0, r2
1a002796:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a00279a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00279e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0027a2:	ea22 0204 	bic.w	r2, r2, r4
1a0027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0027aa:	e022      	b.n	1a0027f2 <gpioInit+0x18e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a0027ac:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0027b0:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0027b4:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0027b8:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0027bc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0027c0:	490e      	ldr	r1, [pc, #56]	; (1a0027fc <gpioInit+0x198>)
1a0027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0027c6:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0027ca:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a0027ce:	b25a      	sxtb	r2, r3
1a0027d0:	2001      	movs	r0, #1
1a0027d2:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a0027d6:	4a08      	ldr	r2, [pc, #32]	; (1a0027f8 <gpioInit+0x194>)
1a0027d8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0027dc:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a0027e0:	4331      	orrs	r1, r6
1a0027e2:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a0027e6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0027ea:	2100      	movs	r1, #0
1a0027ec:	54d1      	strb	r1, [r2, r3]
1a0027ee:	e000      	b.n	1a0027f2 <gpioInit+0x18e>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

   default:
      ret_val = 0;
1a0027f0:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a0027f2:	b004      	add	sp, #16
1a0027f4:	bd70      	pop	{r4, r5, r6, pc}
1a0027f6:	bf00      	nop
1a0027f8:	400f4000 	.word	0x400f4000
1a0027fc:	40086000 	.word	0x40086000

1a002800 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a002800:	b510      	push	{r4, lr}
1a002802:	b084      	sub	sp, #16
1a002804:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002806:	2300      	movs	r3, #0
1a002808:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00280c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002810:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002814:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002818:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00281c:	ab03      	add	r3, sp, #12
1a00281e:	9300      	str	r3, [sp, #0]
1a002820:	f10d 030b 	add.w	r3, sp, #11
1a002824:	9301      	str	r3, [sp, #4]
1a002826:	f10d 010f 	add.w	r1, sp, #15
1a00282a:	f10d 020e 	add.w	r2, sp, #14
1a00282e:	f10d 030d 	add.w	r3, sp, #13
1a002832:	f7ff ff01 	bl	1a002638 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a002836:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a00283a:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a00283e:	3400      	adds	r4, #0
1a002840:	bf18      	it	ne
1a002842:	2401      	movne	r4, #1
1a002844:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a002848:	4a02      	ldr	r2, [pc, #8]	; (1a002854 <gpioWrite+0x54>)
1a00284a:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a00284c:	2001      	movs	r0, #1
1a00284e:	b004      	add	sp, #16
1a002850:	bd10      	pop	{r4, pc}
1a002852:	bf00      	nop
1a002854:	400f4000 	.word	0x400f4000

1a002858 <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a002858:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a00285a:	4908      	ldr	r1, [pc, #32]	; (1a00287c <tickerCallback+0x24>)
1a00285c:	e9d1 2300 	ldrd	r2, r3, [r1]
1a002860:	3201      	adds	r2, #1
1a002862:	f143 0300 	adc.w	r3, r3, #0
1a002866:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a00286a:	4b05      	ldr	r3, [pc, #20]	; (1a002880 <tickerCallback+0x28>)
1a00286c:	681b      	ldr	r3, [r3, #0]
1a00286e:	b123      	cbz	r3, 1a00287a <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a002870:	4b03      	ldr	r3, [pc, #12]	; (1a002880 <tickerCallback+0x28>)
1a002872:	681b      	ldr	r3, [r3, #0]
1a002874:	4a03      	ldr	r2, [pc, #12]	; (1a002884 <tickerCallback+0x2c>)
1a002876:	6810      	ldr	r0, [r2, #0]
1a002878:	4798      	blx	r3
1a00287a:	bd08      	pop	{r3, pc}
1a00287c:	10002be8 	.word	0x10002be8
1a002880:	10002b6c 	.word	0x10002b6c
1a002884:	10002b70 	.word	0x10002b70

1a002888 <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a002888:	b510      	push	{r4, lr}
1a00288a:	b082      	sub	sp, #8
1a00288c:	4601      	mov	r1, r0
      }
      return ret_val;
   #else
      #ifdef USE_FREERTOS
         static StaticTimer_t tickerObject;
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a00288e:	4b0e      	ldr	r3, [pc, #56]	; (1a0028c8 <tickInit+0x40>)
1a002890:	9300      	str	r3, [sp, #0]
1a002892:	4b0e      	ldr	r3, [pc, #56]	; (1a0028cc <tickInit+0x44>)
1a002894:	9301      	str	r3, [sp, #4]
1a002896:	480e      	ldr	r0, [pc, #56]	; (1a0028d0 <tickInit+0x48>)
1a002898:	2201      	movs	r2, #1
1a00289a:	2300      	movs	r3, #0
1a00289c:	f7ff fb62 	bl	1a001f64 <xTimerCreateStatic>
                                               pdTRUE,
                                               (void * const) (0),
                                               (TimerCallbackFunction_t)(tickerCallback),
                                               &tickerObject 
                                             );
         if (h == NULL)
1a0028a0:	b170      	cbz	r0, 1a0028c0 <tickInit+0x38>
1a0028a2:	4604      	mov	r4, r0
            return 0;
         return xTimerStart(h, 0) == pdPASS;
1a0028a4:	f7fe ff6a 	bl	1a00177c <xTaskGetTickCount>
1a0028a8:	4602      	mov	r2, r0
1a0028aa:	2300      	movs	r3, #0
1a0028ac:	9300      	str	r3, [sp, #0]
1a0028ae:	4620      	mov	r0, r4
1a0028b0:	2101      	movs	r1, #1
1a0028b2:	f7ff fb7f 	bl	1a001fb4 <xTimerGenericCommand>
1a0028b6:	2801      	cmp	r0, #1
1a0028b8:	bf14      	ite	ne
1a0028ba:	2000      	movne	r0, #0
1a0028bc:	2001      	moveq	r0, #1
1a0028be:	e000      	b.n	1a0028c2 <tickInit+0x3a>
                                               (void * const) (0),
                                               (TimerCallbackFunction_t)(tickerCallback),
                                               &tickerObject 
                                             );
         if (h == NULL)
            return 0;
1a0028c0:	2000      	movs	r0, #0
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a0028c2:	b002      	add	sp, #8
1a0028c4:	bd10      	pop	{r4, pc}
1a0028c6:	bf00      	nop
1a0028c8:	1a002859 	.word	0x1a002859
1a0028cc:	10002b3c 	.word	0x10002b3c
1a0028d0:	1a0041f4 	.word	0x1a0041f4

1a0028d4 <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a0028d4:	b570      	push	{r4, r5, r6, lr}
1a0028d6:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a0028d8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a0028dc:	009b      	lsls	r3, r3, #2
1a0028de:	4a21      	ldr	r2, [pc, #132]	; (1a002964 <uartProcessIRQ+0x90>)
1a0028e0:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0028e2:	6975      	ldr	r5, [r6, #20]
1a0028e4:	b2ed      	uxtb	r5, r5

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a0028e6:	f015 0f01 	tst.w	r5, #1
1a0028ea:	d019      	beq.n	1a002920 <uartProcessIRQ+0x4c>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a0028ec:	b930      	cbnz	r0, 1a0028fc <uartProcessIRQ+0x28>
1a0028ee:	4b1e      	ldr	r3, [pc, #120]	; (1a002968 <uartProcessIRQ+0x94>)
1a0028f0:	681b      	ldr	r3, [r3, #0]
1a0028f2:	b11b      	cbz	r3, 1a0028fc <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a0028f4:	4b1c      	ldr	r3, [pc, #112]	; (1a002968 <uartProcessIRQ+0x94>)
1a0028f6:	681b      	ldr	r3, [r3, #0]
1a0028f8:	2000      	movs	r0, #0
1a0028fa:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0028fc:	2c03      	cmp	r4, #3
1a0028fe:	d106      	bne.n	1a00290e <uartProcessIRQ+0x3a>
1a002900:	4b1a      	ldr	r3, [pc, #104]	; (1a00296c <uartProcessIRQ+0x98>)
1a002902:	681b      	ldr	r3, [r3, #0]
1a002904:	b11b      	cbz	r3, 1a00290e <uartProcessIRQ+0x3a>
         (*rxIsrCallbackUART2)(0);
1a002906:	4b19      	ldr	r3, [pc, #100]	; (1a00296c <uartProcessIRQ+0x98>)
1a002908:	681b      	ldr	r3, [r3, #0]
1a00290a:	2000      	movs	r0, #0
1a00290c:	4798      	blx	r3

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a00290e:	2c05      	cmp	r4, #5
1a002910:	d106      	bne.n	1a002920 <uartProcessIRQ+0x4c>
1a002912:	4b17      	ldr	r3, [pc, #92]	; (1a002970 <uartProcessIRQ+0x9c>)
1a002914:	681b      	ldr	r3, [r3, #0]
1a002916:	b11b      	cbz	r3, 1a002920 <uartProcessIRQ+0x4c>
         (*rxIsrCallbackUART3)(0);
1a002918:	4b15      	ldr	r3, [pc, #84]	; (1a002970 <uartProcessIRQ+0x9c>)
1a00291a:	681b      	ldr	r3, [r3, #0]
1a00291c:	2000      	movs	r0, #0
1a00291e:	4798      	blx	r3
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a002920:	f015 0f20 	tst.w	r5, #32
1a002924:	d01d      	beq.n	1a002962 <uartProcessIRQ+0x8e>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a002926:	6873      	ldr	r3, [r6, #4]
1a002928:	f013 0f02 	tst.w	r3, #2
1a00292c:	d019      	beq.n	1a002962 <uartProcessIRQ+0x8e>
       ( Chip_UART_GetIntsEnabled( lpcUarts[uart].uartAddr ) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a00292e:	b934      	cbnz	r4, 1a00293e <uartProcessIRQ+0x6a>
1a002930:	4b10      	ldr	r3, [pc, #64]	; (1a002974 <uartProcessIRQ+0xa0>)
1a002932:	681b      	ldr	r3, [r3, #0]
1a002934:	b11b      	cbz	r3, 1a00293e <uartProcessIRQ+0x6a>
         (*txIsrCallbackUART0)(0);
1a002936:	4b0f      	ldr	r3, [pc, #60]	; (1a002974 <uartProcessIRQ+0xa0>)
1a002938:	681b      	ldr	r3, [r3, #0]
1a00293a:	2000      	movs	r0, #0
1a00293c:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a00293e:	2c03      	cmp	r4, #3
1a002940:	d106      	bne.n	1a002950 <uartProcessIRQ+0x7c>
1a002942:	4b0d      	ldr	r3, [pc, #52]	; (1a002978 <uartProcessIRQ+0xa4>)
1a002944:	681b      	ldr	r3, [r3, #0]
1a002946:	b11b      	cbz	r3, 1a002950 <uartProcessIRQ+0x7c>
         (*txIsrCallbackUART2)(0);
1a002948:	4b0b      	ldr	r3, [pc, #44]	; (1a002978 <uartProcessIRQ+0xa4>)
1a00294a:	681b      	ldr	r3, [r3, #0]
1a00294c:	2000      	movs	r0, #0
1a00294e:	4798      	blx	r3

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a002950:	2c05      	cmp	r4, #5
1a002952:	d106      	bne.n	1a002962 <uartProcessIRQ+0x8e>
1a002954:	4b09      	ldr	r3, [pc, #36]	; (1a00297c <uartProcessIRQ+0xa8>)
1a002956:	681b      	ldr	r3, [r3, #0]
1a002958:	b11b      	cbz	r3, 1a002962 <uartProcessIRQ+0x8e>
         (*txIsrCallbackUART3)(0);
1a00295a:	4b08      	ldr	r3, [pc, #32]	; (1a00297c <uartProcessIRQ+0xa8>)
1a00295c:	681b      	ldr	r3, [r3, #0]
1a00295e:	2000      	movs	r0, #0
1a002960:	4798      	blx	r3
1a002962:	bd70      	pop	{r4, r5, r6, pc}
1a002964:	1a004200 	.word	0x1a004200
1a002968:	10002b74 	.word	0x10002b74
1a00296c:	10002b84 	.word	0x10002b84
1a002970:	10002b88 	.word	0x10002b88
1a002974:	10002b78 	.word	0x10002b78
1a002978:	10002b7c 	.word	0x10002b7c
1a00297c:	10002b80 	.word	0x10002b80

1a002980 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a002980:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002984:	0080      	lsls	r0, r0, #2
1a002986:	4b03      	ldr	r3, [pc, #12]	; (1a002994 <uartTxReady+0x14>)
1a002988:	581b      	ldr	r3, [r3, r0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00298a:	6958      	ldr	r0, [r3, #20]
}
1a00298c:	f000 0020 	and.w	r0, r0, #32
1a002990:	4770      	bx	lr
1a002992:	bf00      	nop
1a002994:	1a004200 	.word	0x1a004200

1a002998 <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a002998:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00299c:	0080      	lsls	r0, r0, #2
1a00299e:	4b02      	ldr	r3, [pc, #8]	; (1a0029a8 <uartTxWrite+0x10>)
1a0029a0:	581b      	ldr	r3, [r3, r0]
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a0029a2:	6019      	str	r1, [r3, #0]
1a0029a4:	4770      	bx	lr
1a0029a6:	bf00      	nop
1a0029a8:	1a004200 	.word	0x1a004200

1a0029ac <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0029ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0029b0:	4607      	mov	r7, r0
1a0029b2:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0029b4:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1a002a24 <uartInit+0x78>
1a0029b8:	0044      	lsls	r4, r0, #1
1a0029ba:	1823      	adds	r3, r4, r0
1a0029bc:	009b      	lsls	r3, r3, #2
1a0029be:	eb08 0503 	add.w	r5, r8, r3
1a0029c2:	f858 6003 	ldr.w	r6, [r8, r3]
1a0029c6:	4630      	mov	r0, r6
1a0029c8:	f000 faea 	bl	1a002fa0 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0029cc:	4630      	mov	r0, r6
1a0029ce:	4649      	mov	r1, r9
1a0029d0:	f000 fb10 	bl	1a002ff4 <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a0029d4:	2307      	movs	r3, #7
1a0029d6:	60b3      	str	r3, [r6, #8]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0029d8:	6833      	ldr	r3, [r6, #0]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a0029da:	2301      	movs	r3, #1
1a0029dc:	65f3      	str	r3, [r6, #92]	; 0x5c
   // Dummy read
   Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0029de:	7929      	ldrb	r1, [r5, #4]
1a0029e0:	796b      	ldrb	r3, [r5, #5]
1a0029e2:	79aa      	ldrb	r2, [r5, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0029e4:	f042 0218 	orr.w	r2, r2, #24
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0029e8:	480c      	ldr	r0, [pc, #48]	; (1a002a1c <uartInit+0x70>)
1a0029ea:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0029ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0029f2:	79ee      	ldrb	r6, [r5, #7]
1a0029f4:	7a2a      	ldrb	r2, [r5, #8]
1a0029f6:	7a69      	ldrb	r1, [r5, #9]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0029f8:	f041 01d0 	orr.w	r1, r1, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0029fc:	eb02 1346 	add.w	r3, r2, r6, lsl #5
1a002a00:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a002a04:	2f01      	cmp	r7, #1
1a002a06:	d107      	bne.n	1a002a18 <uartInit+0x6c>
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a002a08:	4a05      	ldr	r2, [pc, #20]	; (1a002a20 <uartInit+0x74>)
1a002a0a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a002a0c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a002a10:	64d3      	str	r3, [r2, #76]	; 0x4c
1a002a12:	221a      	movs	r2, #26
1a002a14:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
1a002a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a002a1c:	40086000 	.word	0x40086000
1a002a20:	40081000 	.word	0x40081000
1a002a24:	1a004200 	.word	0x1a004200

1a002a28 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a002a28:	b538      	push	{r3, r4, r5, lr}
1a002a2a:	4604      	mov	r4, r0
1a002a2c:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a002a2e:	4620      	mov	r0, r4
1a002a30:	f7ff ffa6 	bl	1a002980 <uartTxReady>
1a002a34:	2800      	cmp	r0, #0
1a002a36:	d0fa      	beq.n	1a002a2e <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a002a38:	4620      	mov	r0, r4
1a002a3a:	4629      	mov	r1, r5
1a002a3c:	f7ff ffac 	bl	1a002998 <uartTxWrite>
1a002a40:	bd38      	pop	{r3, r4, r5, pc}
1a002a42:	bf00      	nop

1a002a44 <uartWriteString>:
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a002a44:	b538      	push	{r3, r4, r5, lr}
1a002a46:	4605      	mov	r5, r0
1a002a48:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a002a4a:	e003      	b.n	1a002a54 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a002a4c:	4628      	mov	r0, r5
1a002a4e:	f7ff ffeb 	bl	1a002a28 <uartWriteByte>
      str++;
1a002a52:	3401      	adds	r4, #1
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
   while( *str != 0 ) {
1a002a54:	7821      	ldrb	r1, [r4, #0]
1a002a56:	2900      	cmp	r1, #0
1a002a58:	d1f8      	bne.n	1a002a4c <uartWriteString+0x8>
      uartWriteByte( uart, (uint8_t)*str );
      str++;
   }
}
1a002a5a:	bd38      	pop	{r3, r4, r5, pc}

1a002a5c <UART2_IRQHandler>:
}

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a002a5c:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a002a5e:	2003      	movs	r0, #3
1a002a60:	f7ff ff38 	bl	1a0028d4 <uartProcessIRQ>
1a002a64:	bd08      	pop	{r3, pc}
1a002a66:	bf00      	nop

1a002a68 <UART3_IRQHandler>:
}

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a002a68:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a002a6a:	2005      	movs	r0, #5
1a002a6c:	f7ff ff32 	bl	1a0028d4 <uartProcessIRQ>
1a002a70:	bd08      	pop	{r3, pc}
1a002a72:	bf00      	nop

1a002a74 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a002a74:	e7fe      	b.n	1a002a74 <errorOcurred>
1a002a76:	bf00      	nop

1a002a78 <doNothing>:
}

static void doNothing( void* ptr )
{
1a002a78:	4770      	bx	lr
1a002a7a:	bf00      	nop

1a002a7c <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a002a7c:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002a7e:	2400      	movs	r4, #0
1a002a80:	e013      	b.n	1a002aaa <TIMER0_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002a82:	4b0b      	ldr	r3, [pc, #44]	; (1a002ab0 <TIMER0_IRQHandler+0x34>)
1a002a84:	681a      	ldr	r2, [r3, #0]
1a002a86:	f004 010f 	and.w	r1, r4, #15
1a002a8a:	2301      	movs	r3, #1
1a002a8c:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a002a8e:	421a      	tst	r2, r3
1a002a90:	d009      	beq.n	1a002aa6 <TIMER0_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002a92:	4b08      	ldr	r3, [pc, #32]	; (1a002ab4 <TIMER0_IRQHandler+0x38>)
1a002a94:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a002a98:	2000      	movs	r0, #0
1a002a9a:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002a9c:	b262      	sxtb	r2, r4
1a002a9e:	2301      	movs	r3, #1
1a002aa0:	4093      	lsls	r3, r2
1a002aa2:	4a03      	ldr	r2, [pc, #12]	; (1a002ab0 <TIMER0_IRQHandler+0x34>)
1a002aa4:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002aa6:	3401      	adds	r4, #1
1a002aa8:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002aaa:	2c03      	cmp	r4, #3
1a002aac:	d9e9      	bls.n	1a002a82 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a002aae:	bd10      	pop	{r4, pc}
1a002ab0:	40084000 	.word	0x40084000
1a002ab4:	10000010 	.word	0x10000010

1a002ab8 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a002ab8:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002aba:	2400      	movs	r4, #0
1a002abc:	e014      	b.n	1a002ae8 <TIMER1_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002abe:	4b0c      	ldr	r3, [pc, #48]	; (1a002af0 <TIMER1_IRQHandler+0x38>)
1a002ac0:	681a      	ldr	r2, [r3, #0]
1a002ac2:	f004 010f 	and.w	r1, r4, #15
1a002ac6:	2301      	movs	r3, #1
1a002ac8:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a002aca:	421a      	tst	r2, r3
1a002acc:	d00a      	beq.n	1a002ae4 <TIMER1_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002ace:	1d23      	adds	r3, r4, #4
1a002ad0:	4a08      	ldr	r2, [pc, #32]	; (1a002af4 <TIMER1_IRQHandler+0x3c>)
1a002ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002ad6:	2000      	movs	r0, #0
1a002ad8:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002ada:	b262      	sxtb	r2, r4
1a002adc:	2301      	movs	r3, #1
1a002ade:	4093      	lsls	r3, r2
1a002ae0:	4a03      	ldr	r2, [pc, #12]	; (1a002af0 <TIMER1_IRQHandler+0x38>)
1a002ae2:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002ae4:	3401      	adds	r4, #1
1a002ae6:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002ae8:	2c03      	cmp	r4, #3
1a002aea:	d9e8      	bls.n	1a002abe <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a002aec:	bd10      	pop	{r4, pc}
1a002aee:	bf00      	nop
1a002af0:	40085000 	.word	0x40085000
1a002af4:	10000010 	.word	0x10000010

1a002af8 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a002af8:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002afa:	2400      	movs	r4, #0
1a002afc:	e015      	b.n	1a002b2a <TIMER2_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002afe:	4b0c      	ldr	r3, [pc, #48]	; (1a002b30 <TIMER2_IRQHandler+0x38>)
1a002b00:	681a      	ldr	r2, [r3, #0]
1a002b02:	f004 010f 	and.w	r1, r4, #15
1a002b06:	2301      	movs	r3, #1
1a002b08:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a002b0a:	421a      	tst	r2, r3
1a002b0c:	d00b      	beq.n	1a002b26 <TIMER2_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002b0e:	f104 0308 	add.w	r3, r4, #8
1a002b12:	4a08      	ldr	r2, [pc, #32]	; (1a002b34 <TIMER2_IRQHandler+0x3c>)
1a002b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002b18:	2000      	movs	r0, #0
1a002b1a:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002b1c:	b262      	sxtb	r2, r4
1a002b1e:	2301      	movs	r3, #1
1a002b20:	4093      	lsls	r3, r2
1a002b22:	4a03      	ldr	r2, [pc, #12]	; (1a002b30 <TIMER2_IRQHandler+0x38>)
1a002b24:	6013      	str	r3, [r2, #0]
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002b26:	3401      	adds	r4, #1
1a002b28:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002b2a:	2c03      	cmp	r4, #3
1a002b2c:	d9e7      	bls.n	1a002afe <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a002b2e:	bd10      	pop	{r4, pc}
1a002b30:	400c3000 	.word	0x400c3000
1a002b34:	10000010 	.word	0x10000010

1a002b38 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a002b38:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002b3a:	2400      	movs	r4, #0
1a002b3c:	e015      	b.n	1a002b6a <TIMER3_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002b3e:	4b0c      	ldr	r3, [pc, #48]	; (1a002b70 <TIMER3_IRQHandler+0x38>)
1a002b40:	681a      	ldr	r2, [r3, #0]
1a002b42:	f004 010f 	and.w	r1, r4, #15
1a002b46:	2301      	movs	r3, #1
1a002b48:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a002b4a:	421a      	tst	r2, r3
1a002b4c:	d00b      	beq.n	1a002b66 <TIMER3_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002b4e:	f104 030c 	add.w	r3, r4, #12
1a002b52:	4a08      	ldr	r2, [pc, #32]	; (1a002b74 <TIMER3_IRQHandler+0x3c>)
1a002b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002b58:	2000      	movs	r0, #0
1a002b5a:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002b5c:	b262      	sxtb	r2, r4
1a002b5e:	2301      	movs	r3, #1
1a002b60:	4093      	lsls	r3, r2
1a002b62:	4a03      	ldr	r2, [pc, #12]	; (1a002b70 <TIMER3_IRQHandler+0x38>)
1a002b64:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002b66:	3401      	adds	r4, #1
1a002b68:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002b6a:	2c03      	cmp	r4, #3
1a002b6c:	d9e7      	bls.n	1a002b3e <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a002b6e:	bd10      	pop	{r4, pc}
1a002b70:	400c4000 	.word	0x400c4000
1a002b74:	10000010 	.word	0x10000010

1a002b78 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a002b78:	b508      	push	{r3, lr}
   *printer = uart;
1a002b7a:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a002b7c:	4608      	mov	r0, r1
1a002b7e:	4611      	mov	r1, r2
1a002b80:	f7ff ff14 	bl	1a0029ac <uartInit>
1a002b84:	bd08      	pop	{r3, pc}
1a002b86:	bf00      	nop

1a002b88 <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a002b88:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a002b8a:	f7ff ff5b 	bl	1a002a44 <uartWriteString>
1a002b8e:	bd08      	pop	{r3, pc}

1a002b90 <printEnter>:
}

void printEnter( print_t printer )
{
1a002b90:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a002b92:	4902      	ldr	r1, [pc, #8]	; (1a002b9c <printEnter+0xc>)
1a002b94:	f7ff ff56 	bl	1a002a44 <uartWriteString>
1a002b98:	bd08      	pop	{r3, pc}
1a002b9a:	bf00      	nop
1a002b9c:	1a004248 	.word	0x1a004248

1a002ba0 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a002ba0:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a002ba2:	f000 fb1b 	bl	1a0031dc <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a002ba6:	4b3a      	ldr	r3, [pc, #232]	; (1a002c90 <boardInit+0xf0>)
1a002ba8:	6818      	ldr	r0, [r3, #0]
1a002baa:	f7ff fd37 	bl	1a00261c <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a002bae:	2001      	movs	r0, #1
1a002bb0:	2100      	movs	r1, #0
1a002bb2:	f7ff fe69 	bl	1a002888 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a002bb6:	2000      	movs	r0, #0
1a002bb8:	2105      	movs	r1, #5
1a002bba:	f7ff fd53 	bl	1a002664 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a002bbe:	2024      	movs	r0, #36	; 0x24
1a002bc0:	2100      	movs	r1, #0
1a002bc2:	f7ff fd4f 	bl	1a002664 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a002bc6:	2025      	movs	r0, #37	; 0x25
1a002bc8:	2100      	movs	r1, #0
1a002bca:	f7ff fd4b 	bl	1a002664 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a002bce:	2026      	movs	r0, #38	; 0x26
1a002bd0:	2100      	movs	r1, #0
1a002bd2:	f7ff fd47 	bl	1a002664 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a002bd6:	2027      	movs	r0, #39	; 0x27
1a002bd8:	2100      	movs	r1, #0
1a002bda:	f7ff fd43 	bl	1a002664 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a002bde:	2028      	movs	r0, #40	; 0x28
1a002be0:	2101      	movs	r1, #1
1a002be2:	f7ff fd3f 	bl	1a002664 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a002be6:	2029      	movs	r0, #41	; 0x29
1a002be8:	2101      	movs	r1, #1
1a002bea:	f7ff fd3b 	bl	1a002664 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a002bee:	202a      	movs	r0, #42	; 0x2a
1a002bf0:	2101      	movs	r1, #1
1a002bf2:	f7ff fd37 	bl	1a002664 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a002bf6:	202b      	movs	r0, #43	; 0x2b
1a002bf8:	2101      	movs	r1, #1
1a002bfa:	f7ff fd33 	bl	1a002664 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a002bfe:	202c      	movs	r0, #44	; 0x2c
1a002c00:	2101      	movs	r1, #1
1a002c02:	f7ff fd2f 	bl	1a002664 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a002c06:	202d      	movs	r0, #45	; 0x2d
1a002c08:	2101      	movs	r1, #1
1a002c0a:	f7ff fd2b 	bl	1a002664 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a002c0e:	202e      	movs	r0, #46	; 0x2e
1a002c10:	2100      	movs	r1, #0
1a002c12:	f7ff fd27 	bl	1a002664 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a002c16:	202f      	movs	r0, #47	; 0x2f
1a002c18:	2100      	movs	r1, #0
1a002c1a:	f7ff fd23 	bl	1a002664 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a002c1e:	2030      	movs	r0, #48	; 0x30
1a002c20:	2100      	movs	r1, #0
1a002c22:	f7ff fd1f 	bl	1a002664 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a002c26:	2031      	movs	r0, #49	; 0x31
1a002c28:	2100      	movs	r1, #0
1a002c2a:	f7ff fd1b 	bl	1a002664 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a002c2e:	2032      	movs	r0, #50	; 0x32
1a002c30:	2100      	movs	r1, #0
1a002c32:	f7ff fd17 	bl	1a002664 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a002c36:	2033      	movs	r0, #51	; 0x33
1a002c38:	2100      	movs	r1, #0
1a002c3a:	f7ff fd13 	bl	1a002664 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a002c3e:	2034      	movs	r0, #52	; 0x34
1a002c40:	2100      	movs	r1, #0
1a002c42:	f7ff fd0f 	bl	1a002664 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a002c46:	2035      	movs	r0, #53	; 0x35
1a002c48:	2100      	movs	r1, #0
1a002c4a:	f7ff fd0b 	bl	1a002664 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a002c4e:	2036      	movs	r0, #54	; 0x36
1a002c50:	2101      	movs	r1, #1
1a002c52:	f7ff fd07 	bl	1a002664 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a002c56:	2037      	movs	r0, #55	; 0x37
1a002c58:	2101      	movs	r1, #1
1a002c5a:	f7ff fd03 	bl	1a002664 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a002c5e:	2038      	movs	r0, #56	; 0x38
1a002c60:	2101      	movs	r1, #1
1a002c62:	f7ff fcff 	bl	1a002664 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a002c66:	2039      	movs	r0, #57	; 0x39
1a002c68:	2101      	movs	r1, #1
1a002c6a:	f7ff fcfb 	bl	1a002664 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a002c6e:	203a      	movs	r0, #58	; 0x3a
1a002c70:	2101      	movs	r1, #1
1a002c72:	f7ff fcf7 	bl	1a002664 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a002c76:	203b      	movs	r0, #59	; 0x3b
1a002c78:	2101      	movs	r1, #1
1a002c7a:	f7ff fcf3 	bl	1a002664 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a002c7e:	203c      	movs	r0, #60	; 0x3c
1a002c80:	2101      	movs	r1, #1
1a002c82:	f7ff fcef 	bl	1a002664 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a002c86:	203d      	movs	r0, #61	; 0x3d
1a002c88:	2101      	movs	r1, #1
1a002c8a:	f7ff fceb 	bl	1a002664 <gpioInit>
1a002c8e:	bd08      	pop	{r3, pc}
1a002c90:	10002bf8 	.word	0x10002bf8

1a002c94 <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a002c94:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002c96:	2200      	movs	r2, #0
1a002c98:	e014      	b.n	1a002cc4 <Board_LED_Init+0x30>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002c9a:	4b0c      	ldr	r3, [pc, #48]	; (1a002ccc <Board_LED_Init+0x38>)
1a002c9c:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a002ca0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a002ca4:	7859      	ldrb	r1, [r3, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002ca6:	480a      	ldr	r0, [pc, #40]	; (1a002cd0 <Board_LED_Init+0x3c>)
1a002ca8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a002cac:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a002cb0:	2301      	movs	r3, #1
1a002cb2:	408b      	lsls	r3, r1
1a002cb4:	4333      	orrs	r3, r6
1a002cb6:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a002cba:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a002cbe:	2300      	movs	r3, #0
1a002cc0:	5443      	strb	r3, [r0, r1]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002cc2:	3201      	adds	r2, #1
1a002cc4:	2a05      	cmp	r2, #5
1a002cc6:	d9e8      	bls.n	1a002c9a <Board_LED_Init+0x6>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a002cc8:	bc70      	pop	{r4, r5, r6}
1a002cca:	4770      	bx	lr
1a002ccc:	1a004270 	.word	0x1a004270
1a002cd0:	400f4000 	.word	0x400f4000

1a002cd4 <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a002cd4:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002cd6:	2300      	movs	r3, #0
1a002cd8:	e011      	b.n	1a002cfe <Board_TEC_Init+0x2a>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002cda:	490b      	ldr	r1, [pc, #44]	; (1a002d08 <Board_TEC_Init+0x34>)
1a002cdc:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002ce0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002ce4:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002ce6:	4c09      	ldr	r4, [pc, #36]	; (1a002d0c <Board_TEC_Init+0x38>)
1a002ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002cec:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a002cf0:	2101      	movs	r1, #1
1a002cf2:	40a9      	lsls	r1, r5
1a002cf4:	ea20 0101 	bic.w	r1, r0, r1
1a002cf8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002cfc:	3301      	adds	r3, #1
1a002cfe:	2b03      	cmp	r3, #3
1a002d00:	d9eb      	bls.n	1a002cda <Board_TEC_Init+0x6>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a002d02:	bc30      	pop	{r4, r5}
1a002d04:	4770      	bx	lr
1a002d06:	bf00      	nop
1a002d08:	1a004268 	.word	0x1a004268
1a002d0c:	400f4000 	.word	0x400f4000

1a002d10 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a002d10:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002d12:	2300      	movs	r3, #0
1a002d14:	e011      	b.n	1a002d3a <Board_GPIO_Init+0x2a>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002d16:	490b      	ldr	r1, [pc, #44]	; (1a002d44 <Board_GPIO_Init+0x34>)
1a002d18:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002d1c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002d20:	784d      	ldrb	r5, [r1, #1]
1a002d22:	4c09      	ldr	r4, [pc, #36]	; (1a002d48 <Board_GPIO_Init+0x38>)
1a002d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002d28:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a002d2c:	2101      	movs	r1, #1
1a002d2e:	40a9      	lsls	r1, r5
1a002d30:	ea20 0101 	bic.w	r1, r0, r1
1a002d34:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002d38:	3301      	adds	r3, #1
1a002d3a:	2b08      	cmp	r3, #8
1a002d3c:	d9eb      	bls.n	1a002d16 <Board_GPIO_Init+0x6>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a002d3e:	bc30      	pop	{r4, r5}
1a002d40:	4770      	bx	lr
1a002d42:	bf00      	nop
1a002d44:	1a00424c 	.word	0x1a00424c
1a002d48:	400f4000 	.word	0x400f4000

1a002d4c <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a002d4c:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a002d4e:	4c0b      	ldr	r4, [pc, #44]	; (1a002d7c <Board_SPI_Init+0x30>)
1a002d50:	4620      	mov	r0, r4
1a002d52:	f000 fe19 	bl	1a003988 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002d56:	6863      	ldr	r3, [r4, #4]
1a002d58:	f023 0304 	bic.w	r3, r3, #4
1a002d5c:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002d5e:	6823      	ldr	r3, [r4, #0]
1a002d60:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002d64:	f043 0307 	orr.w	r3, r3, #7
1a002d68:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002d6a:	4620      	mov	r0, r4
1a002d6c:	4904      	ldr	r1, [pc, #16]	; (1a002d80 <Board_SPI_Init+0x34>)
1a002d6e:	f000 fdeb 	bl	1a003948 <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002d72:	6863      	ldr	r3, [r4, #4]
1a002d74:	f043 0302 	orr.w	r3, r3, #2
1a002d78:	6063      	str	r3, [r4, #4]
1a002d7a:	bd10      	pop	{r4, pc}
1a002d7c:	400c5000 	.word	0x400c5000
1a002d80:	000186a0 	.word	0x000186a0

1a002d84 <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a002d84:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a002d86:	2000      	movs	r0, #0
1a002d88:	f000 f8ca 	bl	1a002f20 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002d8c:	f640 0208 	movw	r2, #2056	; 0x808
1a002d90:	4b03      	ldr	r3, [pc, #12]	; (1a002da0 <Board_I2C_Init+0x1c>)
1a002d92:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002d96:	2000      	movs	r0, #0
1a002d98:	4902      	ldr	r1, [pc, #8]	; (1a002da4 <Board_I2C_Init+0x20>)
1a002d9a:	f000 f8d3 	bl	1a002f44 <Chip_I2C_SetClockRate>
1a002d9e:	bd08      	pop	{r3, pc}
1a002da0:	40086000 	.word	0x40086000
1a002da4:	000f4240 	.word	0x000f4240

1a002da8 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002da8:	b510      	push	{r4, lr}
1a002daa:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a002dac:	4c08      	ldr	r4, [pc, #32]	; (1a002dd0 <Board_ADC_Init+0x28>)
1a002dae:	4620      	mov	r0, r4
1a002db0:	4669      	mov	r1, sp
1a002db2:	f000 f9d3 	bl	1a00315c <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002db6:	4620      	mov	r0, r4
1a002db8:	4669      	mov	r1, sp
1a002dba:	4a06      	ldr	r2, [pc, #24]	; (1a002dd4 <Board_ADC_Init+0x2c>)
1a002dbc:	f000 f9ee 	bl	1a00319c <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002dc0:	4620      	mov	r0, r4
1a002dc2:	4669      	mov	r1, sp
1a002dc4:	2200      	movs	r2, #0
1a002dc6:	f000 fa03 	bl	1a0031d0 <Chip_ADC_SetResolution>
}
1a002dca:	b002      	add	sp, #8
1a002dcc:	bd10      	pop	{r4, pc}
1a002dce:	bf00      	nop
1a002dd0:	400e3000 	.word	0x400e3000
1a002dd4:	00061a80 	.word	0x00061a80

1a002dd8 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002dd8:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a002dda:	4c07      	ldr	r4, [pc, #28]	; (1a002df8 <Board_Debug_Init+0x20>)
1a002ddc:	4620      	mov	r0, r4
1a002dde:	f000 f8df 	bl	1a002fa0 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002de2:	4620      	mov	r0, r4
1a002de4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002de8:	f000 f924 	bl	1a003034 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002dec:	2303      	movs	r3, #3
1a002dee:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a002df0:	2301      	movs	r3, #1
1a002df2:	65e3      	str	r3, [r4, #92]	; 0x5c
1a002df4:	bd10      	pop	{r4, pc}
1a002df6:	bf00      	nop
1a002df8:	400c1000 	.word	0x400c1000

1a002dfc <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002dfc:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002dfe:	f7ff ffeb 	bl	1a002dd8 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002e02:	480b      	ldr	r0, [pc, #44]	; (1a002e30 <Board_Init+0x34>)
1a002e04:	f000 fcd6 	bl	1a0037b4 <Chip_GPIO_Init>

   Board_LED_Init();
1a002e08:	f7ff ff44 	bl	1a002c94 <Board_LED_Init>
   Board_TEC_Init();
1a002e0c:	f7ff ff62 	bl	1a002cd4 <Board_TEC_Init>
   Board_SPI_Init();
1a002e10:	f7ff ff9c 	bl	1a002d4c <Board_SPI_Init>
   Board_GPIO_Init();
1a002e14:	f7ff ff7c 	bl	1a002d10 <Board_GPIO_Init>
   Board_I2C_Init();
1a002e18:	f7ff ffb4 	bl	1a002d84 <Board_I2C_Init>
   Board_ADC_Init();
1a002e1c:	f7ff ffc4 	bl	1a002da8 <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a002e20:	4a04      	ldr	r2, [pc, #16]	; (1a002e34 <Board_Init+0x38>)
1a002e22:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a002e26:	f043 0304 	orr.w	r3, r3, #4
1a002e2a:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a002e2e:	bd08      	pop	{r3, pc}
1a002e30:	400f4000 	.word	0x400f4000
1a002e34:	40043000 	.word	0x40043000

1a002e38 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a002e38:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a002e3a:	4b04      	ldr	r3, [pc, #16]	; (1a002e4c <SystemInit+0x14>)
1a002e3c:	4a04      	ldr	r2, [pc, #16]	; (1a002e50 <SystemInit+0x18>)
1a002e3e:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a002e40:	f000 fc8c 	bl	1a00375c <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a002e44:	f000 f856 	bl	1a002ef4 <Board_SystemInit>
1a002e48:	bd08      	pop	{r3, pc}
1a002e4a:	bf00      	nop
1a002e4c:	e000ed08 	.word	0xe000ed08
1a002e50:	1a000000 	.word	0x1a000000

1a002e54 <Board_SetupMuxing>:
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a002e54:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002e56:	2300      	movs	r3, #0
1a002e58:	e00c      	b.n	1a002e74 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002e5a:	4a09      	ldr	r2, [pc, #36]	; (1a002e80 <Board_SetupMuxing+0x2c>)
1a002e5c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002e60:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002e64:	784a      	ldrb	r2, [r1, #1]
1a002e66:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002e68:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002e6c:	4905      	ldr	r1, [pc, #20]	; (1a002e84 <Board_SetupMuxing+0x30>)
1a002e6e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002e72:	3301      	adds	r3, #1
1a002e74:	2b25      	cmp	r3, #37	; 0x25
1a002e76:	d9f0      	bls.n	1a002e5a <Board_SetupMuxing+0x6>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002e78:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002e7c:	4770      	bx	lr
1a002e7e:	bf00      	nop
1a002e80:	1a004288 	.word	0x1a004288
1a002e84:	40086000 	.word	0x40086000

1a002e88 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002e88:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002e8a:	4a17      	ldr	r2, [pc, #92]	; (1a002ee8 <Board_SetupClocking+0x60>)
1a002e8c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002e90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002e94:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002e98:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002e9c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002ea0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002ea4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002ea8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002eac:	2006      	movs	r0, #6
1a002eae:	490f      	ldr	r1, [pc, #60]	; (1a002eec <Board_SetupClocking+0x64>)
1a002eb0:	2201      	movs	r2, #1
1a002eb2:	f000 fc81 	bl	1a0037b8 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002eb6:	2400      	movs	r4, #0
1a002eb8:	e00a      	b.n	1a002ed0 <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002eba:	4a0d      	ldr	r2, [pc, #52]	; (1a002ef0 <Board_SetupClocking+0x68>)
1a002ebc:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a002ec0:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a002ec4:	7859      	ldrb	r1, [r3, #1]
1a002ec6:	789a      	ldrb	r2, [r3, #2]
1a002ec8:	78db      	ldrb	r3, [r3, #3]
1a002eca:	f000 fbaf 	bl	1a00362c <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002ece:	3401      	adds	r4, #1
1a002ed0:	2c02      	cmp	r4, #2
1a002ed2:	d9f2      	bls.n	1a002eba <Board_SetupClocking+0x32>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002ed4:	4b04      	ldr	r3, [pc, #16]	; (1a002ee8 <Board_SetupClocking+0x60>)
1a002ed6:	685a      	ldr	r2, [r3, #4]
1a002ed8:	f022 020c 	bic.w	r2, r2, #12
1a002edc:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002ede:	685a      	ldr	r2, [r3, #4]
1a002ee0:	f042 0203 	orr.w	r2, r2, #3
1a002ee4:	605a      	str	r2, [r3, #4]
1a002ee6:	bd10      	pop	{r4, pc}
1a002ee8:	40043000 	.word	0x40043000
1a002eec:	0c28cb00 	.word	0x0c28cb00
1a002ef0:	1a00427c 	.word	0x1a00427c

1a002ef4 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002ef4:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002ef6:	f7ff ffad 	bl	1a002e54 <Board_SetupMuxing>
    Board_SetupClocking();
1a002efa:	f7ff ffc5 	bl	1a002e88 <Board_SetupClocking>
1a002efe:	bd08      	pop	{r3, pc}

1a002f00 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002f00:	2901      	cmp	r1, #1
1a002f02:	d109      	bne.n	1a002f18 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a002f04:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002f08:	0080      	lsls	r0, r0, #2
1a002f0a:	4b04      	ldr	r3, [pc, #16]	; (1a002f1c <Chip_I2C_EventHandler+0x1c>)
1a002f0c:	4418      	add	r0, r3
1a002f0e:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a002f10:	7d13      	ldrb	r3, [r2, #20]
1a002f12:	b2db      	uxtb	r3, r3
1a002f14:	2b04      	cmp	r3, #4
1a002f16:	d0fb      	beq.n	1a002f10 <Chip_I2C_EventHandler+0x10>
1a002f18:	4770      	bx	lr
1a002f1a:	bf00      	nop
1a002f1c:	10000050 	.word	0x10000050

1a002f20 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002f20:	b570      	push	{r4, r5, r6, lr}
1a002f22:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a002f24:	4e06      	ldr	r6, [pc, #24]	; (1a002f40 <Chip_I2C_Init+0x20>)
1a002f26:	00c4      	lsls	r4, r0, #3
1a002f28:	1a23      	subs	r3, r4, r0
1a002f2a:	009b      	lsls	r3, r3, #2
1a002f2c:	4433      	add	r3, r6
1a002f2e:	8898      	ldrh	r0, [r3, #4]
1a002f30:	f000 fbd4 	bl	1a0036dc <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002f34:	1b60      	subs	r0, r4, r5
1a002f36:	0080      	lsls	r0, r0, #2
1a002f38:	5833      	ldr	r3, [r6, r0]
1a002f3a:	226c      	movs	r2, #108	; 0x6c
1a002f3c:	619a      	str	r2, [r3, #24]
1a002f3e:	bd70      	pop	{r4, r5, r6, pc}
1a002f40:	10000050 	.word	0x10000050

1a002f44 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002f48:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a002f4a:	4f09      	ldr	r7, [pc, #36]	; (1a002f70 <Chip_I2C_SetClockRate+0x2c>)
1a002f4c:	00c5      	lsls	r5, r0, #3
1a002f4e:	1a2e      	subs	r6, r5, r0
1a002f50:	00b6      	lsls	r6, r6, #2
1a002f52:	19bb      	adds	r3, r7, r6
1a002f54:	8898      	ldrh	r0, [r3, #4]
1a002f56:	f000 fbdb 	bl	1a003710 <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a002f5a:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002f5e:	59bb      	ldr	r3, [r7, r6]
1a002f60:	0842      	lsrs	r2, r0, #1
1a002f62:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a002f64:	59bb      	ldr	r3, [r7, r6]
1a002f66:	691a      	ldr	r2, [r3, #16]
1a002f68:	1a80      	subs	r0, r0, r2
1a002f6a:	6158      	str	r0, [r3, #20]
1a002f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002f70:	10000050 	.word	0x10000050

1a002f74 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002f74:	4b09      	ldr	r3, [pc, #36]	; (1a002f9c <Chip_UART_GetIndex+0x28>)
1a002f76:	4298      	cmp	r0, r3
1a002f78:	d009      	beq.n	1a002f8e <Chip_UART_GetIndex+0x1a>
1a002f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002f7e:	4298      	cmp	r0, r3
1a002f80:	d007      	beq.n	1a002f92 <Chip_UART_GetIndex+0x1e>
1a002f82:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002f86:	4298      	cmp	r0, r3
1a002f88:	d005      	beq.n	1a002f96 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002f8a:	2000      	movs	r0, #0
1a002f8c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002f8e:	2002      	movs	r0, #2
1a002f90:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002f92:	2003      	movs	r0, #3
1a002f94:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a002f96:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a002f98:	4770      	bx	lr
1a002f9a:	bf00      	nop
1a002f9c:	400c1000 	.word	0x400c1000

1a002fa0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002fa0:	b510      	push	{r4, lr}
1a002fa2:	b082      	sub	sp, #8
1a002fa4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002fa6:	f7ff ffe5 	bl	1a002f74 <Chip_UART_GetIndex>
1a002faa:	4b10      	ldr	r3, [pc, #64]	; (1a002fec <Chip_UART_Init+0x4c>)
1a002fac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002fb0:	2101      	movs	r1, #1
1a002fb2:	460a      	mov	r2, r1
1a002fb4:	460b      	mov	r3, r1
1a002fb6:	f000 fb73 	bl	1a0036a0 <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a002fba:	2307      	movs	r3, #7
1a002fbc:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a002fbe:	2300      	movs	r3, #0
1a002fc0:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002fc2:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002fc4:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002fc6:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002fc8:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002fca:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002fcc:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002fce:	4b08      	ldr	r3, [pc, #32]	; (1a002ff0 <Chip_UART_Init+0x50>)
1a002fd0:	429c      	cmp	r4, r3
1a002fd2:	d103      	bne.n	1a002fdc <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a002fd4:	2300      	movs	r3, #0
1a002fd6:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a002fd8:	69a3      	ldr	r3, [r4, #24]
1a002fda:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002fdc:	2303      	movs	r3, #3
1a002fde:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002fe0:	2310      	movs	r3, #16
1a002fe2:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002fe4:	9b01      	ldr	r3, [sp, #4]
}
1a002fe6:	b002      	add	sp, #8
1a002fe8:	bd10      	pop	{r4, pc}
1a002fea:	bf00      	nop
1a002fec:	1a004328 	.word	0x1a004328
1a002ff0:	40082000 	.word	0x40082000

1a002ff4 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002ff4:	b538      	push	{r3, r4, r5, lr}
1a002ff6:	4605      	mov	r5, r0
1a002ff8:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002ffa:	f7ff ffbb 	bl	1a002f74 <Chip_UART_GetIndex>
1a002ffe:	4b0c      	ldr	r3, [pc, #48]	; (1a003030 <Chip_UART_SetBaud+0x3c>)
1a003000:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003004:	f000 fb84 	bl	1a003710 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a003008:	0124      	lsls	r4, r4, #4
1a00300a:	fbb0 f3f4 	udiv	r3, r0, r4
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00300e:	68ea      	ldr	r2, [r5, #12]
1a003010:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a003014:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a003016:	b2da      	uxtb	r2, r3
1a003018:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a00301a:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a00301e:	606a      	str	r2, [r5, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003020:	68ea      	ldr	r2, [r5, #12]
1a003022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a003026:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a003028:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a00302c:	0900      	lsrs	r0, r0, #4
1a00302e:	bd38      	pop	{r3, r4, r5, pc}
1a003030:	1a004320 	.word	0x1a004320

1a003034 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a003034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003038:	b083      	sub	sp, #12
1a00303a:	4683      	mov	fp, r0
1a00303c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00303e:	f7ff ff99 	bl	1a002f74 <Chip_UART_GetIndex>
1a003042:	4b34      	ldr	r3, [pc, #208]	; (1a003114 <Chip_UART_SetBaudFDR+0xe0>)
1a003044:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003048:	f000 fb62 	bl	1a003710 <Chip_Clock_GetRate>
1a00304c:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a00304e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a003052:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a003054:	2300      	movs	r3, #0
1a003056:	9301      	str	r3, [sp, #4]
1a003058:	46a2      	mov	sl, r4
1a00305a:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00305c:	e029      	b.n	1a0030b2 <Chip_UART_SetBaudFDR+0x7e>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a00305e:	2300      	movs	r3, #0
1a003060:	0932      	lsrs	r2, r6, #4
1a003062:	0730      	lsls	r0, r6, #28
1a003064:	fba0 0104 	umull	r0, r1, r0, r4
1a003068:	fb04 1102 	mla	r1, r4, r2, r1
1a00306c:	1962      	adds	r2, r4, r5
1a00306e:	fb08 f202 	mul.w	r2, r8, r2
1a003072:	f000 fce9 	bl	1a003a48 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a003076:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a003078:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a00307a:	2800      	cmp	r0, #0
1a00307c:	da01      	bge.n	1a003082 <Chip_UART_SetBaudFDR+0x4e>
				diff = -diff;
1a00307e:	4243      	negs	r3, r0
				div ++;
1a003080:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003082:	429f      	cmp	r7, r3
1a003084:	d30a      	bcc.n	1a00309c <Chip_UART_SetBaudFDR+0x68>
1a003086:	b14a      	cbz	r2, 1a00309c <Chip_UART_SetBaudFDR+0x68>
1a003088:	0c11      	lsrs	r1, r2, #16
1a00308a:	d107      	bne.n	1a00309c <Chip_UART_SetBaudFDR+0x68>
1a00308c:	2a02      	cmp	r2, #2
1a00308e:	d800      	bhi.n	1a003092 <Chip_UART_SetBaudFDR+0x5e>
1a003090:	b925      	cbnz	r5, 1a00309c <Chip_UART_SetBaudFDR+0x68>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a003092:	b14b      	cbz	r3, 1a0030a8 <Chip_UART_SetBaudFDR+0x74>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a003094:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a003096:	9501      	str	r5, [sp, #4]
			sm = m;
1a003098:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a00309a:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a00309c:	3501      	adds	r5, #1
1a00309e:	e000      	b.n	1a0030a2 <Chip_UART_SetBaudFDR+0x6e>
1a0030a0:	2500      	movs	r5, #0
1a0030a2:	42a5      	cmp	r5, r4
1a0030a4:	d3db      	bcc.n	1a00305e <Chip_UART_SetBaudFDR+0x2a>
1a0030a6:	e003      	b.n	1a0030b0 <Chip_UART_SetBaudFDR+0x7c>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a0030a8:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a0030aa:	9501      	str	r5, [sp, #4]
			sm = m;
1a0030ac:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a0030ae:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0030b0:	3401      	adds	r4, #1
1a0030b2:	b10f      	cbz	r7, 1a0030b8 <Chip_UART_SetBaudFDR+0x84>
1a0030b4:	2c0f      	cmp	r4, #15
1a0030b6:	d9f3      	bls.n	1a0030a0 <Chip_UART_SetBaudFDR+0x6c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0030b8:	f1b9 0f00 	cmp.w	r9, #0
1a0030bc:	d026      	beq.n	1a00310c <Chip_UART_SetBaudFDR+0xd8>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0030be:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0030c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0030c6:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a0030ca:	fa5f f389 	uxtb.w	r3, r9
1a0030ce:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a0030d2:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0030d6:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0030da:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0030de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0030e2:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0030e6:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0030ea:	b2da      	uxtb	r2, r3
1a0030ec:	9901      	ldr	r1, [sp, #4]
1a0030ee:	f001 030f 	and.w	r3, r1, #15
1a0030f2:	4313      	orrs	r3, r2
1a0030f4:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0030f8:	0933      	lsrs	r3, r6, #4
1a0030fa:	fb0a f303 	mul.w	r3, sl, r3
1a0030fe:	eb0a 0001 	add.w	r0, sl, r1
1a003102:	fb09 f000 	mul.w	r0, r9, r0
1a003106:	fbb3 f0f0 	udiv	r0, r3, r0
1a00310a:	e000      	b.n	1a00310e <Chip_UART_SetBaudFDR+0xda>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a00310c:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a00310e:	b003      	add	sp, #12
1a003110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003114:	1a004320 	.word	0x1a004320

1a003118 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a003118:	4b03      	ldr	r3, [pc, #12]	; (1a003128 <Chip_ADC_GetClockIndex+0x10>)
1a00311a:	4298      	cmp	r0, r3
1a00311c:	d101      	bne.n	1a003122 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
1a00311e:	2004      	movs	r0, #4
1a003120:	4770      	bx	lr
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a003122:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a003124:	4770      	bx	lr
1a003126:	bf00      	nop
1a003128:	400e4000 	.word	0x400e4000

1a00312c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a00312c:	b570      	push	{r4, r5, r6, lr}
1a00312e:	460d      	mov	r5, r1
1a003130:	4614      	mov	r4, r2
1a003132:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a003134:	f7ff fff0 	bl	1a003118 <Chip_ADC_GetClockIndex>
1a003138:	f000 faea 	bl	1a003710 <Chip_Clock_GetRate>
	if (burstMode) {
1a00313c:	b115      	cbz	r5, 1a003144 <getClkDiv+0x18>
		fullAdcRate = adcRate * clks;
1a00313e:	fb04 f406 	mul.w	r4, r4, r6
1a003142:	e003      	b.n	1a00314c <getClkDiv+0x20>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a003144:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a003148:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a00314c:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a003150:	0064      	lsls	r4, r4, #1
1a003152:	fbb0 f4f4 	udiv	r4, r0, r4
1a003156:	1e60      	subs	r0, r4, #1
	return div;
}
1a003158:	b2c0      	uxtb	r0, r0
1a00315a:	bd70      	pop	{r4, r5, r6, pc}

1a00315c <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a00315c:	b538      	push	{r3, r4, r5, lr}
1a00315e:	4605      	mov	r5, r0
1a003160:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a003162:	f7ff ffd9 	bl	1a003118 <Chip_ADC_GetClockIndex>
1a003166:	2101      	movs	r1, #1
1a003168:	460a      	mov	r2, r1
1a00316a:	460b      	mov	r3, r1
1a00316c:	f000 fa98 	bl	1a0036a0 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003170:	2100      	movs	r1, #0
1a003172:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003174:	4a08      	ldr	r2, [pc, #32]	; (1a003198 <Chip_ADC_Init+0x3c>)
1a003176:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a003178:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00317a:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a00317c:	4628      	mov	r0, r5
1a00317e:	230b      	movs	r3, #11
1a003180:	f7ff ffd4 	bl	1a00312c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003184:	0200      	lsls	r0, r0, #8
1a003186:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00318a:	7920      	ldrb	r0, [r4, #4]
1a00318c:	f000 0007 	and.w	r0, r0, #7
1a003190:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
	pADC->CR = cr;
1a003194:	6028      	str	r0, [r5, #0]
1a003196:	bd38      	pop	{r3, r4, r5, pc}
1a003198:	00061a80 	.word	0x00061a80

1a00319c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a00319c:	b570      	push	{r4, r5, r6, lr}
1a00319e:	4606      	mov	r6, r0
1a0031a0:	460d      	mov	r5, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0031a2:	6804      	ldr	r4, [r0, #0]
1a0031a4:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0031a8:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0031ac:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0031ae:	790b      	ldrb	r3, [r1, #4]
1a0031b0:	f1c3 030b 	rsb	r3, r3, #11
1a0031b4:	7949      	ldrb	r1, [r1, #5]
1a0031b6:	b2db      	uxtb	r3, r3
1a0031b8:	f7ff ffb8 	bl	1a00312c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0031bc:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0031c0:	792c      	ldrb	r4, [r5, #4]
1a0031c2:	f004 0407 	and.w	r4, r4, #7
1a0031c6:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	pADC->CR = cr;
1a0031ca:	6030      	str	r0, [r6, #0]
1a0031cc:	bd70      	pop	{r4, r5, r6, pc}
1a0031ce:	bf00      	nop

1a0031d0 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0031d0:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0031d2:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0031d4:	680a      	ldr	r2, [r1, #0]
1a0031d6:	f7ff ffe1 	bl	1a00319c <Chip_ADC_SetSampleRate>
1a0031da:	bd08      	pop	{r3, pc}

1a0031dc <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0031dc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0031de:	2069      	movs	r0, #105	; 0x69
1a0031e0:	f000 fa96 	bl	1a003710 <Chip_Clock_GetRate>
1a0031e4:	4b01      	ldr	r3, [pc, #4]	; (1a0031ec <SystemCoreClockUpdate+0x10>)
1a0031e6:	6018      	str	r0, [r3, #0]
1a0031e8:	bd08      	pop	{r3, pc}
1a0031ea:	bf00      	nop
1a0031ec:	10002bf8 	.word	0x10002bf8

1a0031f0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0031f0:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0031f2:	680b      	ldr	r3, [r1, #0]
1a0031f4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0031f8:	d002      	beq.n	1a003200 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0031fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0031fe:	600b      	str	r3, [r1, #0]
1a003200:	4686      	mov	lr, r0
1a003202:	2601      	movs	r6, #1
1a003204:	e041      	b.n	1a00328a <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a003206:	680d      	ldr	r5, [r1, #0]
1a003208:	f015 0f40 	tst.w	r5, #64	; 0x40
1a00320c:	d008      	beq.n	1a003220 <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a00320e:	1c7b      	adds	r3, r7, #1
1a003210:	fa04 f203 	lsl.w	r2, r4, r3
1a003214:	694b      	ldr	r3, [r1, #20]
1a003216:	fb03 f302 	mul.w	r3, r3, r2
1a00321a:	fbb3 f3f6 	udiv	r3, r3, r6
1a00321e:	e004      	b.n	1a00322a <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a003220:	694b      	ldr	r3, [r1, #20]
1a003222:	fb04 f303 	mul.w	r3, r4, r3
1a003226:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a00322a:	4a19      	ldr	r2, [pc, #100]	; (1a003290 <pll_calc_divs+0xa0>)
1a00322c:	4293      	cmp	r3, r2
1a00322e:	d920      	bls.n	1a003272 <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a003230:	4a18      	ldr	r2, [pc, #96]	; (1a003294 <pll_calc_divs+0xa4>)
1a003232:	4293      	cmp	r3, r2
1a003234:	d823      	bhi.n	1a00327e <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a003236:	f015 0f80 	tst.w	r5, #128	; 0x80
1a00323a:	d103      	bne.n	1a003244 <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a00323c:	1c7a      	adds	r2, r7, #1
1a00323e:	fa23 f202 	lsr.w	r2, r3, r2
1a003242:	e000      	b.n	1a003246 <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a003244:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a003246:	1a85      	subs	r5, r0, r2
1a003248:	d502      	bpl.n	1a003250 <pll_calc_divs+0x60>
		return -val;
1a00324a:	f1c5 0c00 	rsb	ip, r5, #0
1a00324e:	e000      	b.n	1a003252 <pll_calc_divs+0x62>
	return val;
1a003250:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a003252:	45e6      	cmp	lr, ip
1a003254:	d90d      	bls.n	1a003272 <pll_calc_divs+0x82>
					ppll->nsel = n;
1a003256:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a003258:	f107 0e01 	add.w	lr, r7, #1
1a00325c:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a003260:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a003262:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a003264:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a003266:	2d00      	cmp	r5, #0
1a003268:	da02      	bge.n	1a003270 <pll_calc_divs+0x80>
		return -val;
1a00326a:	f1c5 0e00 	rsb	lr, r5, #0
1a00326e:	e000      	b.n	1a003272 <pll_calc_divs+0x82>
	return val;
1a003270:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a003272:	3401      	adds	r4, #1
1a003274:	e000      	b.n	1a003278 <pll_calc_divs+0x88>
1a003276:	2401      	movs	r4, #1
1a003278:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a00327c:	ddc3      	ble.n	1a003206 <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a00327e:	3701      	adds	r7, #1
1a003280:	e000      	b.n	1a003284 <pll_calc_divs+0x94>
1a003282:	2700      	movs	r7, #0
1a003284:	2f03      	cmp	r7, #3
1a003286:	ddf6      	ble.n	1a003276 <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a003288:	3601      	adds	r6, #1
1a00328a:	2e04      	cmp	r6, #4
1a00328c:	ddf9      	ble.n	1a003282 <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a00328e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a003290:	094c5eff 	.word	0x094c5eff
1a003294:	1312d000 	.word	0x1312d000

1a003298 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003298:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00329a:	b099      	sub	sp, #100	; 0x64
1a00329c:	4605      	mov	r5, r0
1a00329e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0032a0:	4668      	mov	r0, sp
1a0032a2:	2100      	movs	r1, #0
1a0032a4:	2260      	movs	r2, #96	; 0x60
1a0032a6:	f000 fece 	bl	1a004046 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0032aa:	2380      	movs	r3, #128	; 0x80
1a0032ac:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0032ae:	6963      	ldr	r3, [r4, #20]
1a0032b0:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0032b2:	7923      	ldrb	r3, [r4, #4]
1a0032b4:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0032b8:	4628      	mov	r0, r5
1a0032ba:	4669      	mov	r1, sp
1a0032bc:	f7ff ff98 	bl	1a0031f0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0032c0:	9b06      	ldr	r3, [sp, #24]
1a0032c2:	42ab      	cmp	r3, r5
1a0032c4:	d107      	bne.n	1a0032d6 <pll_get_frac+0x3e>
		*ppll = pll[0];
1a0032c6:	466d      	mov	r5, sp
1a0032c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0032ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0032cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0032d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0032d4:	e05e      	b.n	1a003394 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0032d6:	1aeb      	subs	r3, r5, r3
1a0032d8:	d500      	bpl.n	1a0032dc <pll_get_frac+0x44>
		return -val;
1a0032da:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0032dc:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0032de:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0032e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0032e4:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0032e6:	6963      	ldr	r3, [r4, #20]
1a0032e8:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0032ea:	7923      	ldrb	r3, [r4, #4]
1a0032ec:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0032f0:	4628      	mov	r0, r5
1a0032f2:	a910      	add	r1, sp, #64	; 0x40
1a0032f4:	f7ff ff7c 	bl	1a0031f0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0032f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0032fa:	42ab      	cmp	r3, r5
1a0032fc:	d107      	bne.n	1a00330e <pll_get_frac+0x76>
		*ppll = pll[2];
1a0032fe:	ad10      	add	r5, sp, #64	; 0x40
1a003300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003304:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00330c:	e042      	b.n	1a003394 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00330e:	1aeb      	subs	r3, r5, r3
1a003310:	d500      	bpl.n	1a003314 <pll_get_frac+0x7c>
		return -val;
1a003312:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a003314:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a003316:	4b20      	ldr	r3, [pc, #128]	; (1a003398 <pll_get_frac+0x100>)
1a003318:	429d      	cmp	r5, r3
1a00331a:	d812      	bhi.n	1a003342 <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a00331c:	2340      	movs	r3, #64	; 0x40
1a00331e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a003320:	6963      	ldr	r3, [r4, #20]
1a003322:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a003324:	4628      	mov	r0, r5
1a003326:	a908      	add	r1, sp, #32
1a003328:	f7ff ff62 	bl	1a0031f0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a00332c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00332e:	42ab      	cmp	r3, r5
1a003330:	d107      	bne.n	1a003342 <pll_get_frac+0xaa>
			*ppll = pll[1];
1a003332:	ad08      	add	r5, sp, #32
1a003334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003338:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00333c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003340:	e028      	b.n	1a003394 <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a003342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a003344:	1aed      	subs	r5, r5, r3
1a003346:	d500      	bpl.n	1a00334a <pll_get_frac+0xb2>
		return -val;
1a003348:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00334a:	42ae      	cmp	r6, r5
1a00334c:	dc11      	bgt.n	1a003372 <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a00334e:	42be      	cmp	r6, r7
1a003350:	dc07      	bgt.n	1a003362 <pll_get_frac+0xca>
			*ppll = pll[0];
1a003352:	466d      	mov	r5, sp
1a003354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003358:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00335c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003360:	e018      	b.n	1a003394 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a003362:	ad10      	add	r5, sp, #64	; 0x40
1a003364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003368:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00336c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003370:	e010      	b.n	1a003394 <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a003372:	42af      	cmp	r7, r5
1a003374:	db07      	blt.n	1a003386 <pll_get_frac+0xee>
			*ppll = pll[1];
1a003376:	ad08      	add	r5, sp, #32
1a003378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00337a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00337c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003380:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003384:	e006      	b.n	1a003394 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a003386:	ad10      	add	r5, sp, #64	; 0x40
1a003388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00338a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00338c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a003394:	b019      	add	sp, #100	; 0x64
1a003396:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a003398:	068e7780 	.word	0x068e7780

1a00339c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a00339c:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a00339e:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0033a0:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0033a2:	e010      	b.n	1a0033c6 <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0033a4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0033a8:	0052      	lsls	r2, r2, #1
1a0033aa:	4d0d      	ldr	r5, [pc, #52]	; (1a0033e0 <Chip_Clock_FindBaseClock+0x44>)
1a0033ac:	5aaa      	ldrh	r2, [r5, r2]
1a0033ae:	4282      	cmp	r2, r0
1a0033b0:	d806      	bhi.n	1a0033c0 <Chip_Clock_FindBaseClock+0x24>
1a0033b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0033b6:	0052      	lsls	r2, r2, #1
1a0033b8:	442a      	add	r2, r5
1a0033ba:	8852      	ldrh	r2, [r2, #2]
1a0033bc:	4282      	cmp	r2, r0
1a0033be:	d201      	bcs.n	1a0033c4 <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0033c0:	3301      	adds	r3, #1
1a0033c2:	e000      	b.n	1a0033c6 <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a0033c4:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0033c6:	291c      	cmp	r1, #28
1a0033c8:	d107      	bne.n	1a0033da <Chip_Clock_FindBaseClock+0x3e>
1a0033ca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0033ce:	0052      	lsls	r2, r2, #1
1a0033d0:	4c03      	ldr	r4, [pc, #12]	; (1a0033e0 <Chip_Clock_FindBaseClock+0x44>)
1a0033d2:	4422      	add	r2, r4
1a0033d4:	7914      	ldrb	r4, [r2, #4]
1a0033d6:	428c      	cmp	r4, r1
1a0033d8:	d1e4      	bne.n	1a0033a4 <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a0033da:	4608      	mov	r0, r1
1a0033dc:	bc30      	pop	{r4, r5}
1a0033de:	4770      	bx	lr
1a0033e0:	1a00433c 	.word	0x1a00433c

1a0033e4 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0033e4:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0033e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0033ea:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0033ec:	4a0d      	ldr	r2, [pc, #52]	; (1a003424 <Chip_Clock_EnableCrystal+0x40>)
1a0033ee:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0033f0:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0033f4:	6992      	ldr	r2, [r2, #24]
1a0033f6:	428a      	cmp	r2, r1
1a0033f8:	d001      	beq.n	1a0033fe <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0033fa:	4a0a      	ldr	r2, [pc, #40]	; (1a003424 <Chip_Clock_EnableCrystal+0x40>)
1a0033fc:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0033fe:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a003402:	4a09      	ldr	r2, [pc, #36]	; (1a003428 <Chip_Clock_EnableCrystal+0x44>)
1a003404:	6811      	ldr	r1, [r2, #0]
1a003406:	4a09      	ldr	r2, [pc, #36]	; (1a00342c <Chip_Clock_EnableCrystal+0x48>)
1a003408:	4291      	cmp	r1, r2
1a00340a:	d901      	bls.n	1a003410 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a00340c:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003410:	4a04      	ldr	r2, [pc, #16]	; (1a003424 <Chip_Clock_EnableCrystal+0x40>)
1a003412:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a003414:	9b01      	ldr	r3, [sp, #4]
1a003416:	1e5a      	subs	r2, r3, #1
1a003418:	9201      	str	r2, [sp, #4]
1a00341a:	2b00      	cmp	r3, #0
1a00341c:	d1fa      	bne.n	1a003414 <Chip_Clock_EnableCrystal+0x30>
}
1a00341e:	b002      	add	sp, #8
1a003420:	4770      	bx	lr
1a003422:	bf00      	nop
1a003424:	40050000 	.word	0x40050000
1a003428:	1a004260 	.word	0x1a004260
1a00342c:	01312cff 	.word	0x01312cff

1a003430 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a003430:	3012      	adds	r0, #18
1a003432:	4b05      	ldr	r3, [pc, #20]	; (1a003448 <Chip_Clock_GetDividerSource+0x18>)
1a003434:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003438:	f010 0f01 	tst.w	r0, #1
1a00343c:	d102      	bne.n	1a003444 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00343e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003442:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a003444:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a003446:	4770      	bx	lr
1a003448:	40050000 	.word	0x40050000

1a00344c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a00344c:	f100 0212 	add.w	r2, r0, #18
1a003450:	4b03      	ldr	r3, [pc, #12]	; (1a003460 <Chip_Clock_GetDividerDivisor+0x14>)
1a003452:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a003456:	4b03      	ldr	r3, [pc, #12]	; (1a003464 <Chip_Clock_GetDividerDivisor+0x18>)
1a003458:	5c18      	ldrb	r0, [r3, r0]
}
1a00345a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00345e:	4770      	bx	lr
1a003460:	40050000 	.word	0x40050000
1a003464:	1a004334 	.word	0x1a004334

1a003468 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003468:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a00346a:	2810      	cmp	r0, #16
1a00346c:	d80a      	bhi.n	1a003484 <Chip_Clock_GetClockInputHz+0x1c>
1a00346e:	e8df f000 	tbb	[pc, r0]
1a003472:	0b42      	.short	0x0b42
1a003474:	091f160d 	.word	0x091f160d
1a003478:	2b282522 	.word	0x2b282522
1a00347c:	322e0909 	.word	0x322e0909
1a003480:	3a36      	.short	0x3a36
1a003482:	3e          	.byte	0x3e
1a003483:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a003484:	2000      	movs	r0, #0
1a003486:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003488:	481e      	ldr	r0, [pc, #120]	; (1a003504 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a00348a:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00348c:	4b1e      	ldr	r3, [pc, #120]	; (1a003508 <Chip_Clock_GetClockInputHz+0xa0>)
1a00348e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003492:	f003 0307 	and.w	r3, r3, #7
1a003496:	2b04      	cmp	r3, #4
1a003498:	d130      	bne.n	1a0034fc <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a00349a:	2000      	movs	r0, #0
1a00349c:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00349e:	4b1a      	ldr	r3, [pc, #104]	; (1a003508 <Chip_Clock_GetClockInputHz+0xa0>)
1a0034a0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0034a4:	f003 0307 	and.w	r3, r3, #7
1a0034a8:	2b04      	cmp	r3, #4
1a0034aa:	d029      	beq.n	1a003500 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0034ac:	4817      	ldr	r0, [pc, #92]	; (1a00350c <Chip_Clock_GetClockInputHz+0xa4>)
1a0034ae:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0034b0:	4b17      	ldr	r3, [pc, #92]	; (1a003510 <Chip_Clock_GetClockInputHz+0xa8>)
1a0034b2:	6818      	ldr	r0, [r3, #0]
		break;
1a0034b4:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0034b6:	4b17      	ldr	r3, [pc, #92]	; (1a003514 <Chip_Clock_GetClockInputHz+0xac>)
1a0034b8:	6818      	ldr	r0, [r3, #0]
		break;
1a0034ba:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0034bc:	4b16      	ldr	r3, [pc, #88]	; (1a003518 <Chip_Clock_GetClockInputHz+0xb0>)
1a0034be:	6818      	ldr	r0, [r3, #0]
		break;
1a0034c0:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0034c2:	4b15      	ldr	r3, [pc, #84]	; (1a003518 <Chip_Clock_GetClockInputHz+0xb0>)
1a0034c4:	6858      	ldr	r0, [r3, #4]
		break;
1a0034c6:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0034c8:	f000 f86a 	bl	1a0035a0 <Chip_Clock_GetMainPLLHz>
		break;
1a0034cc:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0034ce:	2100      	movs	r1, #0
1a0034d0:	f000 f89a 	bl	1a003608 <Chip_Clock_GetDivRate>
		break;
1a0034d4:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0034d6:	2101      	movs	r1, #1
1a0034d8:	f000 f896 	bl	1a003608 <Chip_Clock_GetDivRate>
		break;
1a0034dc:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0034de:	2102      	movs	r1, #2
1a0034e0:	f000 f892 	bl	1a003608 <Chip_Clock_GetDivRate>
		break;
1a0034e4:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0034e6:	2103      	movs	r1, #3
1a0034e8:	f000 f88e 	bl	1a003608 <Chip_Clock_GetDivRate>
		break;
1a0034ec:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0034ee:	2104      	movs	r1, #4
1a0034f0:	f000 f88a 	bl	1a003608 <Chip_Clock_GetDivRate>
		break;
1a0034f4:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a0034f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a0034fa:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0034fc:	4803      	ldr	r0, [pc, #12]	; (1a00350c <Chip_Clock_GetClockInputHz+0xa4>)
1a0034fe:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a003500:	4806      	ldr	r0, [pc, #24]	; (1a00351c <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a003502:	bd08      	pop	{r3, pc}
1a003504:	00b71b00 	.word	0x00b71b00
1a003508:	40043000 	.word	0x40043000
1a00350c:	017d7840 	.word	0x017d7840
1a003510:	1a004264 	.word	0x1a004264
1a003514:	1a004260 	.word	0x1a004260
1a003518:	10002b8c 	.word	0x10002b8c
1a00351c:	02faf080 	.word	0x02faf080

1a003520 <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003520:	b538      	push	{r3, r4, r5, lr}
1a003522:	4605      	mov	r5, r0
1a003524:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a003526:	7908      	ldrb	r0, [r1, #4]
1a003528:	f7ff ff9e 	bl	1a003468 <Chip_Clock_GetClockInputHz>
1a00352c:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00352e:	4b19      	ldr	r3, [pc, #100]	; (1a003594 <Chip_Clock_CalcMainPLLValue+0x74>)
1a003530:	442b      	add	r3, r5
1a003532:	4a19      	ldr	r2, [pc, #100]	; (1a003598 <Chip_Clock_CalcMainPLLValue+0x78>)
1a003534:	4293      	cmp	r3, r2
1a003536:	d821      	bhi.n	1a00357c <Chip_Clock_CalcMainPLLValue+0x5c>
1a003538:	b318      	cbz	r0, 1a003582 <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00353a:	2380      	movs	r3, #128	; 0x80
1a00353c:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00353e:	2300      	movs	r3, #0
1a003540:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a003542:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003544:	fbb5 f3f0 	udiv	r3, r5, r0
1a003548:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00354a:	4a14      	ldr	r2, [pc, #80]	; (1a00359c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a00354c:	4295      	cmp	r5, r2
1a00354e:	d903      	bls.n	1a003558 <Chip_Clock_CalcMainPLLValue+0x38>
1a003550:	fb03 f000 	mul.w	r0, r3, r0
1a003554:	42a8      	cmp	r0, r5
1a003556:	d007      	beq.n	1a003568 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003558:	4628      	mov	r0, r5
1a00355a:	4621      	mov	r1, r4
1a00355c:	f7ff fe9c 	bl	1a003298 <pll_get_frac>
		if (!ppll->nsel) {
1a003560:	68a3      	ldr	r3, [r4, #8]
1a003562:	b18b      	cbz	r3, 1a003588 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a003564:	3b01      	subs	r3, #1
1a003566:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a003568:	6923      	ldr	r3, [r4, #16]
1a00356a:	b183      	cbz	r3, 1a00358e <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a00356c:	68e2      	ldr	r2, [r4, #12]
1a00356e:	b10a      	cbz	r2, 1a003574 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003570:	3a01      	subs	r2, #1
1a003572:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a003574:	3b01      	subs	r3, #1
1a003576:	6123      	str	r3, [r4, #16]

	return 0;
1a003578:	2000      	movs	r0, #0
1a00357a:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a00357c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003580:	bd38      	pop	{r3, r4, r5, pc}
1a003582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003586:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a003588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00358c:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a00358e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	ppll->msel --;

	return 0;
}
1a003592:	bd38      	pop	{r3, r4, r5, pc}
1a003594:	ff6b3a10 	.word	0xff6b3a10
1a003598:	0b940510 	.word	0x0b940510
1a00359c:	094c5eff 	.word	0x094c5eff

1a0035a0 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a0035a0:	b570      	push	{r4, r5, r6, lr}
1a0035a2:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0035a4:	4d16      	ldr	r5, [pc, #88]	; (1a003600 <Chip_Clock_GetMainPLLHz+0x60>)
1a0035a6:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0035a8:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0035ac:	f7ff ff5c 	bl	1a003468 <Chip_Clock_GetClockInputHz>
1a0035b0:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0035b2:	4b14      	ldr	r3, [pc, #80]	; (1a003604 <Chip_Clock_GetMainPLLHz+0x64>)
1a0035b4:	6818      	ldr	r0, [r3, #0]
1a0035b6:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0035b8:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a0035ba:	f010 0001 	ands.w	r0, r0, #1
1a0035be:	d01d      	beq.n	1a0035fc <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a0035c0:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0035c4:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0035c8:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a0035cc:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a0035d0:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a0035d2:	3201      	adds	r2, #1
	p = ptab[psel];
1a0035d4:	a802      	add	r0, sp, #8
1a0035d6:	4401      	add	r1, r0
1a0035d8:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a0035dc:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0035e0:	d100      	bne.n	1a0035e4 <Chip_Clock_GetMainPLLHz+0x44>
1a0035e2:	b125      	cbz	r5, 1a0035ee <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a0035e4:	fbb6 f0f2 	udiv	r0, r6, r2
1a0035e8:	fb03 f000 	mul.w	r0, r3, r0
1a0035ec:	e006      	b.n	1a0035fc <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a0035ee:	0040      	lsls	r0, r0, #1
1a0035f0:	fbb3 f3f0 	udiv	r3, r3, r0
1a0035f4:	fbb6 f0f2 	udiv	r0, r6, r2
1a0035f8:	fb00 f003 	mul.w	r0, r0, r3
}
1a0035fc:	b002      	add	sp, #8
1a0035fe:	bd70      	pop	{r4, r5, r6, pc}
1a003600:	40050000 	.word	0x40050000
1a003604:	1a004330 	.word	0x1a004330

1a003608 <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a003608:	b538      	push	{r3, r4, r5, lr}
1a00360a:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a00360c:	4608      	mov	r0, r1
1a00360e:	f7ff ff0f 	bl	1a003430 <Chip_Clock_GetDividerSource>
1a003612:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003614:	4620      	mov	r0, r4
1a003616:	f7ff ff19 	bl	1a00344c <Chip_Clock_GetDividerDivisor>
1a00361a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a00361c:	4628      	mov	r0, r5
1a00361e:	f7ff ff23 	bl	1a003468 <Chip_Clock_GetClockInputHz>
1a003622:	3401      	adds	r4, #1
}
1a003624:	fbb0 f0f4 	udiv	r0, r0, r4
1a003628:	bd38      	pop	{r3, r4, r5, pc}
1a00362a:	bf00      	nop

1a00362c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a00362c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00362e:	0085      	lsls	r5, r0, #2
1a003630:	4c0d      	ldr	r4, [pc, #52]	; (1a003668 <Chip_Clock_SetBaseClock+0x3c>)
1a003632:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a003634:	281b      	cmp	r0, #27
1a003636:	d80f      	bhi.n	1a003658 <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a003638:	2911      	cmp	r1, #17
1a00363a:	d012      	beq.n	1a003662 <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00363c:	4c0b      	ldr	r4, [pc, #44]	; (1a00366c <Chip_Clock_SetBaseClock+0x40>)
1a00363e:	402c      	ands	r4, r5

			if (autoblocken) {
1a003640:	b10a      	cbz	r2, 1a003646 <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a003642:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a003646:	b10b      	cbz	r3, 1a00364c <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a003648:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00364c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a003650:	0080      	lsls	r0, r0, #2
1a003652:	4b05      	ldr	r3, [pc, #20]	; (1a003668 <Chip_Clock_SetBaseClock+0x3c>)
1a003654:	501c      	str	r4, [r3, r0]
1a003656:	e004      	b.n	1a003662 <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003658:	f045 0501 	orr.w	r5, r5, #1
1a00365c:	0080      	lsls	r0, r0, #2
1a00365e:	4b02      	ldr	r3, [pc, #8]	; (1a003668 <Chip_Clock_SetBaseClock+0x3c>)
1a003660:	501d      	str	r5, [r3, r0]
	}
}
1a003662:	bc30      	pop	{r4, r5}
1a003664:	4770      	bx	lr
1a003666:	bf00      	nop
1a003668:	4005005c 	.word	0x4005005c
1a00366c:	e0fff7fe 	.word	0xe0fff7fe

1a003670 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003670:	281b      	cmp	r0, #27
1a003672:	d808      	bhi.n	1a003686 <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003674:	0080      	lsls	r0, r0, #2
1a003676:	4b06      	ldr	r3, [pc, #24]	; (1a003690 <Chip_Clock_GetBaseClock+0x20>)
1a003678:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a00367a:	f010 0f01 	tst.w	r0, #1
1a00367e:	d104      	bne.n	1a00368a <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003680:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003684:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a003686:	2011      	movs	r0, #17
1a003688:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a00368a:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a00368c:	4770      	bx	lr
1a00368e:	bf00      	nop
1a003690:	4005005c 	.word	0x4005005c

1a003694 <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a003694:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003696:	f7ff ffeb 	bl	1a003670 <Chip_Clock_GetBaseClock>
1a00369a:	f7ff fee5 	bl	1a003468 <Chip_Clock_GetClockInputHz>
}
1a00369e:	bd08      	pop	{r3, pc}

1a0036a0 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0036a0:	b909      	cbnz	r1, 1a0036a6 <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a0036a2:	2101      	movs	r1, #1
1a0036a4:	e000      	b.n	1a0036a8 <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a0036a6:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a0036a8:	b10a      	cbz	r2, 1a0036ae <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a0036aa:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0036ae:	2b02      	cmp	r3, #2
1a0036b0:	d101      	bne.n	1a0036b6 <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a0036b2:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0036b6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0036ba:	d305      	bcc.n	1a0036c8 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0036bc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0036c0:	4b04      	ldr	r3, [pc, #16]	; (1a0036d4 <Chip_Clock_EnableOpts+0x34>)
1a0036c2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0036c6:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0036c8:	3020      	adds	r0, #32
1a0036ca:	4b03      	ldr	r3, [pc, #12]	; (1a0036d8 <Chip_Clock_EnableOpts+0x38>)
1a0036cc:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0036d0:	4770      	bx	lr
1a0036d2:	bf00      	nop
1a0036d4:	40052000 	.word	0x40052000
1a0036d8:	40051000 	.word	0x40051000

1a0036dc <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0036dc:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0036e0:	d309      	bcc.n	1a0036f6 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0036e2:	4a09      	ldr	r2, [pc, #36]	; (1a003708 <Chip_Clock_Enable+0x2c>)
1a0036e4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0036e8:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0036ec:	f043 0301 	orr.w	r3, r3, #1
1a0036f0:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0036f4:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0036f6:	4a05      	ldr	r2, [pc, #20]	; (1a00370c <Chip_Clock_Enable+0x30>)
1a0036f8:	3020      	adds	r0, #32
1a0036fa:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0036fe:	f043 0301 	orr.w	r3, r3, #1
1a003702:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003706:	4770      	bx	lr
1a003708:	40052000 	.word	0x40052000
1a00370c:	40051000 	.word	0x40051000

1a003710 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003710:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003712:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003716:	d305      	bcc.n	1a003724 <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003718:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a00371c:	4a0d      	ldr	r2, [pc, #52]	; (1a003754 <Chip_Clock_GetRate+0x44>)
1a00371e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003722:	e004      	b.n	1a00372e <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003724:	f100 0320 	add.w	r3, r0, #32
1a003728:	4a0b      	ldr	r2, [pc, #44]	; (1a003758 <Chip_Clock_GetRate+0x48>)
1a00372a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00372e:	f014 0f01 	tst.w	r4, #1
1a003732:	d00c      	beq.n	1a00374e <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003734:	f7ff fe32 	bl	1a00339c <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003738:	f7ff ffac 	bl	1a003694 <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a00373c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003740:	d101      	bne.n	1a003746 <Chip_Clock_GetRate+0x36>
			div = 1;
1a003742:	2301      	movs	r3, #1
1a003744:	e000      	b.n	1a003748 <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a003746:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a003748:	fbb0 f0f3 	udiv	r0, r0, r3
1a00374c:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a00374e:	2000      	movs	r0, #0
	}

	return rate;
}
1a003750:	bd10      	pop	{r4, pc}
1a003752:	bf00      	nop
1a003754:	40052000 	.word	0x40052000
1a003758:	40051000 	.word	0x40051000

1a00375c <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a00375c:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a00375e:	4b10      	ldr	r3, [pc, #64]	; (1a0037a0 <fpuInit+0x44>)
1a003760:	681b      	ldr	r3, [r3, #0]
1a003762:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a003764:	4b0f      	ldr	r3, [pc, #60]	; (1a0037a4 <fpuInit+0x48>)
1a003766:	681b      	ldr	r3, [r3, #0]
1a003768:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a00376a:	9a02      	ldr	r2, [sp, #8]
1a00376c:	4b0e      	ldr	r3, [pc, #56]	; (1a0037a8 <fpuInit+0x4c>)
1a00376e:	429a      	cmp	r2, r3
1a003770:	d105      	bne.n	1a00377e <fpuInit+0x22>
1a003772:	9a01      	ldr	r2, [sp, #4]
1a003774:	4b0d      	ldr	r3, [pc, #52]	; (1a0037ac <fpuInit+0x50>)
1a003776:	429a      	cmp	r2, r3
1a003778:	d003      	beq.n	1a003782 <fpuInit+0x26>
1a00377a:	2300      	movs	r3, #0
1a00377c:	e002      	b.n	1a003784 <fpuInit+0x28>
1a00377e:	2300      	movs	r3, #0
1a003780:	e000      	b.n	1a003784 <fpuInit+0x28>
1a003782:	2301      	movs	r3, #1

	if (vfpPresent) {
1a003784:	f013 0fff 	tst.w	r3, #255	; 0xff
1a003788:	d008      	beq.n	1a00379c <fpuInit+0x40>
		Cpacr = *regCpacr;
1a00378a:	4a09      	ldr	r2, [pc, #36]	; (1a0037b0 <fpuInit+0x54>)
1a00378c:	6813      	ldr	r3, [r2, #0]
1a00378e:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a003790:	9b03      	ldr	r3, [sp, #12]
1a003792:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003796:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a003798:	9b03      	ldr	r3, [sp, #12]
1a00379a:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a00379c:	b004      	add	sp, #16
1a00379e:	4770      	bx	lr
1a0037a0:	e000ef40 	.word	0xe000ef40
1a0037a4:	e000ef44 	.word	0xe000ef44
1a0037a8:	10110021 	.word	0x10110021
1a0037ac:	11000011 	.word	0x11000011
1a0037b0:	e000ed88 	.word	0xe000ed88

1a0037b4 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a0037b4:	4770      	bx	lr
1a0037b6:	bf00      	nop

1a0037b8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0037b8:	b570      	push	{r4, r5, r6, lr}
1a0037ba:	b08a      	sub	sp, #40	; 0x28
1a0037bc:	4605      	mov	r5, r0
1a0037be:	460e      	mov	r6, r1
1a0037c0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0037c2:	f242 7310 	movw	r3, #10000	; 0x2710
1a0037c6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0037c8:	2806      	cmp	r0, #6
1a0037ca:	d101      	bne.n	1a0037d0 <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a0037cc:	f7ff fe0a 	bl	1a0033e4 <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0037d0:	2004      	movs	r0, #4
1a0037d2:	4629      	mov	r1, r5
1a0037d4:	2201      	movs	r2, #1
1a0037d6:	2300      	movs	r3, #0
1a0037d8:	f7ff ff28 	bl	1a00362c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0037dc:	4a47      	ldr	r2, [pc, #284]	; (1a0038fc <Chip_SetupCoreClock+0x144>)
1a0037de:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0037e0:	f043 0301 	orr.w	r3, r3, #1
1a0037e4:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0037e6:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0037ea:	4630      	mov	r0, r6
1a0037ec:	a901      	add	r1, sp, #4
1a0037ee:	f7ff fe97 	bl	1a003520 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0037f2:	4b43      	ldr	r3, [pc, #268]	; (1a003900 <Chip_SetupCoreClock+0x148>)
1a0037f4:	429e      	cmp	r6, r3
1a0037f6:	d913      	bls.n	1a003820 <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a0037f8:	9b01      	ldr	r3, [sp, #4]
1a0037fa:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0037fe:	d000      	beq.n	1a003802 <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a003800:	e7fe      	b.n	1a003800 <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a003802:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003806:	d005      	beq.n	1a003814 <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00380c:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a00380e:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a003810:	2601      	movs	r6, #1
1a003812:	e007      	b.n	1a003824 <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a003814:	9b04      	ldr	r3, [sp, #16]
1a003816:	3301      	adds	r3, #1
1a003818:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a00381a:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a00381c:	2600      	movs	r6, #0
1a00381e:	e001      	b.n	1a003824 <Chip_SetupCoreClock+0x6c>
1a003820:	2500      	movs	r5, #0
1a003822:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003824:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003828:	9b01      	ldr	r3, [sp, #4]
1a00382a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00382e:	9a05      	ldr	r2, [sp, #20]
1a003830:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003834:	9a03      	ldr	r2, [sp, #12]
1a003836:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00383a:	9a04      	ldr	r2, [sp, #16]
1a00383c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003840:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003844:	4a2d      	ldr	r2, [pc, #180]	; (1a0038fc <Chip_SetupCoreClock+0x144>)
1a003846:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003848:	4b2c      	ldr	r3, [pc, #176]	; (1a0038fc <Chip_SetupCoreClock+0x144>)
1a00384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00384c:	f013 0f01 	tst.w	r3, #1
1a003850:	d0fa      	beq.n	1a003848 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003852:	2004      	movs	r0, #4
1a003854:	2109      	movs	r1, #9
1a003856:	2201      	movs	r2, #1
1a003858:	2300      	movs	r3, #0
1a00385a:	f7ff fee7 	bl	1a00362c <Chip_Clock_SetBaseClock>

	if (direct) {
1a00385e:	b1ee      	cbz	r6, 1a00389c <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003860:	f242 7310 	movw	r3, #10000	; 0x2710
1a003864:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003866:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003868:	1e5a      	subs	r2, r3, #1
1a00386a:	9209      	str	r2, [sp, #36]	; 0x24
1a00386c:	2b00      	cmp	r3, #0
1a00386e:	d1fa      	bne.n	1a003866 <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a003870:	9b01      	ldr	r3, [sp, #4]
1a003872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003876:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003878:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00387c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003880:	9a05      	ldr	r2, [sp, #20]
1a003882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003886:	9a03      	ldr	r2, [sp, #12]
1a003888:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00388c:	9a04      	ldr	r2, [sp, #16]
1a00388e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003892:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003896:	4a19      	ldr	r2, [pc, #100]	; (1a0038fc <Chip_SetupCoreClock+0x144>)
1a003898:	6453      	str	r3, [r2, #68]	; 0x44
1a00389a:	e01c      	b.n	1a0038d6 <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a00389c:	b1dd      	cbz	r5, 1a0038d6 <Chip_SetupCoreClock+0x11e>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00389e:	f242 7310 	movw	r3, #10000	; 0x2710
1a0038a2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0038a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0038a6:	1e5a      	subs	r2, r3, #1
1a0038a8:	9209      	str	r2, [sp, #36]	; 0x24
1a0038aa:	2b00      	cmp	r3, #0
1a0038ac:	d1fa      	bne.n	1a0038a4 <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a0038ae:	9b04      	ldr	r3, [sp, #16]
1a0038b0:	1e59      	subs	r1, r3, #1
1a0038b2:	9104      	str	r1, [sp, #16]
1a0038b4:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0038b8:	9b01      	ldr	r3, [sp, #4]
1a0038ba:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a0038be:	9b05      	ldr	r3, [sp, #20]
1a0038c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a0038c4:	9b03      	ldr	r3, [sp, #12]
1a0038c6:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a0038ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a0038ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0038d2:	4a0a      	ldr	r2, [pc, #40]	; (1a0038fc <Chip_SetupCoreClock+0x144>)
1a0038d4:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0038d6:	b964      	cbnz	r4, 1a0038f2 <Chip_SetupCoreClock+0x13a>
1a0038d8:	e00e      	b.n	1a0038f8 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0038da:	4a0a      	ldr	r2, [pc, #40]	; (1a003904 <Chip_SetupCoreClock+0x14c>)
1a0038dc:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a0038e0:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a0038e4:	7859      	ldrb	r1, [r3, #1]
1a0038e6:	789a      	ldrb	r2, [r3, #2]
1a0038e8:	78db      	ldrb	r3, [r3, #3]
1a0038ea:	f7ff fe9f 	bl	1a00362c <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0038ee:	3401      	adds	r4, #1
1a0038f0:	e000      	b.n	1a0038f4 <Chip_SetupCoreClock+0x13c>
1a0038f2:	2400      	movs	r4, #0
1a0038f4:	2c11      	cmp	r4, #17
1a0038f6:	d9f0      	bls.n	1a0038da <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0038f8:	b00a      	add	sp, #40	; 0x28
1a0038fa:	bd70      	pop	{r4, r5, r6, pc}
1a0038fc:	40050000 	.word	0x40050000
1a003900:	068e7780 	.word	0x068e7780
1a003904:	1a0043a8 	.word	0x1a0043a8

1a003908 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003908:	4b03      	ldr	r3, [pc, #12]	; (1a003918 <Chip_SSP_GetClockIndex+0x10>)
1a00390a:	4298      	cmp	r0, r3
1a00390c:	d101      	bne.n	1a003912 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
1a00390e:	20a5      	movs	r0, #165	; 0xa5
1a003910:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003912:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003914:	4770      	bx	lr
1a003916:	bf00      	nop
1a003918:	400c5000 	.word	0x400c5000

1a00391c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00391c:	4b04      	ldr	r3, [pc, #16]	; (1a003930 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00391e:	4298      	cmp	r0, r3
1a003920:	d102      	bne.n	1a003928 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
1a003922:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003926:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003928:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00392c:	4770      	bx	lr
1a00392e:	bf00      	nop
1a003930:	400c5000 	.word	0x400c5000

1a003934 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003934:	6803      	ldr	r3, [r0, #0]
1a003936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00393a:	0209      	lsls	r1, r1, #8
1a00393c:	b289      	uxth	r1, r1
1a00393e:	430b      	orrs	r3, r1
1a003940:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a003942:	6102      	str	r2, [r0, #16]
1a003944:	4770      	bx	lr
1a003946:	bf00      	nop

1a003948 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003948:	b570      	push	{r4, r5, r6, lr}
1a00394a:	4606      	mov	r6, r0
1a00394c:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00394e:	f7ff ffe5 	bl	1a00391c <Chip_SSP_GetPeriphClockIndex>
1a003952:	f7ff fedd 	bl	1a003710 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003956:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a003958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a00395c:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a00395e:	e00c      	b.n	1a00397a <Chip_SSP_SetBitRate+0x32>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003960:	1c4c      	adds	r4, r1, #1
1a003962:	fb02 f304 	mul.w	r3, r2, r4
1a003966:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00396a:	42ab      	cmp	r3, r5
1a00396c:	d905      	bls.n	1a00397a <Chip_SSP_SetBitRate+0x32>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a00396e:	2cff      	cmp	r4, #255	; 0xff
1a003970:	d902      	bls.n	1a003978 <Chip_SSP_SetBitRate+0x30>
				cr0_div = 0;
				prescale += 2;
1a003972:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a003974:	2100      	movs	r1, #0
1a003976:	e000      	b.n	1a00397a <Chip_SSP_SetBitRate+0x32>
	prescale = 2;

	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003978:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a00397a:	42ab      	cmp	r3, r5
1a00397c:	d8f0      	bhi.n	1a003960 <Chip_SSP_SetBitRate+0x18>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a00397e:	4630      	mov	r0, r6
1a003980:	f7ff ffd8 	bl	1a003934 <Chip_SSP_SetClockRate>
1a003984:	bd70      	pop	{r4, r5, r6, pc}
1a003986:	bf00      	nop

1a003988 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003988:	b510      	push	{r4, lr}
1a00398a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00398c:	f7ff ffbc 	bl	1a003908 <Chip_SSP_GetClockIndex>
1a003990:	f7ff fea4 	bl	1a0036dc <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003994:	4620      	mov	r0, r4
1a003996:	f7ff ffc1 	bl	1a00391c <Chip_SSP_GetPeriphClockIndex>
1a00399a:	f7ff fe9f 	bl	1a0036dc <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00399e:	6863      	ldr	r3, [r4, #4]
1a0039a0:	f023 0304 	bic.w	r3, r3, #4
1a0039a4:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0039a6:	6823      	ldr	r3, [r4, #0]
1a0039a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0039ac:	f043 0307 	orr.w	r3, r3, #7
1a0039b0:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0039b2:	4620      	mov	r0, r4
1a0039b4:	4901      	ldr	r1, [pc, #4]	; (1a0039bc <Chip_SSP_Init+0x34>)
1a0039b6:	f7ff ffc7 	bl	1a003948 <Chip_SSP_SetBitRate>
1a0039ba:	bd10      	pop	{r4, pc}
1a0039bc:	000186a0 	.word	0x000186a0

1a0039c0 <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a0039c0:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0039c2:	4a19      	ldr	r2, [pc, #100]	; (1a003a28 <ResetISR+0x68>)
1a0039c4:	4b19      	ldr	r3, [pc, #100]	; (1a003a2c <ResetISR+0x6c>)
1a0039c6:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0039c8:	4a19      	ldr	r2, [pc, #100]	; (1a003a30 <ResetISR+0x70>)
1a0039ca:	3304      	adds	r3, #4
1a0039cc:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0039ce:	2300      	movs	r3, #0
1a0039d0:	e005      	b.n	1a0039de <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0039d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0039d6:	4a17      	ldr	r2, [pc, #92]	; (1a003a34 <ResetISR+0x74>)
1a0039d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0039dc:	3301      	adds	r3, #1
1a0039de:	2b07      	cmp	r3, #7
1a0039e0:	d9f7      	bls.n	1a0039d2 <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a0039e2:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a0039e4:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a0039e6:	f7ff fa27 	bl	1a002e38 <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a0039ea:	4b13      	ldr	r3, [pc, #76]	; (1a003a38 <ResetISR+0x78>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a0039ec:	e007      	b.n	1a0039fe <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0039ee:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0039f2:	6818      	ldr	r0, [r3, #0]
1a0039f4:	6859      	ldr	r1, [r3, #4]
1a0039f6:	689a      	ldr	r2, [r3, #8]
1a0039f8:	f7fc fbd8 	bl	1a0001ac <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0039fc:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a0039fe:	4a0f      	ldr	r2, [pc, #60]	; (1a003a3c <ResetISR+0x7c>)
1a003a00:	4293      	cmp	r3, r2
1a003a02:	d3f4      	bcc.n	1a0039ee <ResetISR+0x2e>
1a003a04:	e006      	b.n	1a003a14 <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a003a06:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a003a08:	f854 0b08 	ldr.w	r0, [r4], #8
1a003a0c:	6859      	ldr	r1, [r3, #4]
1a003a0e:	f7fc fbdb 	bl	1a0001c8 <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a003a12:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a003a14:	4a0a      	ldr	r2, [pc, #40]	; (1a003a40 <ResetISR+0x80>)
1a003a16:	4293      	cmp	r3, r2
1a003a18:	d3f5      	bcc.n	1a003a06 <ResetISR+0x46>

#if defined (__USE_CMSIS)
    SystemInit();
#endif

    __libc_init_array();
1a003a1a:	f000 fae3 	bl	1a003fe4 <__libc_init_array>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a003a1e:	f7ff f9ed 	bl	1a002dfc <Board_Init>
    main();
1a003a22:	f7fc fe75 	bl	1a000710 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a003a26:	e7fe      	b.n	1a003a26 <ResetISR+0x66>
1a003a28:	10df1000 	.word	0x10df1000
1a003a2c:	40053100 	.word	0x40053100
1a003a30:	01dff7ff 	.word	0x01dff7ff
1a003a34:	e000e280 	.word	0xe000e280
1a003a38:	1a000114 	.word	0x1a000114
1a003a3c:	1a000150 	.word	0x1a000150
1a003a40:	1a000178 	.word	0x1a000178

1a003a44 <_init>:
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

void _init(void) {}
1a003a44:	4770      	bx	lr
1a003a46:	bf00      	nop

1a003a48 <__aeabi_uldivmod>:
1a003a48:	b953      	cbnz	r3, 1a003a60 <__aeabi_uldivmod+0x18>
1a003a4a:	b94a      	cbnz	r2, 1a003a60 <__aeabi_uldivmod+0x18>
1a003a4c:	2900      	cmp	r1, #0
1a003a4e:	bf08      	it	eq
1a003a50:	2800      	cmpeq	r0, #0
1a003a52:	bf1c      	itt	ne
1a003a54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a003a58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003a5c:	f000 b83c 	b.w	1a003ad8 <__aeabi_idiv0>
1a003a60:	b082      	sub	sp, #8
1a003a62:	46ec      	mov	ip, sp
1a003a64:	e92d 5000 	stmdb	sp!, {ip, lr}
1a003a68:	f000 f81e 	bl	1a003aa8 <__gnu_uldivmod_helper>
1a003a6c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003a70:	b002      	add	sp, #8
1a003a72:	bc0c      	pop	{r2, r3}
1a003a74:	4770      	bx	lr
1a003a76:	bf00      	nop

1a003a78 <__gnu_ldivmod_helper>:
1a003a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003a7c:	9c06      	ldr	r4, [sp, #24]
1a003a7e:	4615      	mov	r5, r2
1a003a80:	4606      	mov	r6, r0
1a003a82:	460f      	mov	r7, r1
1a003a84:	4698      	mov	r8, r3
1a003a86:	f000 f829 	bl	1a003adc <__divdi3>
1a003a8a:	fb05 f301 	mul.w	r3, r5, r1
1a003a8e:	fb00 3808 	mla	r8, r0, r8, r3
1a003a92:	fba5 2300 	umull	r2, r3, r5, r0
1a003a96:	1ab2      	subs	r2, r6, r2
1a003a98:	4443      	add	r3, r8
1a003a9a:	eb67 0303 	sbc.w	r3, r7, r3
1a003a9e:	e9c4 2300 	strd	r2, r3, [r4]
1a003aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003aa6:	bf00      	nop

1a003aa8 <__gnu_uldivmod_helper>:
1a003aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003aac:	9c06      	ldr	r4, [sp, #24]
1a003aae:	4690      	mov	r8, r2
1a003ab0:	4606      	mov	r6, r0
1a003ab2:	460f      	mov	r7, r1
1a003ab4:	461d      	mov	r5, r3
1a003ab6:	f000 f95f 	bl	1a003d78 <__udivdi3>
1a003aba:	fb00 f505 	mul.w	r5, r0, r5
1a003abe:	fba0 2308 	umull	r2, r3, r0, r8
1a003ac2:	fb08 5501 	mla	r5, r8, r1, r5
1a003ac6:	1ab2      	subs	r2, r6, r2
1a003ac8:	442b      	add	r3, r5
1a003aca:	eb67 0303 	sbc.w	r3, r7, r3
1a003ace:	e9c4 2300 	strd	r2, r3, [r4]
1a003ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003ad6:	bf00      	nop

1a003ad8 <__aeabi_idiv0>:
1a003ad8:	4770      	bx	lr
1a003ada:	bf00      	nop

1a003adc <__divdi3>:
1a003adc:	2900      	cmp	r1, #0
1a003ade:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a003ae2:	f2c0 80a6 	blt.w	1a003c32 <__divdi3+0x156>
1a003ae6:	2600      	movs	r6, #0
1a003ae8:	2b00      	cmp	r3, #0
1a003aea:	f2c0 809c 	blt.w	1a003c26 <__divdi3+0x14a>
1a003aee:	4688      	mov	r8, r1
1a003af0:	4694      	mov	ip, r2
1a003af2:	469e      	mov	lr, r3
1a003af4:	4615      	mov	r5, r2
1a003af6:	4604      	mov	r4, r0
1a003af8:	460f      	mov	r7, r1
1a003afa:	2b00      	cmp	r3, #0
1a003afc:	d13d      	bne.n	1a003b7a <__divdi3+0x9e>
1a003afe:	428a      	cmp	r2, r1
1a003b00:	d959      	bls.n	1a003bb6 <__divdi3+0xda>
1a003b02:	fab2 f382 	clz	r3, r2
1a003b06:	b13b      	cbz	r3, 1a003b18 <__divdi3+0x3c>
1a003b08:	f1c3 0220 	rsb	r2, r3, #32
1a003b0c:	409f      	lsls	r7, r3
1a003b0e:	fa20 f202 	lsr.w	r2, r0, r2
1a003b12:	409d      	lsls	r5, r3
1a003b14:	4317      	orrs	r7, r2
1a003b16:	409c      	lsls	r4, r3
1a003b18:	0c29      	lsrs	r1, r5, #16
1a003b1a:	0c22      	lsrs	r2, r4, #16
1a003b1c:	fbb7 fef1 	udiv	lr, r7, r1
1a003b20:	b2a8      	uxth	r0, r5
1a003b22:	fb01 771e 	mls	r7, r1, lr, r7
1a003b26:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a003b2a:	fb00 f30e 	mul.w	r3, r0, lr
1a003b2e:	42bb      	cmp	r3, r7
1a003b30:	d90a      	bls.n	1a003b48 <__divdi3+0x6c>
1a003b32:	197f      	adds	r7, r7, r5
1a003b34:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
1a003b38:	f080 8105 	bcs.w	1a003d46 <__divdi3+0x26a>
1a003b3c:	42bb      	cmp	r3, r7
1a003b3e:	f240 8102 	bls.w	1a003d46 <__divdi3+0x26a>
1a003b42:	f1ae 0e02 	sub.w	lr, lr, #2
1a003b46:	442f      	add	r7, r5
1a003b48:	1aff      	subs	r7, r7, r3
1a003b4a:	b2a4      	uxth	r4, r4
1a003b4c:	fbb7 f3f1 	udiv	r3, r7, r1
1a003b50:	fb01 7713 	mls	r7, r1, r3, r7
1a003b54:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a003b58:	fb00 f003 	mul.w	r0, r0, r3
1a003b5c:	42b8      	cmp	r0, r7
1a003b5e:	d908      	bls.n	1a003b72 <__divdi3+0x96>
1a003b60:	197f      	adds	r7, r7, r5
1a003b62:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a003b66:	f080 80f0 	bcs.w	1a003d4a <__divdi3+0x26e>
1a003b6a:	42b8      	cmp	r0, r7
1a003b6c:	f240 80ed 	bls.w	1a003d4a <__divdi3+0x26e>
1a003b70:	3b02      	subs	r3, #2
1a003b72:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a003b76:	2200      	movs	r2, #0
1a003b78:	e003      	b.n	1a003b82 <__divdi3+0xa6>
1a003b7a:	428b      	cmp	r3, r1
1a003b7c:	d90f      	bls.n	1a003b9e <__divdi3+0xc2>
1a003b7e:	2200      	movs	r2, #0
1a003b80:	4613      	mov	r3, r2
1a003b82:	1c34      	adds	r4, r6, #0
1a003b84:	bf18      	it	ne
1a003b86:	2401      	movne	r4, #1
1a003b88:	4260      	negs	r0, r4
1a003b8a:	f04f 0500 	mov.w	r5, #0
1a003b8e:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a003b92:	4058      	eors	r0, r3
1a003b94:	4051      	eors	r1, r2
1a003b96:	1900      	adds	r0, r0, r4
1a003b98:	4169      	adcs	r1, r5
1a003b9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a003b9e:	fab3 f283 	clz	r2, r3
1a003ba2:	2a00      	cmp	r2, #0
1a003ba4:	f040 8086 	bne.w	1a003cb4 <__divdi3+0x1d8>
1a003ba8:	428b      	cmp	r3, r1
1a003baa:	d302      	bcc.n	1a003bb2 <__divdi3+0xd6>
1a003bac:	4584      	cmp	ip, r0
1a003bae:	f200 80db 	bhi.w	1a003d68 <__divdi3+0x28c>
1a003bb2:	2301      	movs	r3, #1
1a003bb4:	e7e5      	b.n	1a003b82 <__divdi3+0xa6>
1a003bb6:	b912      	cbnz	r2, 1a003bbe <__divdi3+0xe2>
1a003bb8:	2301      	movs	r3, #1
1a003bba:	fbb3 f5f2 	udiv	r5, r3, r2
1a003bbe:	fab5 f085 	clz	r0, r5
1a003bc2:	2800      	cmp	r0, #0
1a003bc4:	d13b      	bne.n	1a003c3e <__divdi3+0x162>
1a003bc6:	1b78      	subs	r0, r7, r5
1a003bc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003bcc:	fa1f fc85 	uxth.w	ip, r5
1a003bd0:	2201      	movs	r2, #1
1a003bd2:	fbb0 f8fe 	udiv	r8, r0, lr
1a003bd6:	0c21      	lsrs	r1, r4, #16
1a003bd8:	fb0e 0718 	mls	r7, lr, r8, r0
1a003bdc:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a003be0:	fb0c f308 	mul.w	r3, ip, r8
1a003be4:	42bb      	cmp	r3, r7
1a003be6:	d907      	bls.n	1a003bf8 <__divdi3+0x11c>
1a003be8:	197f      	adds	r7, r7, r5
1a003bea:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
1a003bee:	d202      	bcs.n	1a003bf6 <__divdi3+0x11a>
1a003bf0:	42bb      	cmp	r3, r7
1a003bf2:	f200 80bd 	bhi.w	1a003d70 <__divdi3+0x294>
1a003bf6:	4688      	mov	r8, r1
1a003bf8:	1aff      	subs	r7, r7, r3
1a003bfa:	b2a4      	uxth	r4, r4
1a003bfc:	fbb7 f3fe 	udiv	r3, r7, lr
1a003c00:	fb0e 7713 	mls	r7, lr, r3, r7
1a003c04:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a003c08:	fb0c fc03 	mul.w	ip, ip, r3
1a003c0c:	45bc      	cmp	ip, r7
1a003c0e:	d907      	bls.n	1a003c20 <__divdi3+0x144>
1a003c10:	197f      	adds	r7, r7, r5
1a003c12:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
1a003c16:	d202      	bcs.n	1a003c1e <__divdi3+0x142>
1a003c18:	45bc      	cmp	ip, r7
1a003c1a:	f200 80a7 	bhi.w	1a003d6c <__divdi3+0x290>
1a003c1e:	460b      	mov	r3, r1
1a003c20:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003c24:	e7ad      	b.n	1a003b82 <__divdi3+0xa6>
1a003c26:	4252      	negs	r2, r2
1a003c28:	ea6f 0606 	mvn.w	r6, r6
1a003c2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003c30:	e75d      	b.n	1a003aee <__divdi3+0x12>
1a003c32:	4240      	negs	r0, r0
1a003c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003c38:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
1a003c3c:	e754      	b.n	1a003ae8 <__divdi3+0xc>
1a003c3e:	f1c0 0220 	rsb	r2, r0, #32
1a003c42:	fa24 f102 	lsr.w	r1, r4, r2
1a003c46:	fa07 f300 	lsl.w	r3, r7, r0
1a003c4a:	4085      	lsls	r5, r0
1a003c4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003c50:	40d7      	lsrs	r7, r2
1a003c52:	4319      	orrs	r1, r3
1a003c54:	fbb7 f2fe 	udiv	r2, r7, lr
1a003c58:	0c0b      	lsrs	r3, r1, #16
1a003c5a:	fb0e 7712 	mls	r7, lr, r2, r7
1a003c5e:	fa1f fc85 	uxth.w	ip, r5
1a003c62:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a003c66:	fb0c f702 	mul.w	r7, ip, r2
1a003c6a:	429f      	cmp	r7, r3
1a003c6c:	fa04 f400 	lsl.w	r4, r4, r0
1a003c70:	d907      	bls.n	1a003c82 <__divdi3+0x1a6>
1a003c72:	195b      	adds	r3, r3, r5
1a003c74:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
1a003c78:	d274      	bcs.n	1a003d64 <__divdi3+0x288>
1a003c7a:	429f      	cmp	r7, r3
1a003c7c:	d972      	bls.n	1a003d64 <__divdi3+0x288>
1a003c7e:	3a02      	subs	r2, #2
1a003c80:	442b      	add	r3, r5
1a003c82:	1bdf      	subs	r7, r3, r7
1a003c84:	b289      	uxth	r1, r1
1a003c86:	fbb7 f8fe 	udiv	r8, r7, lr
1a003c8a:	fb0e 7318 	mls	r3, lr, r8, r7
1a003c8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a003c92:	fb0c f708 	mul.w	r7, ip, r8
1a003c96:	429f      	cmp	r7, r3
1a003c98:	d908      	bls.n	1a003cac <__divdi3+0x1d0>
1a003c9a:	195b      	adds	r3, r3, r5
1a003c9c:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
1a003ca0:	d25c      	bcs.n	1a003d5c <__divdi3+0x280>
1a003ca2:	429f      	cmp	r7, r3
1a003ca4:	d95a      	bls.n	1a003d5c <__divdi3+0x280>
1a003ca6:	f1a8 0802 	sub.w	r8, r8, #2
1a003caa:	442b      	add	r3, r5
1a003cac:	1bd8      	subs	r0, r3, r7
1a003cae:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a003cb2:	e78e      	b.n	1a003bd2 <__divdi3+0xf6>
1a003cb4:	f1c2 0320 	rsb	r3, r2, #32
1a003cb8:	fa2c f103 	lsr.w	r1, ip, r3
1a003cbc:	fa0e fe02 	lsl.w	lr, lr, r2
1a003cc0:	fa20 f703 	lsr.w	r7, r0, r3
1a003cc4:	ea41 0e0e 	orr.w	lr, r1, lr
1a003cc8:	fa08 f002 	lsl.w	r0, r8, r2
1a003ccc:	fa28 f103 	lsr.w	r1, r8, r3
1a003cd0:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a003cd4:	4338      	orrs	r0, r7
1a003cd6:	fbb1 f8f5 	udiv	r8, r1, r5
1a003cda:	0c03      	lsrs	r3, r0, #16
1a003cdc:	fb05 1118 	mls	r1, r5, r8, r1
1a003ce0:	fa1f f78e 	uxth.w	r7, lr
1a003ce4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a003ce8:	fb07 f308 	mul.w	r3, r7, r8
1a003cec:	428b      	cmp	r3, r1
1a003cee:	fa0c fc02 	lsl.w	ip, ip, r2
1a003cf2:	d909      	bls.n	1a003d08 <__divdi3+0x22c>
1a003cf4:	eb11 010e 	adds.w	r1, r1, lr
1a003cf8:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
1a003cfc:	d230      	bcs.n	1a003d60 <__divdi3+0x284>
1a003cfe:	428b      	cmp	r3, r1
1a003d00:	d92e      	bls.n	1a003d60 <__divdi3+0x284>
1a003d02:	f1a8 0802 	sub.w	r8, r8, #2
1a003d06:	4471      	add	r1, lr
1a003d08:	1ac9      	subs	r1, r1, r3
1a003d0a:	b280      	uxth	r0, r0
1a003d0c:	fbb1 f3f5 	udiv	r3, r1, r5
1a003d10:	fb05 1113 	mls	r1, r5, r3, r1
1a003d14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a003d18:	fb07 f703 	mul.w	r7, r7, r3
1a003d1c:	428f      	cmp	r7, r1
1a003d1e:	d908      	bls.n	1a003d32 <__divdi3+0x256>
1a003d20:	eb11 010e 	adds.w	r1, r1, lr
1a003d24:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
1a003d28:	d216      	bcs.n	1a003d58 <__divdi3+0x27c>
1a003d2a:	428f      	cmp	r7, r1
1a003d2c:	d914      	bls.n	1a003d58 <__divdi3+0x27c>
1a003d2e:	3b02      	subs	r3, #2
1a003d30:	4471      	add	r1, lr
1a003d32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003d36:	1bc9      	subs	r1, r1, r7
1a003d38:	fba3 890c 	umull	r8, r9, r3, ip
1a003d3c:	4549      	cmp	r1, r9
1a003d3e:	d309      	bcc.n	1a003d54 <__divdi3+0x278>
1a003d40:	d005      	beq.n	1a003d4e <__divdi3+0x272>
1a003d42:	2200      	movs	r2, #0
1a003d44:	e71d      	b.n	1a003b82 <__divdi3+0xa6>
1a003d46:	4696      	mov	lr, r2
1a003d48:	e6fe      	b.n	1a003b48 <__divdi3+0x6c>
1a003d4a:	4613      	mov	r3, r2
1a003d4c:	e711      	b.n	1a003b72 <__divdi3+0x96>
1a003d4e:	4094      	lsls	r4, r2
1a003d50:	4544      	cmp	r4, r8
1a003d52:	d2f6      	bcs.n	1a003d42 <__divdi3+0x266>
1a003d54:	3b01      	subs	r3, #1
1a003d56:	e7f4      	b.n	1a003d42 <__divdi3+0x266>
1a003d58:	4603      	mov	r3, r0
1a003d5a:	e7ea      	b.n	1a003d32 <__divdi3+0x256>
1a003d5c:	4688      	mov	r8, r1
1a003d5e:	e7a5      	b.n	1a003cac <__divdi3+0x1d0>
1a003d60:	46c8      	mov	r8, r9
1a003d62:	e7d1      	b.n	1a003d08 <__divdi3+0x22c>
1a003d64:	4602      	mov	r2, r0
1a003d66:	e78c      	b.n	1a003c82 <__divdi3+0x1a6>
1a003d68:	4613      	mov	r3, r2
1a003d6a:	e70a      	b.n	1a003b82 <__divdi3+0xa6>
1a003d6c:	3b02      	subs	r3, #2
1a003d6e:	e757      	b.n	1a003c20 <__divdi3+0x144>
1a003d70:	f1a8 0802 	sub.w	r8, r8, #2
1a003d74:	442f      	add	r7, r5
1a003d76:	e73f      	b.n	1a003bf8 <__divdi3+0x11c>

1a003d78 <__udivdi3>:
1a003d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003d7c:	2b00      	cmp	r3, #0
1a003d7e:	d144      	bne.n	1a003e0a <__udivdi3+0x92>
1a003d80:	428a      	cmp	r2, r1
1a003d82:	4615      	mov	r5, r2
1a003d84:	4604      	mov	r4, r0
1a003d86:	d94f      	bls.n	1a003e28 <__udivdi3+0xb0>
1a003d88:	fab2 f782 	clz	r7, r2
1a003d8c:	460e      	mov	r6, r1
1a003d8e:	b14f      	cbz	r7, 1a003da4 <__udivdi3+0x2c>
1a003d90:	f1c7 0320 	rsb	r3, r7, #32
1a003d94:	40b9      	lsls	r1, r7
1a003d96:	fa20 f603 	lsr.w	r6, r0, r3
1a003d9a:	fa02 f507 	lsl.w	r5, r2, r7
1a003d9e:	430e      	orrs	r6, r1
1a003da0:	fa00 f407 	lsl.w	r4, r0, r7
1a003da4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003da8:	0c23      	lsrs	r3, r4, #16
1a003daa:	fbb6 f0fe 	udiv	r0, r6, lr
1a003dae:	b2af      	uxth	r7, r5
1a003db0:	fb0e 6110 	mls	r1, lr, r0, r6
1a003db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003db8:	fb07 f100 	mul.w	r1, r7, r0
1a003dbc:	4299      	cmp	r1, r3
1a003dbe:	d909      	bls.n	1a003dd4 <__udivdi3+0x5c>
1a003dc0:	195b      	adds	r3, r3, r5
1a003dc2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
1a003dc6:	f080 80ec 	bcs.w	1a003fa2 <__udivdi3+0x22a>
1a003dca:	4299      	cmp	r1, r3
1a003dcc:	f240 80e9 	bls.w	1a003fa2 <__udivdi3+0x22a>
1a003dd0:	3802      	subs	r0, #2
1a003dd2:	442b      	add	r3, r5
1a003dd4:	1a5a      	subs	r2, r3, r1
1a003dd6:	b2a4      	uxth	r4, r4
1a003dd8:	fbb2 f3fe 	udiv	r3, r2, lr
1a003ddc:	fb0e 2213 	mls	r2, lr, r3, r2
1a003de0:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a003de4:	fb07 f703 	mul.w	r7, r7, r3
1a003de8:	4297      	cmp	r7, r2
1a003dea:	d908      	bls.n	1a003dfe <__udivdi3+0x86>
1a003dec:	1952      	adds	r2, r2, r5
1a003dee:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
1a003df2:	f080 80d8 	bcs.w	1a003fa6 <__udivdi3+0x22e>
1a003df6:	4297      	cmp	r7, r2
1a003df8:	f240 80d5 	bls.w	1a003fa6 <__udivdi3+0x22e>
1a003dfc:	3b02      	subs	r3, #2
1a003dfe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a003e02:	2600      	movs	r6, #0
1a003e04:	4631      	mov	r1, r6
1a003e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003e0a:	428b      	cmp	r3, r1
1a003e0c:	d847      	bhi.n	1a003e9e <__udivdi3+0x126>
1a003e0e:	fab3 f683 	clz	r6, r3
1a003e12:	2e00      	cmp	r6, #0
1a003e14:	d148      	bne.n	1a003ea8 <__udivdi3+0x130>
1a003e16:	428b      	cmp	r3, r1
1a003e18:	d302      	bcc.n	1a003e20 <__udivdi3+0xa8>
1a003e1a:	4282      	cmp	r2, r0
1a003e1c:	f200 80cd 	bhi.w	1a003fba <__udivdi3+0x242>
1a003e20:	2001      	movs	r0, #1
1a003e22:	4631      	mov	r1, r6
1a003e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003e28:	b912      	cbnz	r2, 1a003e30 <__udivdi3+0xb8>
1a003e2a:	2501      	movs	r5, #1
1a003e2c:	fbb5 f5f2 	udiv	r5, r5, r2
1a003e30:	fab5 f885 	clz	r8, r5
1a003e34:	f1b8 0f00 	cmp.w	r8, #0
1a003e38:	d177      	bne.n	1a003f2a <__udivdi3+0x1b2>
1a003e3a:	1b4a      	subs	r2, r1, r5
1a003e3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003e40:	b2af      	uxth	r7, r5
1a003e42:	2601      	movs	r6, #1
1a003e44:	fbb2 f0fe 	udiv	r0, r2, lr
1a003e48:	0c23      	lsrs	r3, r4, #16
1a003e4a:	fb0e 2110 	mls	r1, lr, r0, r2
1a003e4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a003e52:	fb07 f300 	mul.w	r3, r7, r0
1a003e56:	428b      	cmp	r3, r1
1a003e58:	d907      	bls.n	1a003e6a <__udivdi3+0xf2>
1a003e5a:	1949      	adds	r1, r1, r5
1a003e5c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
1a003e60:	d202      	bcs.n	1a003e68 <__udivdi3+0xf0>
1a003e62:	428b      	cmp	r3, r1
1a003e64:	f200 80ba 	bhi.w	1a003fdc <__udivdi3+0x264>
1a003e68:	4610      	mov	r0, r2
1a003e6a:	1ac9      	subs	r1, r1, r3
1a003e6c:	b2a4      	uxth	r4, r4
1a003e6e:	fbb1 f3fe 	udiv	r3, r1, lr
1a003e72:	fb0e 1113 	mls	r1, lr, r3, r1
1a003e76:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a003e7a:	fb07 f703 	mul.w	r7, r7, r3
1a003e7e:	42a7      	cmp	r7, r4
1a003e80:	d908      	bls.n	1a003e94 <__udivdi3+0x11c>
1a003e82:	1964      	adds	r4, r4, r5
1a003e84:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a003e88:	f080 808f 	bcs.w	1a003faa <__udivdi3+0x232>
1a003e8c:	42a7      	cmp	r7, r4
1a003e8e:	f240 808c 	bls.w	1a003faa <__udivdi3+0x232>
1a003e92:	3b02      	subs	r3, #2
1a003e94:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a003e98:	4631      	mov	r1, r6
1a003e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003e9e:	2600      	movs	r6, #0
1a003ea0:	4630      	mov	r0, r6
1a003ea2:	4631      	mov	r1, r6
1a003ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003ea8:	f1c6 0420 	rsb	r4, r6, #32
1a003eac:	fa22 f504 	lsr.w	r5, r2, r4
1a003eb0:	40b3      	lsls	r3, r6
1a003eb2:	432b      	orrs	r3, r5
1a003eb4:	fa20 fc04 	lsr.w	ip, r0, r4
1a003eb8:	fa01 f706 	lsl.w	r7, r1, r6
1a003ebc:	fa21 f504 	lsr.w	r5, r1, r4
1a003ec0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a003ec4:	ea4c 0707 	orr.w	r7, ip, r7
1a003ec8:	fbb5 f8fe 	udiv	r8, r5, lr
1a003ecc:	0c39      	lsrs	r1, r7, #16
1a003ece:	fb0e 5518 	mls	r5, lr, r8, r5
1a003ed2:	fa1f fc83 	uxth.w	ip, r3
1a003ed6:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a003eda:	fb0c f108 	mul.w	r1, ip, r8
1a003ede:	42a9      	cmp	r1, r5
1a003ee0:	fa02 f206 	lsl.w	r2, r2, r6
1a003ee4:	d904      	bls.n	1a003ef0 <__udivdi3+0x178>
1a003ee6:	18ed      	adds	r5, r5, r3
1a003ee8:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
1a003eec:	d367      	bcc.n	1a003fbe <__udivdi3+0x246>
1a003eee:	46a0      	mov	r8, r4
1a003ef0:	1a6d      	subs	r5, r5, r1
1a003ef2:	b2bf      	uxth	r7, r7
1a003ef4:	fbb5 f4fe 	udiv	r4, r5, lr
1a003ef8:	fb0e 5514 	mls	r5, lr, r4, r5
1a003efc:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a003f00:	fb0c fc04 	mul.w	ip, ip, r4
1a003f04:	458c      	cmp	ip, r1
1a003f06:	d904      	bls.n	1a003f12 <__udivdi3+0x19a>
1a003f08:	18c9      	adds	r1, r1, r3
1a003f0a:	f104 35ff 	add.w	r5, r4, #4294967295	; 0xffffffff
1a003f0e:	d35c      	bcc.n	1a003fca <__udivdi3+0x252>
1a003f10:	462c      	mov	r4, r5
1a003f12:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a003f16:	ebcc 0101 	rsb	r1, ip, r1
1a003f1a:	fba4 2302 	umull	r2, r3, r4, r2
1a003f1e:	4299      	cmp	r1, r3
1a003f20:	d348      	bcc.n	1a003fb4 <__udivdi3+0x23c>
1a003f22:	d044      	beq.n	1a003fae <__udivdi3+0x236>
1a003f24:	4620      	mov	r0, r4
1a003f26:	2600      	movs	r6, #0
1a003f28:	e76c      	b.n	1a003e04 <__udivdi3+0x8c>
1a003f2a:	f1c8 0420 	rsb	r4, r8, #32
1a003f2e:	fa01 f308 	lsl.w	r3, r1, r8
1a003f32:	fa05 f508 	lsl.w	r5, r5, r8
1a003f36:	fa20 f704 	lsr.w	r7, r0, r4
1a003f3a:	40e1      	lsrs	r1, r4
1a003f3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003f40:	431f      	orrs	r7, r3
1a003f42:	fbb1 f6fe 	udiv	r6, r1, lr
1a003f46:	0c3a      	lsrs	r2, r7, #16
1a003f48:	fb0e 1116 	mls	r1, lr, r6, r1
1a003f4c:	fa1f fc85 	uxth.w	ip, r5
1a003f50:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a003f54:	fb0c f206 	mul.w	r2, ip, r6
1a003f58:	429a      	cmp	r2, r3
1a003f5a:	fa00 f408 	lsl.w	r4, r0, r8
1a003f5e:	d907      	bls.n	1a003f70 <__udivdi3+0x1f8>
1a003f60:	195b      	adds	r3, r3, r5
1a003f62:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
1a003f66:	d237      	bcs.n	1a003fd8 <__udivdi3+0x260>
1a003f68:	429a      	cmp	r2, r3
1a003f6a:	d935      	bls.n	1a003fd8 <__udivdi3+0x260>
1a003f6c:	3e02      	subs	r6, #2
1a003f6e:	442b      	add	r3, r5
1a003f70:	1a9b      	subs	r3, r3, r2
1a003f72:	b2bf      	uxth	r7, r7
1a003f74:	fbb3 f0fe 	udiv	r0, r3, lr
1a003f78:	fb0e 3310 	mls	r3, lr, r0, r3
1a003f7c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a003f80:	fb0c f100 	mul.w	r1, ip, r0
1a003f84:	4299      	cmp	r1, r3
1a003f86:	d907      	bls.n	1a003f98 <__udivdi3+0x220>
1a003f88:	195b      	adds	r3, r3, r5
1a003f8a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
1a003f8e:	d221      	bcs.n	1a003fd4 <__udivdi3+0x25c>
1a003f90:	4299      	cmp	r1, r3
1a003f92:	d91f      	bls.n	1a003fd4 <__udivdi3+0x25c>
1a003f94:	3802      	subs	r0, #2
1a003f96:	442b      	add	r3, r5
1a003f98:	1a5a      	subs	r2, r3, r1
1a003f9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a003f9e:	4667      	mov	r7, ip
1a003fa0:	e750      	b.n	1a003e44 <__udivdi3+0xcc>
1a003fa2:	4610      	mov	r0, r2
1a003fa4:	e716      	b.n	1a003dd4 <__udivdi3+0x5c>
1a003fa6:	460b      	mov	r3, r1
1a003fa8:	e729      	b.n	1a003dfe <__udivdi3+0x86>
1a003faa:	4613      	mov	r3, r2
1a003fac:	e772      	b.n	1a003e94 <__udivdi3+0x11c>
1a003fae:	40b0      	lsls	r0, r6
1a003fb0:	4290      	cmp	r0, r2
1a003fb2:	d2b7      	bcs.n	1a003f24 <__udivdi3+0x1ac>
1a003fb4:	1e60      	subs	r0, r4, #1
1a003fb6:	2600      	movs	r6, #0
1a003fb8:	e724      	b.n	1a003e04 <__udivdi3+0x8c>
1a003fba:	4630      	mov	r0, r6
1a003fbc:	e722      	b.n	1a003e04 <__udivdi3+0x8c>
1a003fbe:	42a9      	cmp	r1, r5
1a003fc0:	d995      	bls.n	1a003eee <__udivdi3+0x176>
1a003fc2:	f1a8 0802 	sub.w	r8, r8, #2
1a003fc6:	441d      	add	r5, r3
1a003fc8:	e792      	b.n	1a003ef0 <__udivdi3+0x178>
1a003fca:	458c      	cmp	ip, r1
1a003fcc:	d9a0      	bls.n	1a003f10 <__udivdi3+0x198>
1a003fce:	3c02      	subs	r4, #2
1a003fd0:	4419      	add	r1, r3
1a003fd2:	e79e      	b.n	1a003f12 <__udivdi3+0x19a>
1a003fd4:	4610      	mov	r0, r2
1a003fd6:	e7df      	b.n	1a003f98 <__udivdi3+0x220>
1a003fd8:	460e      	mov	r6, r1
1a003fda:	e7c9      	b.n	1a003f70 <__udivdi3+0x1f8>
1a003fdc:	3802      	subs	r0, #2
1a003fde:	4429      	add	r1, r5
1a003fe0:	e743      	b.n	1a003e6a <__udivdi3+0xf2>
1a003fe2:	bf00      	nop

1a003fe4 <__libc_init_array>:
1a003fe4:	b570      	push	{r4, r5, r6, lr}
1a003fe6:	4b0e      	ldr	r3, [pc, #56]	; (1a004020 <__libc_init_array+0x3c>)
1a003fe8:	4c0e      	ldr	r4, [pc, #56]	; (1a004024 <__libc_init_array+0x40>)
1a003fea:	1ae4      	subs	r4, r4, r3
1a003fec:	10a4      	asrs	r4, r4, #2
1a003fee:	2500      	movs	r5, #0
1a003ff0:	461e      	mov	r6, r3
1a003ff2:	42a5      	cmp	r5, r4
1a003ff4:	d004      	beq.n	1a004000 <__libc_init_array+0x1c>
1a003ff6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003ffa:	4798      	blx	r3
1a003ffc:	3501      	adds	r5, #1
1a003ffe:	e7f8      	b.n	1a003ff2 <__libc_init_array+0xe>
1a004000:	f7ff fd20 	bl	1a003a44 <_init>
1a004004:	4c08      	ldr	r4, [pc, #32]	; (1a004028 <__libc_init_array+0x44>)
1a004006:	4b09      	ldr	r3, [pc, #36]	; (1a00402c <__libc_init_array+0x48>)
1a004008:	1ae4      	subs	r4, r4, r3
1a00400a:	10a4      	asrs	r4, r4, #2
1a00400c:	2500      	movs	r5, #0
1a00400e:	461e      	mov	r6, r3
1a004010:	42a5      	cmp	r5, r4
1a004012:	d004      	beq.n	1a00401e <__libc_init_array+0x3a>
1a004014:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a004018:	4798      	blx	r3
1a00401a:	3501      	adds	r5, #1
1a00401c:	e7f8      	b.n	1a004010 <__libc_init_array+0x2c>
1a00401e:	bd70      	pop	{r4, r5, r6, pc}
1a004020:	1a0043f0 	.word	0x1a0043f0
1a004024:	1a0043f0 	.word	0x1a0043f0
1a004028:	1a0043f0 	.word	0x1a0043f0
1a00402c:	1a0043f0 	.word	0x1a0043f0

1a004030 <memcpy>:
1a004030:	b510      	push	{r4, lr}
1a004032:	1e43      	subs	r3, r0, #1
1a004034:	440a      	add	r2, r1
1a004036:	4291      	cmp	r1, r2
1a004038:	d004      	beq.n	1a004044 <memcpy+0x14>
1a00403a:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00403e:	f803 4f01 	strb.w	r4, [r3, #1]!
1a004042:	e7f8      	b.n	1a004036 <memcpy+0x6>
1a004044:	bd10      	pop	{r4, pc}

1a004046 <memset>:
1a004046:	4402      	add	r2, r0
1a004048:	4603      	mov	r3, r0
1a00404a:	4293      	cmp	r3, r2
1a00404c:	d002      	beq.n	1a004054 <memset+0xe>
1a00404e:	f803 1b01 	strb.w	r1, [r3], #1
1a004052:	e7fa      	b.n	1a00404a <memset+0x4>
1a004054:	4770      	bx	lr
1a004056:	ffff 6c42 	vdup.8	q11, d2[7]
1a00405a:	6e69      	.short	0x6e69
1a00405c:	6320796b 	.word	0x6320796b
1a004060:	66206e6f 	.word	0x66206e6f
1a004064:	52656572 	.word	0x52656572
1a004068:	20534f54 	.word	0x20534f54
1a00406c:	41732079 	.word	0x41732079
1a004070:	002e4950 	.word	0x002e4950
1a004074:	6f626564 	.word	0x6f626564
1a004078:	65636e75 	.word	0x65636e75
1a00407c:	00000000 	.word	0x00000000
1a004080:	656d6974 	.word	0x656d6974
1a004084:	7361654d 	.word	0x7361654d
1a004088:	00657275 	.word	0x00657275
1a00408c:	6b736174 	.word	0x6b736174
1a004090:	4c6d7750 	.word	0x4c6d7750
1a004094:	00316465 	.word	0x00316465
1a004098:	6b736174 	.word	0x6b736174
1a00409c:	4c6d7750 	.word	0x4c6d7750
1a0040a0:	00326465 	.word	0x00326465
1a0040a4:	454c4449 	.word	0x454c4449
1a0040a8:	ffffff00 	.word	0xffffff00
1a0040ac:	51726d54 	.word	0x51726d54
1a0040b0:	00000000 	.word	0x00000000
1a0040b4:	20726d54 	.word	0x20726d54
1a0040b8:	00637653 	.word	0x00637653

1a0040bc <gpioPinsInit>:
1a0040bc:	02000104 00050701 05010d03 04080100     ................
1a0040cc:	02020002 02000304 00000403 04070002     ................
1a0040dc:	030c0300 09050402 05040103 04030208     ................
1a0040ec:	04020305 06040504 0802000c 03000b06     ................
1a0040fc:	00090607 07060503 060f0504 03030004     ................
1a00410c:	02000404 00050404 06040502 04060200     ................
1a00411c:	0c050408 05040a04 0003010e 14010a00     ................
1a00412c:	010f0000 0d000012 00001101 0010010c     ................
1a00413c:	07070300 000f0300 01000001 00000000     ................
1a00414c:	000a0600 08060603 06100504 04030005     ................
1a00415c:	03000106 04090400 04010d05 010b0000     ................
1a00416c:	0200000f 00000001 00010104 02010800     ................
1a00417c:	01090000 09010006 05040002 04010200     ................
1a00418c:	02020105 02020504 0e00000a 01000b02     ................
1a00419c:	000c020b 00040c01 04000200 01020001     ................
1a0041ac:	02000204 00030402 03070302 070b0300     ................
1a0041bc:	0c030004 03000507 0006070d 01020e03     ................
1a0041cc:	04010504 06020006 02000504 00040405     ................
1a0041dc:	08040402 040c0504 0d050409 05040a04     ................
1a0041ec:	0005010e ffff0801 636b6974 69547265     ........tikcerTi
1a0041fc:	0072656d                                mer.

1a004200 <lpcUarts>:
1a004200:	40081000 06020406 00180205 40081000     ...@...........@
1a004210:	09070509 00180706 40082000 00000000     ......... .@....
1a004220:	00190000 400c1000 07060107 001a0602     .......@........
1a004230:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a004240:	02020302 001b0204 ff000a0d              ............

1a00424c <GpioPorts>:
1a00424c:	03030003 0f050403 05031005 07030603     ................
1a00425c:	ffff0802                                ....

1a004260 <OscRateIn>:
1a004260:	00b71b00                                ....

1a004264 <ExtRateIn>:
1a004264:	00000000                                ....

1a004268 <GpioButtons>:
1a004268:	08000400 09010900                       ........

1a004270 <GpioLeds>:
1a004270:	01050005 0e000205 0c010b01              ............

1a00427c <InitClkStates>:
1a00427c:	00010308 00010307 01010f01              ............

1a004288 <pinmuxing>:
1a004288:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004298:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0042a8:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0042b8:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0042c8:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0042d8:	00d50301 00d50401 00160107 00560207     ..............V.
1a0042e8:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0042f8:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a004308:	00b31201 00f01301 00b31401 00b60707     ................
1a004318:	00f20000 00b60100                       ........

1a004320 <UART_BClock>:
1a004320:	01a201c2 01620182                       ......b.

1a004328 <UART_PClock>:
1a004328:	00820081 00a200a1 08040201 0f0f0f03     ................
1a004338:	000000ff                                ....

1a00433c <periph_to_base>:
1a00433c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00434c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00435c:	000100e0 01000100 01200003 00060120     .......... . ...
1a00436c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00437c:	01820013 00120182 01a201a2 01c20011     ................
1a00438c:	001001c2 01e201e2 0202000f 000e0202     ................
1a00439c:	02220222 0223000d 001c0223              "."...#.#...

1a0043a8 <InitClkStates>:
1a0043a8:	00010100 00010909 0001090a 01010701     ................
1a0043b8:	00010902 00010906 0101090c 0001090d     ................
1a0043c8:	0001090e 0001090f 00010910 00010911     ................
1a0043d8:	00010912 00010913 00011114 00011119     ................
1a0043e8:	0001111a 0001111b                       ........
